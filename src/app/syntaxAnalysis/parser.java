
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package app.syntaxAnalysis;

import java_cup.runtime.*;
import app.lexicAnalysis.*;
import AST.astTreeDeclaration.*;
import AST.mainFunctionDeclaration.*;
import AST.externalDeclaration.*;
import AST.mainFunction.*;
import AST.functionDefinition.*;
import AST.jumpStatement.*;
import AST.iterationStatement.*;
import AST.selectionStatement.*;
import AST.statementList.*;
import AST.declarationList.*;
import AST.compoundStatement.*;
import AST.labeledStatement.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.parameterList.*;
import AST.mainDeclarator.*;
import AST.typeSpecifier.*;
import AST.variableTypeSpecifier.*;
import AST.declaration.*;
import AST.assignmentExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.ioExpressions.*;
import AST.primaryExpression.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\006\004\000\002\006\002" +
    "\000\002\005\007\000\002\007\007\000\002\007\010\000" +
    "\002\037\004\000\002\037\004\000\002\040\004\000\002" +
    "\040\005\000\002\012\007\000\002\012\016\000\002\012" +
    "\015\000\002\014\007\000\002\014\011\000\002\014\011" +
    "\000\002\027\003\000\002\027\004\000\002\011\004\000" +
    "\002\011\005\000\002\026\007\000\002\026\007\000\002" +
    "\026\007\000\002\026\005\000\002\026\002\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\034\003\000\002\034\005\000\002" +
    "\035\003\000\002\035\005\000\002\013\004\000\002\013" +
    "\006\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\015\003\000\002\015\003\000\002\015\003\000\002" +
    "\015\003\000\002\015\003\000\002\004\005\000\002\004" +
    "\007\000\002\031\005\000\002\031\007\000\002\031\006" +
    "\000\002\017\006\000\002\017\005\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\025\003\000\002" +
    "\025\005\000\002\025\005\000\002\021\003\000\002\021" +
    "\005\000\002\021\005\000\002\021\005\000\002\021\005" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\032\007\000\002\032\011\000\002\032\007\000\002\032" +
    "\007\000\002\041\002\000\002\032\011\000\002\042\002" +
    "\000\002\032\011\000\002\043\002\000\002\032\013\000" +
    "\002\033\006\000\002\033\007\000\002\044\002\000\002" +
    "\033\010\000\002\045\002\000\002\033\011\000\002\016" +
    "\003\000\002\024\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\016\004\005\005\006\006\013\007\017\010" +
    "\012\011\010\001\002\000\004\002\001\001\002\000\006" +
    "\023\uffd6\053\uffd0\001\002\000\006\023\uffd3\053\uffcd\001" +
    "\002\000\020\002\ufffc\004\325\005\327\006\331\007\334" +
    "\010\330\011\010\001\002\000\006\023\uffd2\053\uffd2\001" +
    "\002\000\004\002\324\001\002\000\006\023\uffd4\053\uffce" +
    "\001\002\000\006\023\uffd5\053\uffcf\001\002\000\016\004" +
    "\005\005\006\006\013\007\017\010\012\011\010\001\002" +
    "\000\004\023\101\001\002\000\004\053\020\001\002\000" +
    "\006\023\uffd7\053\uffd1\001\002\000\010\027\uffdd\030\uffdd" +
    "\052\025\001\002\000\006\027\022\030\023\001\002\000" +
    "\004\053\024\001\002\000\016\004\uffcc\005\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\001\002\000\006\027\uffdc\030" +
    "\uffdc\001\002\000\022\036\037\053\041\054\026\055\034" +
    "\056\033\057\042\060\032\061\036\001\002\000\040\027" +
    "\uffa1\030\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\037\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050" +
    "\uffa1\051\uffa1\001\002\000\034\027\uffbf\030\uffbf\032\063" +
    "\033\062\037\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000\020\027\uffc5" +
    "\030\uffc5\037\uffc5\046\uffc5\047\uffc5\050\074\051\075\001" +
    "\002\000\014\027\uffa4\030\uffa4\037\uffa4\046\072\047\071" +
    "\001\002\000\040\027\uff9d\030\uff9d\032\uff9d\033\uff9d\034" +
    "\uff9d\035\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d" +
    "\046\uff9d\047\uff9d\050\uff9d\051\uff9d\001\002\000\040\027" +
    "\uff9e\030\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e\037\uff9e" +
    "\042\uff9e\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050" +
    "\uff9e\051\uff9e\001\002\000\040\027\uff9f\030\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\037\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002" +
    "\000\030\027\uffc2\030\uffc2\037\uffc2\042\055\043\056\044" +
    "\057\045\060\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002" +
    "\000\040\027\uff9c\030\uff9c\032\uff9c\033\uff9c\034\uff9c\035" +
    "\uff9c\037\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c" +
    "\047\uff9c\050\uff9c\051\uff9c\001\002\000\022\036\037\053" +
    "\041\054\026\055\034\056\033\057\042\060\032\061\036" +
    "\001\002\000\004\030\052\001\002\000\040\027\uffa2\030" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\037\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\047\uffa2\050\uffa2\051" +
    "\uffa2\001\002\000\040\027\uffa0\030\uffa0\032\uffa0\033\uffa0" +
    "\034\uffa0\035\uffa0\037\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0\001\002\000\040" +
    "\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\037" +
    "\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3" +
    "\050\uffa3\051\uffa3\001\002\000\040\027\uffba\030\uffba\032" +
    "\uffba\033\uffba\034\046\035\047\037\uffba\042\uffba\043\uffba" +
    "\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\001" +
    "\002\000\040\027\uffb7\030\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\037\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046" +
    "\uffb7\047\uffb7\050\uffb7\051\uffb7\001\002\000\022\036\037" +
    "\053\041\054\026\055\034\056\033\057\042\060\032\061" +
    "\036\001\002\000\022\036\037\053\041\054\026\055\034" +
    "\056\033\057\042\060\032\061\036\001\002\000\040\027" +
    "\uffb5\030\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5" +
    "\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5\050" +
    "\uffb5\051\uffb5\001\002\000\040\027\uffb6\030\uffb6\032\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\037\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002" +
    "\000\016\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\001\002\000\004\037\054\001\002\000\040\027\uff9b" +
    "\030\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\037\uff9b\042" +
    "\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\047\uff9b\050\uff9b" +
    "\051\uff9b\001\002\000\022\036\037\053\041\054\026\055" +
    "\034\056\033\057\042\060\032\061\036\001\002\000\022" +
    "\036\037\053\041\054\026\055\034\056\033\057\042\060" +
    "\032\061\036\001\002\000\022\036\037\053\041\054\026" +
    "\055\034\056\033\057\042\060\032\061\036\001\002\000" +
    "\022\036\037\053\041\054\026\055\034\056\033\057\042" +
    "\060\032\061\036\001\002\000\034\027\uffbe\030\uffbe\032" +
    "\063\033\062\037\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe" +
    "\046\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002\000\022\036" +
    "\037\053\041\054\026\055\034\056\033\057\042\060\032" +
    "\061\036\001\002\000\022\036\037\053\041\054\026\055" +
    "\034\056\033\057\042\060\032\061\036\001\002\000\040" +
    "\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034\046\035\047\037" +
    "\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9" +
    "\050\uffb9\051\uffb9\001\002\000\040\027\uffb8\030\uffb8\032" +
    "\uffb8\033\uffb8\034\046\035\047\037\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001" +
    "\002\000\034\027\uffbd\030\uffbd\032\063\033\062\037\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050" +
    "\uffbd\051\uffbd\001\002\000\034\027\uffbc\030\uffbc\032\063" +
    "\033\062\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046" +
    "\uffbc\047\uffbc\050\uffbc\051\uffbc\001\002\000\034\027\uffbb" +
    "\030\uffbb\032\063\033\062\037\uffbb\042\uffbb\043\uffbb\044" +
    "\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\022\036\037\053\041" +
    "\054\026\055\034\056\033\057\042\060\032\061\036\001" +
    "\002\000\020\027\uffc3\030\uffc3\037\uffc3\046\uffc3\047\uffc3" +
    "\050\074\051\075\001\002\000\022\036\037\053\041\054" +
    "\026\055\034\056\033\057\042\060\032\061\036\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\030\027\uffc1\030\uffc1" +
    "\037\uffc1\042\055\043\056\044\057\045\060\046\uffc1\047" +
    "\uffc1\050\uffc1\051\uffc1\001\002\000\030\027\uffc0\030\uffc0" +
    "\037\uffc0\042\055\043\056\044\057\045\060\046\uffc0\047" +
    "\uffc0\050\uffc0\051\uffc0\001\002\000\020\027\uffc4\030\uffc4" +
    "\037\uffc4\046\uffc4\047\uffc4\050\074\051\075\001\002\000" +
    "\004\036\102\001\002\000\004\037\103\001\002\000\004" +
    "\040\105\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002\000\044\004\134" +
    "\005\125\006\140\007\115\010\126\012\135\013\114\014" +
    "\122\016\120\021\130\022\110\024\116\025\131\026\136" +
    "\040\105\041\121\053\124\001\002\000\044\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\016\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\040" +
    "\uffe2\041\uffe2\053\uffe2\001\002\000\044\004\uffde\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\012\uffde\013\uffde\014\uffde\016" +
    "\uffde\021\uffde\022\uffde\024\uffde\025\uffde\026\uffde\040\uffde" +
    "\041\uffde\053\uffde\001\002\000\004\030\322\001\002\000" +
    "\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\013\uffe3\014\uffe3\016\uffe3\021\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\040\uffe3\041\uffe3\053\uffe3\001\002\000\044" +
    "\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013" +
    "\uffe0\014\uffe0\016\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\040\uffe0\041\uffe0\053\uffe0\001\002\000\044\004" +
    "\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee" +
    "\014\uffee\016\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026" +
    "\uffee\040\uffee\041\uffee\053\uffee\001\002\000\004\036\316" +
    "\001\002\000\004\053\uffd1\001\002\000\024\030\314\036" +
    "\037\053\041\054\026\055\034\056\033\057\042\060\032" +
    "\061\036\001\002\000\004\053\305\001\002\000\004\036" +
    "\257\001\002\000\056\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015" +
    "\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\024\uffec" +
    "\025\uffec\026\uffec\040\uffec\041\uffec\053\uffec\001\002\000" +
    "\004\036\251\001\002\000\044\004\uffe5\005\uffe5\006\uffe5" +
    "\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014\uffe5\016\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\040\uffe5\041\uffe5" +
    "\053\uffe5\001\002\000\006\036\232\052\233\001\002\000" +
    "\004\053\uffcd\001\002\000\004\053\uffce\001\002\000\044" +
    "\004\134\005\125\006\140\007\115\010\126\012\135\013" +
    "\114\014\122\016\120\021\130\022\110\024\116\025\131" +
    "\026\136\040\105\041\231\053\124\001\002\000\004\030" +
    "\227\001\002\000\004\036\203\001\002\000\044\004\uffe1" +
    "\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\016\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1" +
    "\040\uffe1\041\uffe1\053\uffe1\001\002\000\044\004\uffe4\005" +
    "\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4" +
    "\016\uffe4\021\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\040" +
    "\uffe4\041\uffe4\053\uffe4\001\002\000\004\053\uffd0\001\002" +
    "\000\004\036\150\001\002\000\004\036\141\001\002\000" +
    "\044\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012\uffdf" +
    "\013\uffdf\014\uffdf\016\uffdf\021\uffdf\022\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\040\uffdf\041\uffdf\053\uffdf\001\002\000\004" +
    "\053\uffcf\001\002\000\004\053\142\001\002\000\004\037" +
    "\143\001\002\000\006\003\144\030\145\001\002\000\004" +
    "\030\uffb0\001\002\000\044\004\uffb1\005\uffb1\006\uffb1\007" +
    "\uffb1\010\uffb1\012\uffb1\013\uffb1\014\uffb1\016\uffb1\021\uffb1" +
    "\022\uffb1\024\uffb1\025\uffb1\026\uffb1\040\uffb1\041\uffb1\053" +
    "\uffb1\001\002\000\004\030\147\001\002\000\044\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\012\uffaf\013\uffaf\014" +
    "\uffaf\016\uffaf\021\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf" +
    "\040\uffaf\041\uffaf\053\uffaf\001\002\000\016\004\134\005" +
    "\125\006\140\007\115\010\126\053\151\001\002\000\004" +
    "\052\173\001\002\000\004\053\153\001\002\000\004\052" +
    "\154\001\002\000\022\036\037\053\041\054\026\055\034" +
    "\056\033\057\042\060\032\061\036\001\002\000\004\030" +
    "\156\001\002\000\022\036\037\053\041\054\026\055\034" +
    "\056\033\057\042\060\032\061\036\001\002\000\010\030" +
    "\160\046\072\047\071\001\002\000\016\004\134\005\125" +
    "\006\140\007\115\010\126\053\161\001\002\000\004\052" +
    "\171\001\002\000\004\053\166\001\002\000\004\037\164" +
    "\001\002\000\004\040\105\001\002\000\044\004\ufff3\005" +
    "\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3" +
    "\016\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\040" +
    "\ufff3\041\ufff3\053\ufff3\001\002\000\004\052\167\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\004\037\uffc7\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\004\037\uffc6\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\004\030\175\001\002" +
    "\000\022\036\037\053\041\054\026\055\034\056\033\057" +
    "\042\060\032\061\036\001\002\000\010\030\177\046\072" +
    "\047\071\001\002\000\016\004\134\005\125\006\140\007" +
    "\115\010\126\053\161\001\002\000\004\037\201\001\002" +
    "\000\004\040\105\001\002\000\044\004\ufff2\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2" +
    "\021\ufff2\022\ufff2\024\ufff2\025\ufff2\026\ufff2\040\ufff2\041" +
    "\ufff2\053\ufff2\001\002\000\006\053\204\057\205\001\002" +
    "\000\004\037\225\001\002\000\006\027\206\037\207\001" +
    "\002\000\022\036\037\053\041\054\026\055\034\056\033" +
    "\057\042\060\032\061\036\001\002\000\006\003\210\030" +
    "\211\001\002\000\004\030\uffae\001\002\000\044\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\016\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\040\uffb4\041\uffb4\053\uffb4\001\002\000\004\030\213\001" +
    "\002\000\044\004\uffad\005\uffad\006\uffad\007\uffad\010\uffad" +
    "\012\uffad\013\uffad\014\uffad\016\uffad\021\uffad\022\uffad\024" +
    "\uffad\025\uffad\026\uffad\040\uffad\041\uffad\053\uffad\001\002" +
    "\000\006\027\uffdb\037\uffdb\001\002\000\006\027\216\037" +
    "\217\001\002\000\022\036\037\053\041\054\026\055\034" +
    "\056\033\057\042\060\032\061\036\001\002\000\006\003" +
    "\220\030\221\001\002\000\004\030\uffac\001\002\000\044" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\012\uffb3\013" +
    "\uffb3\014\uffb3\016\uffb3\021\uffb3\022\uffb3\024\uffb3\025\uffb3" +
    "\026\uffb3\040\uffb3\041\uffb3\053\uffb3\001\002\000\004\030" +
    "\223\001\002\000\044\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\012\uffab\013\uffab\014\uffab\016\uffab\021\uffab\022" +
    "\uffab\024\uffab\025\uffab\026\uffab\040\uffab\041\uffab\053\uffab" +
    "\001\002\000\006\027\uffda\037\uffda\001\002\000\004\030" +
    "\226\001\002\000\044\004\uffb2\005\uffb2\006\uffb2\007\uffb2" +
    "\010\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\021\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\040\uffb2\041\uffb2\053\uffb2" +
    "\001\002\000\044\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021\ufff7\022\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\040\ufff7\041\ufff7\053\ufff7\001" +
    "\002\000\044\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed" +
    "\012\uffed\013\uffed\014\uffed\016\uffed\021\uffed\022\uffed\024" +
    "\uffed\025\uffed\026\uffed\040\uffed\041\uffed\053\uffed\001\002" +
    "\000\056\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016\uffeb" +
    "\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\040\uffeb\041\uffeb\053\uffeb\001\002\000\024\036\037" +
    "\037\236\053\041\054\026\055\034\056\033\057\042\060" +
    "\032\061\036\001\002\000\022\036\037\053\041\054\026" +
    "\055\034\056\033\057\042\060\032\061\036\001\002\000" +
    "\004\030\235\001\002\000\044\004\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\021" +
    "\uffc8\022\uffc8\024\uffc8\025\uffc8\026\uffc8\040\uffc8\041\uffc8" +
    "\053\uffc8\001\002\000\006\003\245\030\246\001\002\000" +
    "\006\027\216\037\240\001\002\000\006\003\241\030\242" +
    "\001\002\000\004\030\uffa6\001\002\000\044\004\uffa9\005" +
    "\uffa9\006\uffa9\007\uffa9\010\uffa9\012\uffa9\013\uffa9\014\uffa9" +
    "\016\uffa9\021\uffa9\022\uffa9\024\uffa9\025\uffa9\026\uffa9\040" +
    "\uffa9\041\uffa9\053\uffa9\001\002\000\004\030\244\001\002" +
    "\000\044\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012" +
    "\uffa5\013\uffa5\014\uffa5\016\uffa5\021\uffa5\022\uffa5\024\uffa5" +
    "\025\uffa5\026\uffa5\040\uffa5\041\uffa5\053\uffa5\001\002\000" +
    "\004\030\uffa8\001\002\000\044\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\021" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\040\uffaa\041\uffaa" +
    "\053\uffaa\001\002\000\004\030\250\001\002\000\044\004" +
    "\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\013\uffa7" +
    "\014\uffa7\016\uffa7\021\uffa7\022\uffa7\024\uffa7\025\uffa7\026" +
    "\uffa7\040\uffa7\041\uffa7\053\uffa7\001\002\000\022\036\037" +
    "\053\041\054\026\055\034\056\033\057\042\060\032\061" +
    "\036\001\002\000\010\037\253\046\072\047\071\001\002" +
    "\000\004\040\105\001\002\000\046\004\ufff1\005\ufff1\006" +
    "\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\015\255" +
    "\016\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\040" +
    "\ufff1\041\ufff1\053\ufff1\001\002\000\004\040\105\001\002" +
    "\000\044\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\040\ufff0\041\ufff0\053\ufff0\001\002\000" +
    "\004\053\260\001\002\000\004\037\261\001\002\000\004" +
    "\040\262\001\002\000\010\017\265\020\263\041\uffe6\001" +
    "\002\000\004\031\303\001\002\000\004\041\302\001\002" +
    "\000\010\054\270\056\267\057\266\001\002\000\004\031" +
    "\277\001\002\000\004\031\274\001\002\000\004\031\271" +
    "\001\002\000\004\040\105\001\002\000\010\017\265\020" +
    "\263\041\uffe6\001\002\000\004\041\uffea\001\002\000\004" +
    "\040\105\001\002\000\010\017\265\020\263\041\uffe6\001" +
    "\002\000\004\041\uffe9\001\002\000\004\040\105\001\002" +
    "\000\010\017\265\020\263\041\uffe6\001\002\000\004\041" +
    "\uffe8\001\002\000\044\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef\022" +
    "\uffef\024\uffef\025\uffef\026\uffef\040\uffef\041\uffef\053\uffef" +
    "\001\002\000\004\040\105\001\002\000\004\041\uffe7\001" +
    "\002\000\010\027\uffdd\030\uffdd\052\310\001\002\000\006" +
    "\027\022\030\307\001\002\000\044\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\012\uffca\013\uffca\014\uffca\016\uffca" +
    "\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\040\uffca\041" +
    "\uffca\053\uffca\001\002\000\022\036\037\053\041\054\026" +
    "\055\034\056\033\057\042\060\032\061\036\001\002\000" +
    "\004\030\312\001\002\000\044\004\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\021" +
    "\uffc9\022\uffc9\024\uffc9\025\uffc9\026\uffc9\040\uffc9\041\uffc9" +
    "\053\uffc9\001\002\000\010\030\315\046\072\047\071\001" +
    "\002\000\044\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\012\ufff6\013\ufff6\014\ufff6\016\ufff6\021\ufff6\022\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\040\ufff6\041\ufff6\053\ufff6\001\002" +
    "\000\044\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012" +
    "\ufff5\013\ufff5\014\ufff5\016\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\025\ufff5\026\ufff5\040\ufff5\041\ufff5\053\ufff5\001\002\000" +
    "\022\036\037\053\041\054\026\055\034\056\033\057\042" +
    "\060\032\061\036\001\002\000\010\037\320\046\072\047" +
    "\071\001\002\000\004\040\105\001\002\000\044\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4" +
    "\040\ufff4\041\ufff4\053\ufff4\001\002\000\044\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8" +
    "\016\ufff8\021\ufff8\022\ufff8\024\ufff8\025\ufff8\026\ufff8\040" +
    "\ufff8\041\ufff8\053\ufff8\001\002\000\004\002\uffff\001\002" +
    "\000\004\002\000\001\002\000\004\053\uffd6\001\002\000" +
    "\020\002\ufffc\004\325\005\327\006\331\007\334\010\330" +
    "\011\010\001\002\000\004\053\uffd3\001\002\000\004\053" +
    "\uffd4\001\002\000\004\053\uffd5\001\002\000\004\053\335" +
    "\001\002\000\004\002\ufffe\001\002\000\004\053\uffd7\001" +
    "\002\000\004\036\336\001\002\000\016\004\134\005\125" +
    "\006\140\007\115\010\126\037\341\001\002\000\004\053" +
    "\350\001\002\000\006\027\343\037\344\001\002\000\004" +
    "\040\105\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\001\002\000\014\004\134" +
    "\005\125\006\140\007\115\010\126\001\002\000\004\040" +
    "\105\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\001\002\000\004\053\347\001" +
    "\002\000\006\027\uffd8\037\uffd8\001\002\000\006\027\uffd9" +
    "\037\uffd9\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\347\000\016\002\010\003\003\004\013\005\006\010" +
    "\014\015\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\332\007\325\010\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\322\004\013\005\006\010" +
    "\014\015\015\001\001\000\002\001\001\000\004\034\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\037\020\030\021\034\022\026\023\043\024" +
    "\044\025\027\036\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\052\020\030\021\034\022" +
    "\026\023\043\024\044\025\027\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\024\050" +
    "\036\042\001\001\000\006\024\047\036\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\022\067\023\043\024" +
    "\044\036\042\001\001\000\012\022\066\023\043\024\044" +
    "\036\042\001\001\000\012\022\065\023\043\024\044\036" +
    "\042\001\001\000\012\022\060\023\043\024\044\036\042" +
    "\001\001\000\002\001\001\000\010\023\064\024\044\036" +
    "\042\001\001\000\010\023\063\024\044\036\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\021\034\022\026" +
    "\023\043\024\044\025\077\036\042\001\001\000\016\021" +
    "\034\022\026\023\043\024\044\025\072\036\042\001\001" +
    "\000\002\001\001\000\014\021\076\022\026\023\043\024" +
    "\044\036\042\001\001\000\014\021\075\022\026\023\043" +
    "\024\044\036\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\103\001\001\000\002\001\001\000\030\011" +
    "\122\012\110\014\132\015\116\027\126\030\112\031\105" +
    "\032\131\033\111\037\136\040\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\020\312\021\034\022\026\023\043" +
    "\024\044\025\027\036\042\001\001\000\004\034\305\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\011\122\012\110\014\132\015\116" +
    "\030\227\031\105\032\131\033\111\037\136\040\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\151\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\154\020\030" +
    "\021\034\022\026\023\043\024\044\025\027\036\042\001" +
    "\001\000\002\001\001\000\020\020\156\021\034\022\026" +
    "\023\043\024\044\025\027\036\042\001\001\000\002\001" +
    "\001\000\006\015\161\017\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\164\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\016\167" +
    "\020\030\021\034\022\026\023\043\024\044\025\027\036" +
    "\042\001\001\000\002\001\001\000\022\016\171\020\030" +
    "\021\034\022\026\023\043\024\044\025\027\036\042\001" +
    "\001\000\002\001\001\000\022\016\173\020\030\021\034" +
    "\022\026\023\043\024\044\025\027\036\042\001\001\000" +
    "\002\001\001\000\020\020\175\021\034\022\026\023\043" +
    "\024\044\025\027\036\042\001\001\000\002\001\001\000" +
    "\006\015\161\017\177\001\001\000\002\001\001\000\004" +
    "\011\201\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\016\213\020\030" +
    "\021\034\022\026\023\043\024\044\025\027\035\214\036" +
    "\042\001\001\000\002\001\001\000\004\042\211\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\016\223\020\030" +
    "\021\034\022\026\023\043\024\044\025\027\036\042\001" +
    "\001\000\002\001\001\000\004\043\221\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\016\213\020" +
    "\030\021\034\022\026\023\043\024\044\025\027\035\236" +
    "\036\042\001\001\000\022\016\233\020\030\021\034\022" +
    "\026\023\043\024\044\025\027\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\020\251\021\034\022\026\023\043\024" +
    "\044\025\027\036\042\001\001\000\002\001\001\000\004" +
    "\011\253\001\001\000\002\001\001\000\004\011\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\263\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\271\001" +
    "\001\000\004\026\272\001\001\000\002\001\001\000\004" +
    "\011\274\001\001\000\004\026\275\001\001\000\002\001" +
    "\001\000\004\011\277\001\001\000\004\026\300\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\303\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\016\310\020\030\021\034\022" +
    "\026\023\043\024\044\025\027\036\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\020\316\021\034\022\026" +
    "\023\043\024\044\025\027\036\042\001\001\000\002\001" +
    "\001\000\004\011\320\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\350\007\325\010\331\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\337\015\336\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\341\001\001\000\002\001\001" +
    "\000\004\015\345\001\001\000\004\011\344\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static kcScanner s;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
        super(s=new kcScanner(input));
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              Object RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mFD = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*Imprimir tree*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= global_declaration main_function_declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mFD = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function external_declaration 
            {
              Object RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object mF = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eD = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= function_definition external_declaration 
            {
              Object RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object fD = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eD = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_declaration ::= 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_function ::= function_type_specifier MAIN OPAR CPAR compound_statement 
            {
              Object RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_definition ::= function_type_specifier ID OPAR CPAR compound_statement 
            {
              Object RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object tS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= function_type_specifier ID OPAR type_parameter_list CPAR compound_statement 
            {
              Object RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object tS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // jump_iteration_statement ::= CONTINUE END 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_iteration_statement ::= BREAK END 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // jump_function_statement ::= RETURN END 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // jump_function_statement ::= RETURN conditional_expression END 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iteration_statement ::= WHILE OPAR conditional_expression CPAR compound_statement 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // iteration_statement ::= FOR OPAR variable_type_specifier ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              Object RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		Object tS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cE1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // iteration_statement ::= FOR OPAR ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cE1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE compound_statement 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // selection_statement ::= SWITCH OPAR ID CPAR OCBRA labeled_statement CCBRA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object stm = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_statement ::= OCBRA CCBRA 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              Object RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object sL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // labeled_statement ::= CASE INT COLON compound_statement labeled_statement 
            {
              Object RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // labeled_statement ::= CASE CHARCONTENT COLON compound_statement labeled_statement 
            {
              Object RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // labeled_statement ::= CASE STRINGCONTENT COLON compound_statement labeled_statement 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object lS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // labeled_statement ::= DEFAULT COLON compound_statement 
            {
              Object RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // labeled_statement ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= compound_statement 
            {
              Object RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object cS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= selection_statement 
            {
              Object RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object sS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= iteration_statement 
            {
              Object RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= declaration 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= io_expressions 
            {
              Object RESULT =null;
		int iEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object iE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= function_calls_expression 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= jump_iteration_statement 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= jump_function_statement 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // identifier_list ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // identifier_list ::= identifier_list COMMA ID 
            {
              Object RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object iL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_list ::= expression 
            {
              Object RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_list ::= parameter_list COMMA expression 
            {
              Object RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_parameter_list ::= variable_type_specifier ID 
            {
              Object RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_parameter_list ::= type_parameter_list COMMA variable_type_specifier ID 
            {
              Object RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_type_specifier ::= CHAR 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_type_specifier ::= INTEGER 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_type_specifier ::= STRING 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // function_type_specifier ::= VOID 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type_specifier ::= CHAR 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type_specifier ::= INTEGER 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_type_specifier ::= STRING 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // global_declaration ::= variable_type_specifier identifier_list END 
            {
              Object RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // global_declaration ::= variable_type_specifier ID ASSIGN expression END 
            {
              Object RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("global_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // declaration ::= variable_type_specifier identifier_list END 
            {
              Object RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object iL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= variable_type_specifier ID ASSIGN expression END 
            {
              Object RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object vTS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= ID ASSIGN expression END 
            {
              Object RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // assignment_expression ::= variable_type_specifier ID ASSIGN expression 
            {
              Object RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object tS = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // assignment_expression ::= ID ASSIGN expression 
            {
              Object RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conditional_expression ::= equality_expression 
            {
              Object RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              Object RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object cE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // equality_expression ::= relational_expression 
            {
              Object RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // equality_expression ::= equality_expression EQU relational_expression 
            {
              Object RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object eE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              Object RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object eE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_expression ::= additive_expression 
            {
              Object RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational_expression ::= relational_expression LESS additive_expression 
            {
              Object RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              Object RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              Object RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              Object RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object rE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // additive_expression ::= multiplicative_expression 
            {
              Object RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              Object RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              Object RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object aE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // multiplicative_expression ::= basic_expression 
            {
              Object RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              Object RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              Object RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object mE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object bE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR END 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // io_expressions ::= PRINT OPAR ID CPAR END 
            {
              Object RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              Object RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // NT$0 ::= 
            {
              Object RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // io_expressions ::= SCAN OPAR ID CPAR error NT$0 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$1 ::= 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR error NT$1 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NT$2 ::= 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR error NT$2 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_calls_expression ::= ID OPAR CPAR END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_calls_expression ::= ID OPAR parameter_list CPAR END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NT$3 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // function_calls_expression ::= ID OPAR CPAR error NT$3 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$4 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_calls_expression ::= ID OPAR parameter_list CPAR error NT$4 END 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object pL = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expression ::= conditional_expression 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // basic_expression ::= primary_expression 
            {
              Object RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object pE = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primary_expression ::= ID 
            {
              Object RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primary_expression ::= INT 
            {
              Object RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primary_expression ::= STRINGCONTENT 
            {
              Object RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primary_expression ::= DOUBLEVALUE 
            {
              Object RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primary_expression ::= CHARCONTENT 
            {
              Object RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primary_expression ::= TRUE 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // primary_expression ::= FALSE 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // primary_expression ::= OPAR expression CPAR 
            {
              Object RESULT =null;
		 /*RESULT = new ();*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
