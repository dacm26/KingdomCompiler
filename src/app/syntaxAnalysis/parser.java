
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package app.syntaxAnalysis;

import java_cup.runtime.*;
import app.lexicAnalysis.*;
import app.intermediateCode.*;
import AST.primaryExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.expression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.functionCallsDeclaration.*;
import AST.ioExpressions.*;
import AST.assignmentExpression.*;
import AST.declaration.*;
import AST.globalDeclaration.*;
import AST.variableTypeSpecifier.*;
import AST.functionTypeSpecifier.*;
import AST.typeParameterList.*;
import AST.parameterList.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.labeledStatement.*;
import AST.compoundStatement.*;
import AST.statementList.*;
import AST.selectionStatement.*;
import AST.iterationStatement.*;
import AST.jumpFunctionStatement.*;
import AST.jumpIterationStatement.*;
import AST.functionDefinition.*;
import AST.mainFunction.*;
import AST.mainFunctionDeclaration.*;
import AST.astTreeDeclaration.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\005\007" +
    "\000\002\005\010\000\002\036\004\000\002\036\004\000" +
    "\002\037\004\000\002\037\005\000\002\010\007\000\002" +
    "\010\016\000\002\010\015\000\002\012\007\000\002\012" +
    "\011\000\002\012\011\000\002\012\011\000\002\025\003" +
    "\000\002\025\004\000\002\007\004\000\002\007\005\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\005\000\002\024\002\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\005\000\002\011\004\000\002\011\006\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\027\005\000\002\027\007\000\002\027" +
    "\006\000\002\015\006\000\002\015\005\000\002\016\003" +
    "\000\002\016\005\000\002\016\005\000\002\023\003\000" +
    "\002\023\005\000\002\023\005\000\002\017\003\000\002" +
    "\017\005\000\002\017\005\000\002\017\005\000\002\017" +
    "\005\000\002\020\003\000\002\020\005\000\002\020\005" +
    "\000\002\021\003\000\002\021\005\000\002\021\005\000" +
    "\002\030\007\000\002\030\011\000\002\030\007\000\002" +
    "\030\007\000\002\040\002\000\002\030\011\000\002\041" +
    "\002\000\002\030\011\000\002\042\002\000\002\030\013" +
    "\000\002\043\002\000\002\030\011\000\002\032\006\000" +
    "\002\032\007\000\002\031\005\000\002\031\006\000\002" +
    "\014\003\000\002\022\003\000\002\022\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\016\004\005\005\010\006\014\007\016\010" +
    "\013\011\011\001\002\000\004\002\001\001\002\000\004" +
    "\053\uffd7\001\002\000\016\004\005\005\010\006\014\007" +
    "\016\010\013\011\011\001\002\000\004\002\ufffe\001\002" +
    "\000\004\053\uffd4\001\002\000\006\023\330\053\uffd3\001" +
    "\002\000\004\002\327\001\002\000\004\053\uffd5\001\002" +
    "\000\004\053\uffd6\001\002\000\004\053\017\001\002\000" +
    "\004\053\uffd8\001\002\000\004\036\020\001\002\000\016" +
    "\004\021\005\027\006\022\007\026\010\023\037\030\001" +
    "\002\000\004\053\uffd1\001\002\000\004\053\uffd0\001\002" +
    "\000\004\053\uffcf\001\002\000\004\053\326\001\002\000" +
    "\006\027\321\037\322\001\002\000\004\053\uffd2\001\002" +
    "\000\004\053\uffce\001\002\000\004\040\032\001\002\000" +
    "\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\001\002\000\044\004\021\005\027\006\022\007\026\010" +
    "\023\012\056\013\040\014\046\016\044\021\052\022\035" +
    "\024\041\025\053\026\057\040\032\041\045\053\050\001" +
    "\002\000\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\040\uffe3\041\uffe3\053\uffe3\001\002" +
    "\000\044\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\040\uffdf\041\uffdf\053\uffdf\001\002\000" +
    "\004\030\320\001\002\000\044\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\040\uffe4\041\uffe4" +
    "\053\uffe4\001\002\000\044\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef" +
    "\022\uffef\024\uffef\025\uffef\026\uffef\040\uffef\041\uffef\053" +
    "\uffef\001\002\000\004\036\314\001\002\000\024\030\312" +
    "\036\106\053\111\054\075\055\104\056\103\057\112\060" +
    "\102\061\107\001\002\000\044\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\021" +
    "\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\040\uffe1\041\uffe1" +
    "\053\uffe1\001\002\000\004\053\301\001\002\000\004\036" +
    "\253\001\002\000\056\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\040\uffed\041\uffed\053\uffed\001\002\000" +
    "\004\036\244\001\002\000\044\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\021" +
    "\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\040\uffe6\041\uffe6" +
    "\053\uffe6\001\002\000\006\036\233\052\234\001\002\000" +
    "\044\004\021\005\027\006\022\007\026\010\023\012\056" +
    "\013\040\014\046\016\044\021\052\022\035\024\041\025" +
    "\053\026\057\040\032\041\232\053\050\001\002\000\004" +
    "\030\230\001\002\000\004\036\204\001\002\000\044\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\040\uffe2\041\uffe2\053\uffe2\001\002\000\044\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\040\uffe5\041\uffe5\053\uffe5\001\002\000\004\036\070\001" +
    "\002\000\004\036\061\001\002\000\044\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\040\uffe0" +
    "\041\uffe0\053\uffe0\001\002\000\004\053\062\001\002\000" +
    "\004\037\063\001\002\000\006\003\064\030\065\001\002" +
    "\000\004\030\uffb3\001\002\000\044\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\012\uffb4\013\uffb4\014\uffb4\016\uffb4" +
    "\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4\040\uffb4\041" +
    "\uffb4\053\uffb4\001\002\000\004\030\067\001\002\000\044" +
    "\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\012\uffb2\013" +
    "\uffb2\014\uffb2\016\uffb2\021\uffb2\022\uffb2\024\uffb2\025\uffb2" +
    "\026\uffb2\040\uffb2\041\uffb2\053\uffb2\001\002\000\016\004" +
    "\021\005\027\006\022\007\026\010\023\053\071\001\002" +
    "\000\004\052\174\001\002\000\004\053\073\001\002\000" +
    "\004\052\074\001\002\000\022\036\106\053\111\054\075" +
    "\055\104\056\103\057\112\060\102\061\107\001\002\000" +
    "\040\027\uffa3\030\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3" +
    "\037\uffa3\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047" +
    "\uffa3\050\uffa3\051\uffa3\001\002\000\034\027\uffc2\030\uffc2" +
    "\032\150\033\147\037\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\020" +
    "\027\uffc8\030\uffc8\037\uffc8\046\uffc8\047\uffc8\050\137\051" +
    "\140\001\002\000\014\027\uffa7\030\uffa7\037\uffa7\046\135" +
    "\047\133\001\002\000\040\027\uffa5\030\uffa5\032\uffa5\033" +
    "\uffa5\034\uffa5\035\uffa5\037\uffa5\042\uffa5\043\uffa5\044\uffa5" +
    "\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\001\002\000" +
    "\040\027\uff9f\030\uff9f\032\uff9f\033\uff9f\034\uff9f\035\uff9f" +
    "\037\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046\uff9f\047" +
    "\uff9f\050\uff9f\051\uff9f\001\002\000\040\027\uffa0\030\uffa0" +
    "\032\uffa0\033\uffa0\034\uffa0\035\uffa0\037\uffa0\042\uffa0\043" +
    "\uffa0\044\uffa0\045\uffa0\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\001\002\000\040\027\uffa1\030\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\035\uffa1\037\uffa1\042\uffa1\043\uffa1\044\uffa1\045\uffa1" +
    "\046\uffa1\047\uffa1\050\uffa1\051\uffa1\001\002\000\030\027" +
    "\uffc5\030\uffc5\037\uffc5\042\142\043\143\044\144\045\145" +
    "\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\022\036" +
    "\106\053\111\054\075\055\104\056\103\057\112\060\102" +
    "\061\107\001\002\000\040\027\uff9e\030\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\001\002\000" +
    "\004\030\131\001\002\000\042\027\uffa4\030\uffa4\032\uffa4" +
    "\033\uffa4\034\uffa4\035\uffa4\036\122\037\uffa4\042\uffa4\043" +
    "\uffa4\044\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4" +
    "\001\002\000\040\027\uffa2\030\uffa2\032\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\037\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2" +
    "\046\uffa2\047\uffa2\050\uffa2\051\uffa2\001\002\000\040\027" +
    "\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035\uffa6\037\uffa6" +
    "\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6\047\uffa6\050" +
    "\uffa6\051\uffa6\001\002\000\040\027\uffbd\030\uffbd\032\uffbd" +
    "\033\uffbd\034\116\035\117\037\uffbd\042\uffbd\043\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\001\002" +
    "\000\040\027\uffba\030\uffba\032\uffba\033\uffba\034\uffba\035" +
    "\uffba\037\uffba\042\uffba\043\uffba\044\uffba\045\uffba\046\uffba" +
    "\047\uffba\050\uffba\051\uffba\001\002\000\022\036\106\053" +
    "\111\054\075\055\104\056\103\057\112\060\102\061\107" +
    "\001\002\000\022\036\106\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\107\001\002\000\040\027\uffb8" +
    "\030\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\042" +
    "\uffb8\043\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8" +
    "\051\uffb8\001\002\000\040\027\uffb9\030\uffb9\032\uffb9\033" +
    "\uffb9\034\uffb9\035\uffb9\037\uffb9\042\uffb9\043\uffb9\044\uffb9" +
    "\045\uffb9\046\uffb9\047\uffb9\050\uffb9\051\uffb9\001\002\000" +
    "\024\036\106\037\124\053\111\054\075\055\104\056\103" +
    "\057\112\060\102\061\107\001\002\000\006\027\uffdc\037" +
    "\uffdc\001\002\000\040\027\uffa9\030\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\037\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\001\002\000\006" +
    "\027\126\037\127\001\002\000\022\036\106\053\111\054" +
    "\075\055\104\056\103\057\112\060\102\061\107\001\002" +
    "\000\040\027\uffa8\030\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\037\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\001\002\000\006\027\uffdb\037" +
    "\uffdb\001\002\000\022\036\106\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\107\001\002\000\010\030" +
    "\134\046\135\047\133\001\002\000\022\036\106\053\111" +
    "\054\075\055\104\056\103\057\112\060\102\061\107\001" +
    "\002\000\016\004\021\005\027\006\022\007\026\010\023" +
    "\053\157\001\002\000\022\036\106\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\107\001\002\000\020" +
    "\027\uffc6\030\uffc6\037\uffc6\046\uffc6\047\uffc6\050\137\051" +
    "\140\001\002\000\022\036\106\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\107\001\002\000\022\036" +
    "\106\053\111\054\075\055\104\056\103\057\112\060\102" +
    "\061\107\001\002\000\030\027\uffc4\030\uffc4\037\uffc4\042" +
    "\142\043\143\044\144\045\145\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\001\002\000\022\036\106\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\107\001\002\000\022" +
    "\036\106\053\111\054\075\055\104\056\103\057\112\060" +
    "\102\061\107\001\002\000\022\036\106\053\111\054\075" +
    "\055\104\056\103\057\112\060\102\061\107\001\002\000" +
    "\022\036\106\053\111\054\075\055\104\056\103\057\112" +
    "\060\102\061\107\001\002\000\034\027\uffc1\030\uffc1\032" +
    "\150\033\147\037\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\001\002\000\022\036" +
    "\106\053\111\054\075\055\104\056\103\057\112\060\102" +
    "\061\107\001\002\000\022\036\106\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\107\001\002\000\040" +
    "\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\116\035\117\037" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc" +
    "\050\uffbc\051\uffbc\001\002\000\040\027\uffbb\030\uffbb\032" +
    "\uffbb\033\uffbb\034\116\035\117\037\uffbb\042\uffbb\043\uffbb" +
    "\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\001" +
    "\002\000\034\027\uffc0\030\uffc0\032\150\033\147\037\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\001\002\000\034\027\uffbf\030\uffbf\032\150" +
    "\033\147\037\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000\034\027\uffbe" +
    "\030\uffbe\032\150\033\147\037\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002" +
    "\000\030\027\uffc3\030\uffc3\037\uffc3\042\142\043\143\044" +
    "\144\045\145\046\uffc3\047\uffc3\050\uffc3\051\uffc3\001\002" +
    "\000\004\052\167\001\002\000\004\053\164\001\002\000" +
    "\004\037\162\001\002\000\004\040\032\001\002\000\044" +
    "\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\016\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5" +
    "\026\ufff5\040\ufff5\041\ufff5\053\ufff5\001\002\000\004\052" +
    "\165\001\002\000\022\036\106\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\107\001\002\000\004\037" +
    "\uffca\001\002\000\022\036\106\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\107\001\002\000\004\037" +
    "\uffc9\001\002\000\020\027\uffc7\030\uffc7\037\uffc7\046\uffc7" +
    "\047\uffc7\050\137\051\140\001\002\000\004\037\173\001" +
    "\002\000\040\027\uff9d\030\uff9d\032\uff9d\033\uff9d\034\uff9d" +
    "\035\uff9d\037\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\046" +
    "\uff9d\047\uff9d\050\uff9d\051\uff9d\001\002\000\022\036\106" +
    "\053\111\054\075\055\104\056\103\057\112\060\102\061" +
    "\107\001\002\000\004\030\176\001\002\000\022\036\106" +
    "\053\111\054\075\055\104\056\103\057\112\060\102\061" +
    "\107\001\002\000\010\030\200\046\135\047\133\001\002" +
    "\000\016\004\021\005\027\006\022\007\026\010\023\053" +
    "\157\001\002\000\004\037\202\001\002\000\004\040\032" +
    "\001\002\000\044\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010" +
    "\ufff4\012\ufff4\013\ufff4\014\ufff4\016\ufff4\021\ufff4\022\ufff4" +
    "\024\ufff4\025\ufff4\026\ufff4\040\ufff4\041\ufff4\053\ufff4\001" +
    "\002\000\006\053\205\057\206\001\002\000\004\037\223" +
    "\001\002\000\006\027\207\037\210\001\002\000\022\036" +
    "\106\053\111\054\075\055\104\056\103\057\112\060\102" +
    "\061\107\001\002\000\006\003\211\030\212\001\002\000" +
    "\004\030\uffb1\001\002\000\044\004\uffb7\005\uffb7\006\uffb7" +
    "\007\uffb7\010\uffb7\012\uffb7\013\uffb7\014\uffb7\016\uffb7\021" +
    "\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\040\uffb7\041\uffb7" +
    "\053\uffb7\001\002\000\004\030\214\001\002\000\044\004" +
    "\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012\uffb0\013\uffb0" +
    "\014\uffb0\016\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\026" +
    "\uffb0\040\uffb0\041\uffb0\053\uffb0\001\002\000\006\027\126" +
    "\037\216\001\002\000\006\003\217\030\220\001\002\000" +
    "\004\030\uffaf\001\002\000\044\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\012\uffb6\013\uffb6\014\uffb6\016\uffb6\021" +
    "\uffb6\022\uffb6\024\uffb6\025\uffb6\026\uffb6\040\uffb6\041\uffb6" +
    "\053\uffb6\001\002\000\004\030\222\001\002\000\044\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\012\uffae\013\uffae" +
    "\014\uffae\016\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026" +
    "\uffae\040\uffae\041\uffae\053\uffae\001\002\000\006\003\224" +
    "\030\225\001\002\000\004\030\uffad\001\002\000\044\004" +
    "\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\016\uffb5\021\uffb5\022\uffb5\024\uffb5\025\uffb5\026" +
    "\uffb5\040\uffb5\041\uffb5\053\uffb5\001\002\000\004\030\227" +
    "\001\002\000\044\004\uffac\005\uffac\006\uffac\007\uffac\010" +
    "\uffac\012\uffac\013\uffac\014\uffac\016\uffac\021\uffac\022\uffac" +
    "\024\uffac\025\uffac\026\uffac\040\uffac\041\uffac\053\uffac\001" +
    "\002\000\044\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\016\ufff9\021\ufff9\022\ufff9\024" +
    "\ufff9\025\ufff9\026\ufff9\040\ufff9\041\ufff9\053\ufff9\001\002" +
    "\000\044\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\012" +
    "\uffee\013\uffee\014\uffee\016\uffee\021\uffee\022\uffee\024\uffee" +
    "\025\uffee\026\uffee\040\uffee\041\uffee\053\uffee\001\002\000" +
    "\056\002\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017" +
    "\uffec\020\uffec\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec" +
    "\040\uffec\041\uffec\053\uffec\001\002\000\024\036\106\037" +
    "\237\053\111\054\075\055\104\056\103\057\112\060\102" +
    "\061\107\001\002\000\022\036\106\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\107\001\002\000\004" +
    "\030\236\001\002\000\044\004\uffcb\005\uffcb\006\uffcb\007" +
    "\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\021\uffcb" +
    "\022\uffcb\024\uffcb\025\uffcb\026\uffcb\040\uffcb\041\uffcb\053" +
    "\uffcb\001\002\000\004\030\243\001\002\000\006\027\126" +
    "\037\241\001\002\000\004\030\242\001\002\000\044\004" +
    "\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\012\uffaa\013\uffaa" +
    "\014\uffaa\016\uffaa\021\uffaa\022\uffaa\024\uffaa\025\uffaa\026" +
    "\uffaa\040\uffaa\041\uffaa\053\uffaa\001\002\000\044\004\uffab" +
    "\005\uffab\006\uffab\007\uffab\010\uffab\012\uffab\013\uffab\014" +
    "\uffab\016\uffab\021\uffab\022\uffab\024\uffab\025\uffab\026\uffab" +
    "\040\uffab\041\uffab\053\uffab\001\002\000\022\036\106\053" +
    "\111\054\075\055\104\056\103\057\112\060\102\061\107" +
    "\001\002\000\010\037\246\046\135\047\133\001\002\000" +
    "\004\040\032\001\002\000\046\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\012\ufff3\013\ufff3\014\ufff3\015\250\016" +
    "\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026\ufff3\040\ufff3" +
    "\041\ufff3\053\ufff3\001\002\000\010\014\046\016\044\040" +
    "\032\001\002\000\044\004\ufff2\005\ufff2\006\ufff2\007\ufff2" +
    "\010\ufff2\012\ufff2\013\ufff2\014\ufff2\016\ufff2\021\ufff2\022" +
    "\ufff2\024\ufff2\025\ufff2\026\ufff2\040\ufff2\041\ufff2\053\ufff2" +
    "\001\002\000\044\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\016\ufff1\021\ufff1\022\ufff1" +
    "\024\ufff1\025\ufff1\026\ufff1\040\ufff1\041\ufff1\053\ufff1\001" +
    "\002\000\004\053\254\001\002\000\004\037\255\001\002" +
    "\000\004\040\256\001\002\000\010\017\261\020\257\041" +
    "\uffe7\001\002\000\004\031\277\001\002\000\004\041\276" +
    "\001\002\000\010\054\264\056\263\057\262\001\002\000" +
    "\004\031\273\001\002\000\004\031\270\001\002\000\004" +
    "\031\265\001\002\000\004\040\032\001\002\000\010\017" +
    "\261\020\257\041\uffe7\001\002\000\004\041\uffeb\001\002" +
    "\000\004\040\032\001\002\000\010\017\261\020\257\041" +
    "\uffe7\001\002\000\004\041\uffea\001\002\000\004\040\032" +
    "\001\002\000\010\017\261\020\257\041\uffe7\001\002\000" +
    "\004\041\uffe9\001\002\000\044\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\016\ufff0\021" +
    "\ufff0\022\ufff0\024\ufff0\025\ufff0\026\ufff0\040\ufff0\041\ufff0" +
    "\053\ufff0\001\002\000\004\040\032\001\002\000\004\041" +
    "\uffe8\001\002\000\010\027\uffde\030\uffde\052\306\001\002" +
    "\000\006\027\303\030\304\001\002\000\004\053\305\001" +
    "\002\000\044\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\012\uffcd\013\uffcd\014\uffcd\016\uffcd\021\uffcd\022\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\040\uffcd\041\uffcd\053\uffcd\001\002" +
    "\000\006\027\uffdd\030\uffdd\001\002\000\022\036\106\053" +
    "\111\054\075\055\104\056\103\057\112\060\102\061\107" +
    "\001\002\000\004\030\310\001\002\000\044\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\013\uffcc\014\uffcc" +
    "\016\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc\040" +
    "\uffcc\041\uffcc\053\uffcc\001\002\000\010\030\313\046\135" +
    "\047\133\001\002\000\044\004\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\021\ufff8" +
    "\022\ufff8\024\ufff8\025\ufff8\026\ufff8\040\ufff8\041\ufff8\053" +
    "\ufff8\001\002\000\044\004\ufff7\005\ufff7\006\ufff7\007\ufff7" +
    "\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021\ufff7\022" +
    "\ufff7\024\ufff7\025\ufff7\026\ufff7\040\ufff7\041\ufff7\053\ufff7" +
    "\001\002\000\022\036\106\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\107\001\002\000\010\037\316" +
    "\046\135\047\133\001\002\000\004\040\032\001\002\000" +
    "\044\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\013\ufff6\014\ufff6\016\ufff6\021\ufff6\022\ufff6\024\ufff6\025" +
    "\ufff6\026\ufff6\040\ufff6\041\ufff6\053\ufff6\001\002\000\044" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013" +
    "\ufffa\014\ufffa\016\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\040\ufffa\041\ufffa\053\ufffa\001\002\000\014\004" +
    "\021\005\027\006\022\007\026\010\023\001\002\000\004" +
    "\040\032\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\001\002\000\004\053\325\001\002" +
    "\000\006\027\uffd9\037\uffd9\001\002\000\006\027\uffda\037" +
    "\uffda\001\002\000\004\002\000\001\002\000\004\036\331" +
    "\001\002\000\004\037\332\001\002\000\004\040\032\001" +
    "\002\000\004\002\ufffd\001\002\000\004\002\uffff\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\332\000\014\002\011\003\003\004\006\005\005\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\333\004\006\005\005\006\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\024\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\030\001\001\000\002\001" +
    "\001\000\030\007\046\010\035\012\054\013\042\025\050" +
    "\026\036\027\032\030\053\032\041\036\057\037\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\310\017\104\020\075\021\113\022\114\023\076" +
    "\031\100\035\112\001\001\000\002\001\001\000\004\033" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\046\010\035\012\054\013\042\026\230\027\032\030\053" +
    "\032\041\036\057\037\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\107\016\077\017" +
    "\104\020\075\021\113\022\114\023\076\031\100\035\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\171\016\077\017\104\020\075\021\113\022\114" +
    "\023\076\031\100\035\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\120\031\100\035\112\001\001\000\010\022\117\031\100" +
    "\035\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\122\016\077\017\104\020\075\021\113\022\114" +
    "\023\076\031\100\034\124\035\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\127" +
    "\016\077\017\104\020\075\021\113\022\114\023\076\031" +
    "\100\035\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\131\017\104\020\075\021\113\022\114\023" +
    "\076\031\100\035\112\001\001\000\002\001\001\000\020" +
    "\017\104\020\075\021\113\022\114\023\170\031\100\035" +
    "\112\001\001\000\006\013\157\015\160\001\001\000\020" +
    "\017\104\020\075\021\113\022\114\023\135\031\100\035" +
    "\112\001\001\000\002\001\001\000\016\017\155\020\075" +
    "\021\113\022\114\031\100\035\112\001\001\000\016\017" +
    "\140\020\075\021\113\022\114\031\100\035\112\001\001" +
    "\000\002\001\001\000\014\020\154\021\113\022\114\031" +
    "\100\035\112\001\001\000\014\020\153\021\113\022\114" +
    "\031\100\035\112\001\001\000\014\020\152\021\113\022" +
    "\114\031\100\035\112\001\001\000\014\020\145\021\113" +
    "\022\114\031\100\035\112\001\001\000\002\001\001\000" +
    "\012\021\151\022\114\031\100\035\112\001\001\000\012" +
    "\021\150\022\114\031\100\035\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\162\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\014\165\016" +
    "\077\017\104\020\075\021\113\022\114\023\076\031\100" +
    "\035\112\001\001\000\002\001\001\000\024\014\167\016" +
    "\077\017\104\020\075\021\113\022\114\023\076\031\100" +
    "\035\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\014\174\016\077" +
    "\017\104\020\075\021\113\022\114\023\076\031\100\035" +
    "\112\001\001\000\002\001\001\000\022\016\176\017\104" +
    "\020\075\021\113\022\114\023\076\031\100\035\112\001" +
    "\001\000\002\001\001\000\006\013\157\015\200\001\001" +
    "\000\002\001\001\000\004\007\202\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\014\122\016\077\017\104\020\075\021\113\022" +
    "\114\023\076\031\100\034\214\035\112\001\001\000\002" +
    "\001\001\000\004\041\212\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\042\220\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\225\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\122\016\077\017\104\020\075\021" +
    "\113\022\114\023\076\031\100\034\237\035\112\001\001" +
    "\000\024\014\234\016\077\017\104\020\075\021\113\022" +
    "\114\023\076\031\100\035\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\016\244\017\104\020\075\021\113\022\114\023\076\031" +
    "\100\035\112\001\001\000\002\001\001\000\004\007\246" +
    "\001\001\000\002\001\001\000\006\007\250\012\251\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\257\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\265\001\001\000\004\024\266\001\001\000\002" +
    "\001\001\000\004\007\270\001\001\000\004\024\271\001" +
    "\001\000\002\001\001\000\004\007\273\001\001\000\004" +
    "\024\274\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\277\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\306\016\077\017\104\020\075" +
    "\021\113\022\114\023\076\031\100\035\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\314\017\104\020" +
    "\075\021\113\022\114\023\076\031\100\035\112\001\001" +
    "\000\002\001\001\000\004\007\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\323\001\001\000\004" +
    "\007\322\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\332\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static kcScanner s;
    public static Generate generateCode;
    public static int p = 0;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
   		super(s=new kcScanner(input));
   		generateCode = new Generate();
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              ATD_ASTTreeDeclaration RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ATD_ASTTreeDeclaration(mFD,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ATD_ASTTreeDeclaration start_val = (ATD_ASTTreeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= function_definition main_function_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		functionDefinition fD = (functionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mF = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunctionAndOthers(fD,mF, parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function 
            {
              mainFunctionDeclaration RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunction mF = (mainFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunction(mF, parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_function ::= VOID MAIN OPAR CPAR compound_statement 
            {
              mainFunction RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MF_MainFunction(new FTS_Type(Void.TYPE),cS,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= function_type_specifier ID OPAR CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,cS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= function_type_specifier ID OPAR type_parameter_list CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,pL,cS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // jump_iteration_statement ::= CONTINUE END 
            {
              jumpIterationStatement RESULT =null;
		 RESULT = new JIS_Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // jump_iteration_statement ::= BREAK END 
            {
              jumpIterationStatement RESULT =null;
		 RESULT = new JIS_Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // jump_function_statement ::= RETURN END 
            {
              jumpFunctionStatement RESULT =null;
		 RESULT = new JFS_EmptyReturn(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_function_statement ::= RETURN conditional_expression END 
            {
              jumpFunctionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JFS_Return(cE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iteration_statement ::= WHILE OPAR conditional_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_While(cE,cS);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // iteration_statement ::= FOR OPAR variable_type_specifier ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(tS,id,exp,cE1,aE,cS);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iteration_statement ::= FOR OPAR ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(id,exp,cE1,aE,cS);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_If(cE,cS,parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cSE = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfElse(cE,cS,cSE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE selection_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfSS(cE,cS,sS,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // selection_statement ::= SWITCH OPAR ID CPAR OCBRA labeled_statement CCBRA 
            {
              selectionStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SS_Switch(id,lS,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= statement 
            {
              statementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_Statement(stm, parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_list ::= statement_list statement 
            {
              statementList RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_StatementList(sL,stm, parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_statement ::= OCBRA CCBRA 
            {
              compoundStatement RESULT =null;
		 RESULT = new CS_Empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_StatementList(sL, parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // labeled_statement ::= CASE INT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(integerContent,cS,lS,2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // labeled_statement ::= CASE CHARCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(charContent,cS,lS,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // labeled_statement ::= CASE STRINGCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(stringContent,cS,lS,4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // labeled_statement ::= DEFAULT COLON compound_statement 
            {
              labeledStatement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Default(cS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // labeled_statement ::= 
            {
              labeledStatement RESULT =null;
		 RESULT = new LS_Lambda(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_CompoundStatement(cS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_SelectionStatement(sS, parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		iterationStatement iS = (iterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IterationStatement(iS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_Declaration(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= io_expressions 
            {
              Statement RESULT =null;
		int iEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ioExpressions iE = (ioExpressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IOExpression(iE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= function_calls_declaration 
            {
              Statement RESULT =null;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsDeclaration fcd = (functionCallsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_FCD(fcd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= jump_iteration_statement 
            {
              Statement RESULT =null;
		int jisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpIterationStatement jis = (jumpIterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JIS(jis); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= jump_function_statement 
            {
              Statement RESULT =null;
		int jfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpFunctionStatement jfs = (jumpFunctionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JFS(jfs); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // identifier_list ::= ID 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_Id(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // identifier_list ::= identifier_list COMMA ID 
            {
              identifierList RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_IdentifierList(iL,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_list ::= expression 
            {
              parameterList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_Expression(exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_list ::= parameter_list COMMA expression 
            {
              parameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_ExpressionList(pL,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_parameter_list ::= variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_Id(vTS,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_parameter_list ::= type_parameter_list COMMA variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_List(pL,vTS,id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_type_specifier ::= CHAR 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(Character.TYPE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_type_specifier ::= INTEGER 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(Integer.TYPE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_type_specifier ::= DOUBLE 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(Double.TYPE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_type_specifier ::= STRING 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(String.class.getSimpleName()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_type_specifier ::= BOOLEAN 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(Boolean.TYPE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_type_specifier ::= VOID 
            {
              functionTypeSpecifier RESULT =null;
		 RESULT = new FTS_Type(Void.TYPE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_type_specifier ::= CHAR 
            {
              variableTypeSpecifier RESULT =null;
		 RESULT = new VTS_Type(Character.TYPE,Character.SIZE/8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type_specifier ::= INTEGER 
            {
              variableTypeSpecifier RESULT =null;
		 RESULT = new VTS_Type(Integer.TYPE,Integer.SIZE/8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type_specifier ::= DOUBLE 
            {
              variableTypeSpecifier RESULT =null;
		 RESULT = new VTS_Type(Double.TYPE,Double.SIZE/8); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_type_specifier ::= STRING 
            {
              variableTypeSpecifier RESULT =null;
		 RESULT = new VTS_Type(String.class.getSimpleName(),255); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_type_specifier ::= BOOLEAN 
            {
              variableTypeSpecifier RESULT =null;
		 RESULT = new VTS_Type(Boolean.TYPE,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= variable_type_specifier identifier_list END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_identifierList(vTS,iL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= variable_type_specifier ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(stringValue,exp,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expression ::= variable_type_specifier ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(tS,stringValue,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // assignment_expression ::= ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(stringValue,exp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditional_expression ::= equality_expression 
            {
              conditionalExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_equalityExpression(eE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"&&",eE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"||",eE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // equality_expression ::= relational_expression 
            {
              equalityExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_relationalExpression(rE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // equality_expression ::= equality_expression EQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"==",rE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"!=",rE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_expression ::= additive_expression 
            {
              relationalExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_additiveExpression(aE,parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expression ::= relational_expression LESS additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<",aE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">",aE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<=",aE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">=",aE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // additive_expression ::= multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_multiplicativeExpression(mE,parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"+",mE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"-",mE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multiplicative_expression ::= basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_basicExpression(bE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"*",bE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"/",bE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,pL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // io_expressions ::= PRINT OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(identifierValue,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Scan(identifierValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$0 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // io_expressions ::= SCAN OPAR ID CPAR error NT$0 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Scan(identifierValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$1 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR error NT$1 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // NT$2 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR error NT$2 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,pL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$3 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RESULT = new IOE_Print(identifierValue,true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // io_expressions ::= PRINT OPAR ID CPAR error NT$3 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // function_calls_declaration ::= ID OPAR CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // function_calls_declaration ::= ID OPAR parameter_list CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,pL); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // function_calls_expression ::= ID OPAR CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCE_FunctionCallsExpression(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // function_calls_expression ::= ID OPAR parameter_list CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expression ::= conditional_expression 
            {
              Expression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(cE,parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // basic_expression ::= primary_expression 
            {
              basicExpression RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression pE = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_primaryExpression(pE, parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // basic_expression ::= function_calls_expression 
            {
              basicExpression RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_FCE(fCE,parser.generateCode); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // primary_expression ::= ID 
            {
              primaryExpression RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Id(identifierValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // primary_expression ::= INT 
            {
              primaryExpression RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(integerContent,2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // primary_expression ::= STRINGCONTENT 
            {
              primaryExpression RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(stringContent,4); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // primary_expression ::= DOUBLEVALUE 
            {
              primaryExpression RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(doubleContent,3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // primary_expression ::= CHARCONTENT 
            {
              primaryExpression RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(charContent,1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // primary_expression ::= TRUE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(true,5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // primary_expression ::= FALSE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(false,5); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // primary_expression ::= OPAR expression CPAR 
            {
              primaryExpression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PE_Expression(exp, parser.generateCode);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
