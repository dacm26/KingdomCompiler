
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package app.syntaxAnalysis;

import java_cup.runtime.*;
import app.lexicAnalysis.*;
import app.intermediateCode.*;
import AST.primaryExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.expression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.functionCallsDeclaration.*;
import AST.ioExpressions.*;
import AST.assignmentExpression.*;
import AST.declaration.*;
import AST.globalDeclaration.*;
import AST.variableTypeSpecifier.*;
import AST.functionTypeSpecifier.*;
import AST.typeParameterList.*;
import AST.parameterList.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.labeledStatement.*;
import AST.compoundStatement.*;
import AST.statementList.*;
import AST.selectionStatement.*;
import AST.iterationStatement.*;
import AST.jumpFunctionStatement.*;
import AST.jumpIterationStatement.*;
import AST.functionDefinition.*;
import AST.mainFunction.*;
import AST.mainFunctionDeclaration.*;
import AST.astTreeDeclaration.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\163\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\005\007" +
    "\000\002\005\010\000\002\036\004\000\002\036\004\000" +
    "\002\037\004\000\002\037\005\000\002\010\007\000\002" +
    "\010\016\000\002\010\015\000\002\012\007\000\002\012" +
    "\011\000\002\012\011\000\002\012\011\000\002\025\003" +
    "\000\002\025\004\000\002\007\004\000\002\007\005\000" +
    "\002\024\007\000\002\024\007\000\002\024\007\000\002" +
    "\024\005\000\002\024\002\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\033\003\000\002\033\005\000\002\034\003\000\002" +
    "\034\005\000\002\011\004\000\002\011\006\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\027\005\000\002\027\007\000\002\027" +
    "\006\000\002\040\002\000\002\027\007\000\002\041\002" +
    "\000\002\027\011\000\002\042\002\000\002\027\010\000" +
    "\002\015\006\000\002\015\005\000\002\016\003\000\002" +
    "\016\005\000\002\016\005\000\002\023\003\000\002\023" +
    "\005\000\002\023\005\000\002\017\003\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\020\003\000\002\020\005\000\002\020\005\000\002" +
    "\021\003\000\002\021\005\000\002\021\005\000\002\030" +
    "\007\000\002\030\011\000\002\030\007\000\002\030\007" +
    "\000\002\043\002\000\002\030\011\000\002\044\002\000" +
    "\002\030\011\000\002\045\002\000\002\030\013\000\002" +
    "\046\002\000\002\030\011\000\002\032\006\000\002\032" +
    "\007\000\002\047\002\000\002\032\010\000\002\050\002" +
    "\000\002\032\011\000\002\031\005\000\002\031\006\000" +
    "\002\051\002\000\002\031\007\000\002\052\002\000\002" +
    "\031\010\000\002\014\003\000\002\022\003\000\002\022" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\016\004\005\005\010\006\014\007\016\010" +
    "\013\011\011\001\002\000\004\002\001\001\002\000\004" +
    "\053\uffd7\001\002\000\016\004\005\005\010\006\014\007" +
    "\016\010\013\011\011\001\002\000\004\002\ufffe\001\002" +
    "\000\004\053\uffd4\001\002\000\006\023\355\053\uffd3\001" +
    "\002\000\004\002\354\001\002\000\004\053\uffd5\001\002" +
    "\000\004\053\uffd6\001\002\000\004\053\017\001\002\000" +
    "\004\053\uffd8\001\002\000\004\036\020\001\002\000\016" +
    "\004\021\005\027\006\022\007\026\010\023\037\030\001" +
    "\002\000\004\053\uffd1\001\002\000\004\053\uffd0\001\002" +
    "\000\004\053\uffcf\001\002\000\004\053\353\001\002\000" +
    "\006\027\346\037\347\001\002\000\004\053\uffd2\001\002" +
    "\000\004\053\uffce\001\002\000\004\040\032\001\002\000" +
    "\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\001\002\000\044\004\021\005\027\006\022\007\026\010" +
    "\023\012\056\013\040\014\046\016\044\021\052\022\035" +
    "\024\041\025\053\026\057\040\032\041\045\053\050\001" +
    "\002\000\044\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\012\uffe3\013\uffe3\014\uffe3\016\uffe3\021\uffe3\022\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\040\uffe3\041\uffe3\053\uffe3\001\002" +
    "\000\044\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010\uffdf\012" +
    "\uffdf\013\uffdf\014\uffdf\016\uffdf\021\uffdf\022\uffdf\024\uffdf" +
    "\025\uffdf\026\uffdf\040\uffdf\041\uffdf\053\uffdf\001\002\000" +
    "\004\030\345\001\002\000\044\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\013\uffe4\014\uffe4\016\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\040\uffe4\041\uffe4" +
    "\053\uffe4\001\002\000\044\004\uffef\005\uffef\006\uffef\007" +
    "\uffef\010\uffef\012\uffef\013\uffef\014\uffef\016\uffef\021\uffef" +
    "\022\uffef\024\uffef\025\uffef\026\uffef\040\uffef\041\uffef\053" +
    "\uffef\001\002\000\004\036\341\001\002\000\024\030\337" +
    "\036\107\053\111\054\075\055\104\056\103\057\112\060" +
    "\102\061\106\001\002\000\044\004\uffe1\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\012\uffe1\013\uffe1\014\uffe1\016\uffe1\021" +
    "\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\040\uffe1\041\uffe1" +
    "\053\uffe1\001\002\000\004\053\320\001\002\000\004\036" +
    "\272\001\002\000\056\002\uffed\004\uffed\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015" +
    "\uffed\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed" +
    "\025\uffed\026\uffed\040\uffed\041\uffed\053\uffed\001\002\000" +
    "\004\036\263\001\002\000\044\004\uffe6\005\uffe6\006\uffe6" +
    "\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\021" +
    "\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\040\uffe6\041\uffe6" +
    "\053\uffe6\001\002\000\006\036\241\052\242\001\002\000" +
    "\044\004\021\005\027\006\022\007\026\010\023\012\056" +
    "\013\040\014\046\016\044\021\052\022\035\024\041\025" +
    "\053\026\057\040\032\041\240\053\050\001\002\000\004" +
    "\030\236\001\002\000\004\036\212\001\002\000\044\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\013\uffe2" +
    "\014\uffe2\016\uffe2\021\uffe2\022\uffe2\024\uffe2\025\uffe2\026" +
    "\uffe2\040\uffe2\041\uffe2\053\uffe2\001\002\000\044\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\010\uffe5\012\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\021\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\040\uffe5\041\uffe5\053\uffe5\001\002\000\004\036\070\001" +
    "\002\000\004\036\061\001\002\000\044\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\012\uffe0\013\uffe0\014\uffe0\016" +
    "\uffe0\021\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\040\uffe0" +
    "\041\uffe0\053\uffe0\001\002\000\004\053\062\001\002\000" +
    "\004\037\063\001\002\000\006\003\064\030\065\001\002" +
    "\000\004\030\uffad\001\002\000\044\004\uffae\005\uffae\006" +
    "\uffae\007\uffae\010\uffae\012\uffae\013\uffae\014\uffae\016\uffae" +
    "\021\uffae\022\uffae\024\uffae\025\uffae\026\uffae\040\uffae\041" +
    "\uffae\053\uffae\001\002\000\004\030\067\001\002\000\044" +
    "\004\uffac\005\uffac\006\uffac\007\uffac\010\uffac\012\uffac\013" +
    "\uffac\014\uffac\016\uffac\021\uffac\022\uffac\024\uffac\025\uffac" +
    "\026\uffac\040\uffac\041\uffac\053\uffac\001\002\000\016\004" +
    "\021\005\027\006\022\007\026\010\023\053\071\001\002" +
    "\000\004\052\202\001\002\000\004\053\073\001\002\000" +
    "\004\052\074\001\002\000\022\036\107\053\111\054\075" +
    "\055\104\056\103\057\112\060\102\061\106\001\002\000" +
    "\042\003\uff95\027\uff95\030\uff95\032\uff95\033\uff95\034\uff95" +
    "\035\uff95\037\uff95\042\uff95\043\uff95\044\uff95\045\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\001\002\000\036\003\uffbc" +
    "\027\uffbc\030\uffbc\032\156\033\155\037\uffbc\042\uffbc\043" +
    "\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\001\002\000\022\003\uffc2\027\uffc2\030\uffc2\037\uffc2\046" +
    "\uffc2\047\uffc2\050\145\051\146\001\002\000\016\003\uff99" +
    "\027\uff99\030\uff99\037\uff99\046\143\047\141\001\002\000" +
    "\042\003\uff97\027\uff97\030\uff97\032\uff97\033\uff97\034\uff97" +
    "\035\uff97\037\uff97\042\uff97\043\uff97\044\uff97\045\uff97\046" +
    "\uff97\047\uff97\050\uff97\051\uff97\001\002\000\042\003\uff91" +
    "\027\uff91\030\uff91\032\uff91\033\uff91\034\uff91\035\uff91\037" +
    "\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\047\uff91" +
    "\050\uff91\051\uff91\001\002\000\042\003\uff92\027\uff92\030" +
    "\uff92\032\uff92\033\uff92\034\uff92\035\uff92\037\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051" +
    "\uff92\001\002\000\042\003\uff93\027\uff93\030\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\037\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\001\002" +
    "\000\032\003\uffbf\027\uffbf\030\uffbf\037\uffbf\042\150\043" +
    "\151\044\152\045\153\046\uffbf\047\uffbf\050\uffbf\051\uffbf" +
    "\001\002\000\042\003\uff90\027\uff90\030\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\037\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\001\002\000" +
    "\022\036\107\053\111\054\075\055\104\056\103\057\112" +
    "\060\102\061\106\001\002\000\004\030\137\001\002\000" +
    "\044\003\uff96\027\uff96\030\uff96\032\uff96\033\uff96\034\uff96" +
    "\035\uff96\036\122\037\uff96\042\uff96\043\uff96\044\uff96\045" +
    "\uff96\046\uff96\047\uff96\050\uff96\051\uff96\001\002\000\042" +
    "\003\uff94\027\uff94\030\uff94\032\uff94\033\uff94\034\uff94\035" +
    "\uff94\037\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94" +
    "\047\uff94\050\uff94\051\uff94\001\002\000\042\003\uffb7\027" +
    "\uffb7\030\uffb7\032\uffb7\033\uffb7\034\116\035\117\037\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\045\uffb7\046\uffb7\047\uffb7\050" +
    "\uffb7\051\uffb7\001\002\000\042\003\uff98\027\uff98\030\uff98" +
    "\032\uff98\033\uff98\034\uff98\035\uff98\037\uff98\042\uff98\043" +
    "\uff98\044\uff98\045\uff98\046\uff98\047\uff98\050\uff98\051\uff98" +
    "\001\002\000\042\003\uffb4\027\uffb4\030\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\037\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\045\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000" +
    "\022\036\107\053\111\054\075\055\104\056\103\057\112" +
    "\060\102\061\106\001\002\000\022\036\107\053\111\054" +
    "\075\055\104\056\103\057\112\060\102\061\106\001\002" +
    "\000\042\003\uffb2\027\uffb2\030\uffb2\032\uffb2\033\uffb2\034" +
    "\uffb2\035\uffb2\037\uffb2\042\uffb2\043\uffb2\044\uffb2\045\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\042\003" +
    "\uffb3\027\uffb3\030\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3" +
    "\037\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\046\uffb3\047" +
    "\uffb3\050\uffb3\051\uffb3\001\002\000\026\003\125\036\107" +
    "\037\124\053\111\054\075\055\104\056\103\057\112\060" +
    "\102\061\106\001\002\000\010\003\uffdc\027\uffdc\037\uffdc" +
    "\001\002\000\042\003\uff9f\027\uff9f\030\uff9f\032\uff9f\033" +
    "\uff9f\034\uff9f\035\uff9f\037\uff9f\042\uff9f\043\uff9f\044\uff9f" +
    "\045\uff9f\046\uff9f\047\uff9f\050\uff9f\051\uff9f\001\002\000" +
    "\004\037\uff9d\001\002\000\010\003\130\027\127\037\131" +
    "\001\002\000\022\036\107\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\106\001\002\000\004\037\uff9b" +
    "\001\002\000\042\003\uff9e\027\uff9e\030\uff9e\032\uff9e\033" +
    "\uff9e\034\uff9e\035\uff9e\037\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051\uff9e\001\002\000" +
    "\004\037\133\001\002\000\042\003\uff9a\027\uff9a\030\uff9a" +
    "\032\uff9a\033\uff9a\034\uff9a\035\uff9a\037\uff9a\042\uff9a\043" +
    "\uff9a\044\uff9a\045\uff9a\046\uff9a\047\uff9a\050\uff9a\051\uff9a" +
    "\001\002\000\010\003\uffdb\027\uffdb\037\uffdb\001\002\000" +
    "\004\037\136\001\002\000\042\003\uff9c\027\uff9c\030\uff9c" +
    "\032\uff9c\033\uff9c\034\uff9c\035\uff9c\037\uff9c\042\uff9c\043" +
    "\uff9c\044\uff9c\045\uff9c\046\uff9c\047\uff9c\050\uff9c\051\uff9c" +
    "\001\002\000\022\036\107\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\106\001\002\000\010\030\142" +
    "\046\143\047\141\001\002\000\022\036\107\053\111\054" +
    "\075\055\104\056\103\057\112\060\102\061\106\001\002" +
    "\000\016\004\021\005\027\006\022\007\026\010\023\053" +
    "\165\001\002\000\022\036\107\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\106\001\002\000\022\003" +
    "\uffc0\027\uffc0\030\uffc0\037\uffc0\046\uffc0\047\uffc0\050\145" +
    "\051\146\001\002\000\022\036\107\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\106\001\002\000\022" +
    "\036\107\053\111\054\075\055\104\056\103\057\112\060" +
    "\102\061\106\001\002\000\032\003\uffbe\027\uffbe\030\uffbe" +
    "\037\uffbe\042\150\043\151\044\152\045\153\046\uffbe\047" +
    "\uffbe\050\uffbe\051\uffbe\001\002\000\022\036\107\053\111" +
    "\054\075\055\104\056\103\057\112\060\102\061\106\001" +
    "\002\000\022\036\107\053\111\054\075\055\104\056\103" +
    "\057\112\060\102\061\106\001\002\000\022\036\107\053" +
    "\111\054\075\055\104\056\103\057\112\060\102\061\106" +
    "\001\002\000\022\036\107\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\106\001\002\000\036\003\uffbb" +
    "\027\uffbb\030\uffbb\032\156\033\155\037\uffbb\042\uffbb\043" +
    "\uffbb\044\uffbb\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb" +
    "\001\002\000\022\036\107\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\106\001\002\000\022\036\107" +
    "\053\111\054\075\055\104\056\103\057\112\060\102\061" +
    "\106\001\002\000\042\003\uffb6\027\uffb6\030\uffb6\032\uffb6" +
    "\033\uffb6\034\116\035\117\037\uffb6\042\uffb6\043\uffb6\044" +
    "\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002" +
    "\000\042\003\uffb5\027\uffb5\030\uffb5\032\uffb5\033\uffb5\034" +
    "\116\035\117\037\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5" +
    "\046\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\036\003" +
    "\uffba\027\uffba\030\uffba\032\156\033\155\037\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\001\002\000\036\003\uffb9\027\uffb9\030\uffb9\032\156" +
    "\033\155\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046" +
    "\uffb9\047\uffb9\050\uffb9\051\uffb9\001\002\000\036\003\uffb8" +
    "\027\uffb8\030\uffb8\032\156\033\155\037\uffb8\042\uffb8\043" +
    "\uffb8\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8" +
    "\001\002\000\032\003\uffbd\027\uffbd\030\uffbd\037\uffbd\042" +
    "\150\043\151\044\152\045\153\046\uffbd\047\uffbd\050\uffbd" +
    "\051\uffbd\001\002\000\004\052\175\001\002\000\004\037" +
    "\173\001\002\000\004\053\170\001\002\000\004\052\171" +
    "\001\002\000\022\036\107\053\111\054\075\055\104\056" +
    "\103\057\112\060\102\061\106\001\002\000\004\037\uffc4" +
    "\001\002\000\004\040\032\001\002\000\044\004\ufff5\005" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\016\ufff5\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\040" +
    "\ufff5\041\ufff5\053\ufff5\001\002\000\022\036\107\053\111" +
    "\054\075\055\104\056\103\057\112\060\102\061\106\001" +
    "\002\000\004\037\uffc3\001\002\000\022\003\uffc1\027\uffc1" +
    "\030\uffc1\037\uffc1\046\uffc1\047\uffc1\050\145\051\146\001" +
    "\002\000\004\037\201\001\002\000\042\003\uff8f\027\uff8f" +
    "\030\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f\037\uff8f\042" +
    "\uff8f\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f" +
    "\051\uff8f\001\002\000\022\036\107\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\106\001\002\000\004" +
    "\030\204\001\002\000\022\036\107\053\111\054\075\055" +
    "\104\056\103\057\112\060\102\061\106\001\002\000\010" +
    "\030\206\046\143\047\141\001\002\000\016\004\021\005" +
    "\027\006\022\007\026\010\023\053\165\001\002\000\004" +
    "\037\210\001\002\000\004\040\032\001\002\000\044\004" +
    "\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\040\ufff4\041\ufff4\053\ufff4\001\002\000\006\053\213" +
    "\057\214\001\002\000\004\037\231\001\002\000\006\027" +
    "\215\037\216\001\002\000\022\036\107\053\111\054\075" +
    "\055\104\056\103\057\112\060\102\061\106\001\002\000" +
    "\006\003\217\030\220\001\002\000\004\030\uffab\001\002" +
    "\000\044\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\016\uffb1\021\uffb1\022\uffb1\024\uffb1" +
    "\025\uffb1\026\uffb1\040\uffb1\041\uffb1\053\uffb1\001\002\000" +
    "\004\030\222\001\002\000\044\004\uffaa\005\uffaa\006\uffaa" +
    "\007\uffaa\010\uffaa\012\uffaa\013\uffaa\014\uffaa\016\uffaa\021" +
    "\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\040\uffaa\041\uffaa" +
    "\053\uffaa\001\002\000\006\027\127\037\224\001\002\000" +
    "\006\003\225\030\226\001\002\000\004\030\uffa9\001\002" +
    "\000\044\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\012" +
    "\uffb0\013\uffb0\014\uffb0\016\uffb0\021\uffb0\022\uffb0\024\uffb0" +
    "\025\uffb0\026\uffb0\040\uffb0\041\uffb0\053\uffb0\001\002\000" +
    "\004\030\230\001\002\000\044\004\uffa8\005\uffa8\006\uffa8" +
    "\007\uffa8\010\uffa8\012\uffa8\013\uffa8\014\uffa8\016\uffa8\021" +
    "\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\040\uffa8\041\uffa8" +
    "\053\uffa8\001\002\000\006\003\232\030\233\001\002\000" +
    "\004\030\uffa7\001\002\000\044\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\021" +
    "\uffaf\022\uffaf\024\uffaf\025\uffaf\026\uffaf\040\uffaf\041\uffaf" +
    "\053\uffaf\001\002\000\004\030\235\001\002\000\044\004" +
    "\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6\012\uffa6\013\uffa6" +
    "\014\uffa6\016\uffa6\021\uffa6\022\uffa6\024\uffa6\025\uffa6\026" +
    "\uffa6\040\uffa6\041\uffa6\053\uffa6\001\002\000\044\004\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9\013\ufff9\014" +
    "\ufff9\016\ufff9\021\ufff9\022\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\040\ufff9\041\ufff9\053\ufff9\001\002\000\044\004\uffee\005" +
    "\uffee\006\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee" +
    "\016\uffee\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\040" +
    "\uffee\041\uffee\053\uffee\001\002\000\056\002\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec" +
    "\022\uffec\024\uffec\025\uffec\026\uffec\040\uffec\041\uffec\053" +
    "\uffec\001\002\000\024\036\107\037\250\053\111\054\075" +
    "\055\104\056\103\057\112\060\102\061\106\001\002\000" +
    "\022\036\107\053\111\054\075\055\104\056\103\057\112" +
    "\060\102\061\106\001\002\000\006\003\244\030\245\001" +
    "\002\000\004\030\uffc6\001\002\000\044\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\012\uffcb\013\uffcb\014\uffcb\016" +
    "\uffcb\021\uffcb\022\uffcb\024\uffcb\025\uffcb\026\uffcb\040\uffcb" +
    "\041\uffcb\053\uffcb\001\002\000\004\030\247\001\002\000" +
    "\044\004\uffc5\005\uffc5\006\uffc5\007\uffc5\010\uffc5\012\uffc5" +
    "\013\uffc5\014\uffc5\016\uffc5\021\uffc5\022\uffc5\024\uffc5\025" +
    "\uffc5\026\uffc5\040\uffc5\041\uffc5\053\uffc5\001\002\000\006" +
    "\003\257\030\260\001\002\000\006\027\127\037\252\001" +
    "\002\000\006\003\253\030\254\001\002\000\004\030\uffa1" +
    "\001\002\000\044\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010" +
    "\uffa4\012\uffa4\013\uffa4\014\uffa4\016\uffa4\021\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\040\uffa4\041\uffa4\053\uffa4\001" +
    "\002\000\004\030\256\001\002\000\044\004\uffa0\005\uffa0" +
    "\006\uffa0\007\uffa0\010\uffa0\012\uffa0\013\uffa0\014\uffa0\016" +
    "\uffa0\021\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\040\uffa0" +
    "\041\uffa0\053\uffa0\001\002\000\004\030\uffa3\001\002\000" +
    "\044\004\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\012\uffa5" +
    "\013\uffa5\014\uffa5\016\uffa5\021\uffa5\022\uffa5\024\uffa5\025" +
    "\uffa5\026\uffa5\040\uffa5\041\uffa5\053\uffa5\001\002\000\004" +
    "\030\262\001\002\000\044\004\uffa2\005\uffa2\006\uffa2\007" +
    "\uffa2\010\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\021\uffa2" +
    "\022\uffa2\024\uffa2\025\uffa2\026\uffa2\040\uffa2\041\uffa2\053" +
    "\uffa2\001\002\000\022\036\107\053\111\054\075\055\104" +
    "\056\103\057\112\060\102\061\106\001\002\000\010\037" +
    "\265\046\143\047\141\001\002\000\004\040\032\001\002" +
    "\000\046\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\267\016\ufff3\021\ufff3\022\ufff3" +
    "\024\ufff3\025\ufff3\026\ufff3\040\ufff3\041\ufff3\053\ufff3\001" +
    "\002\000\010\014\046\016\044\040\032\001\002\000\044" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\016\ufff2\021\ufff2\022\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\040\ufff2\041\ufff2\053\ufff2\001\002\000\044\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\016\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026" +
    "\ufff1\040\ufff1\041\ufff1\053\ufff1\001\002\000\004\053\273" +
    "\001\002\000\004\037\274\001\002\000\004\040\275\001" +
    "\002\000\010\017\300\020\276\041\uffe7\001\002\000\004" +
    "\031\316\001\002\000\004\041\315\001\002\000\010\054" +
    "\303\056\302\057\301\001\002\000\004\031\312\001\002" +
    "\000\004\031\307\001\002\000\004\031\304\001\002\000" +
    "\004\040\032\001\002\000\010\017\300\020\276\041\uffe7" +
    "\001\002\000\004\041\uffeb\001\002\000\004\040\032\001" +
    "\002\000\010\017\300\020\276\041\uffe7\001\002\000\004" +
    "\041\uffea\001\002\000\004\040\032\001\002\000\010\017" +
    "\300\020\276\041\uffe7\001\002\000\004\041\uffe9\001\002" +
    "\000\044\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\012" +
    "\ufff0\013\ufff0\014\ufff0\016\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\025\ufff0\026\ufff0\040\ufff0\041\ufff0\053\ufff0\001\002\000" +
    "\004\040\032\001\002\000\004\041\uffe8\001\002\000\012" +
    "\003\uffde\027\uffde\030\uffde\052\330\001\002\000\010\003" +
    "\323\027\322\030\324\001\002\000\004\053\327\001\002" +
    "\000\004\030\uffca\001\002\000\044\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\012\uffcd\013\uffcd\014\uffcd\016\uffcd" +
    "\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026\uffcd\040\uffcd\041" +
    "\uffcd\053\uffcd\001\002\000\004\030\326\001\002\000\044" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\012\uffc9\013" +
    "\uffc9\014\uffc9\016\uffc9\021\uffc9\022\uffc9\024\uffc9\025\uffc9" +
    "\026\uffc9\040\uffc9\041\uffc9\053\uffc9\001\002\000\010\003" +
    "\uffdd\027\uffdd\030\uffdd\001\002\000\022\036\107\053\111" +
    "\054\075\055\104\056\103\057\112\060\102\061\106\001" +
    "\002\000\006\003\332\030\333\001\002\000\004\030\uffc8" +
    "\001\002\000\044\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\016\uffcc\021\uffcc\022\uffcc" +
    "\024\uffcc\025\uffcc\026\uffcc\040\uffcc\041\uffcc\053\uffcc\001" +
    "\002\000\004\030\335\001\002\000\044\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\012\uffc7\013\uffc7\014\uffc7\016" +
    "\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7\040\uffc7" +
    "\041\uffc7\053\uffc7\001\002\000\010\030\340\046\143\047" +
    "\141\001\002\000\044\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\012\ufff8\013\ufff8\014\ufff8\016\ufff8\021\ufff8\022" +
    "\ufff8\024\ufff8\025\ufff8\026\ufff8\040\ufff8\041\ufff8\053\ufff8" +
    "\001\002\000\044\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\012\ufff7\013\ufff7\014\ufff7\016\ufff7\021\ufff7\022\ufff7" +
    "\024\ufff7\025\ufff7\026\ufff7\040\ufff7\041\ufff7\053\ufff7\001" +
    "\002\000\022\036\107\053\111\054\075\055\104\056\103" +
    "\057\112\060\102\061\106\001\002\000\010\037\343\046" +
    "\143\047\141\001\002\000\004\040\032\001\002\000\044" +
    "\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\016\ufff6\021\ufff6\022\ufff6\024\ufff6\025\ufff6" +
    "\026\ufff6\040\ufff6\041\ufff6\053\ufff6\001\002\000\044\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\021\ufffa\022\ufffa\024\ufffa\025\ufffa\026" +
    "\ufffa\040\ufffa\041\ufffa\053\ufffa\001\002\000\014\004\021" +
    "\005\027\006\022\007\026\010\023\001\002\000\004\040" +
    "\032\001\002\000\016\004\ufffb\005\ufffb\006\ufffb\007\ufffb" +
    "\010\ufffb\011\ufffb\001\002\000\004\053\352\001\002\000" +
    "\006\027\uffd9\037\uffd9\001\002\000\006\027\uffda\037\uffda" +
    "\001\002\000\004\002\000\001\002\000\004\036\356\001" +
    "\002\000\004\037\357\001\002\000\004\040\032\001\002" +
    "\000\004\002\ufffd\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\357\000\014\002\011\003\003\004\006\005\005\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\360\004\006\005\005\006\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\024\013\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\030\001\001\000\002\001" +
    "\001\000\030\007\046\010\035\012\054\013\042\025\050" +
    "\026\036\027\032\030\053\032\041\036\057\037\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\016\335\017\104\020\075\021\112\022\114\023\076" +
    "\031\100\035\113\001\001\000\002\001\001\000\004\033" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\046\010\035\012\054\013\042\026\236\027\032\030\053" +
    "\032\041\036\057\037\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\043\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\107\016\077\017" +
    "\104\020\075\021\112\022\114\023\076\031\100\035\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\014\177\016\077\017\104\020\075" +
    "\021\112\022\114\023\076\031\100\035\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\120\031\100\035\113\001\001\000\010\022\117\031\100" +
    "\035\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\014\122\016\077\017\104\020\075\021\112\022\114" +
    "\023\076\031\100\034\125\035\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\051\134\001\001\000\002" +
    "\001\001\000\024\014\133\016\077\017\104\020\075\021" +
    "\112\022\114\023\076\031\100\035\113\001\001\000\004" +
    "\052\131\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\016\137\017\104\020\075\021\112\022" +
    "\114\023\076\031\100\035\113\001\001\000\002\001\001" +
    "\000\020\017\104\020\075\021\112\022\114\023\176\031" +
    "\100\035\113\001\001\000\006\013\166\015\165\001\001" +
    "\000\020\017\104\020\075\021\112\022\114\023\143\031" +
    "\100\035\113\001\001\000\002\001\001\000\016\017\163" +
    "\020\075\021\112\022\114\031\100\035\113\001\001\000" +
    "\016\017\146\020\075\021\112\022\114\031\100\035\113" +
    "\001\001\000\002\001\001\000\014\020\162\021\112\022" +
    "\114\031\100\035\113\001\001\000\014\020\161\021\112" +
    "\022\114\031\100\035\113\001\001\000\014\020\160\021" +
    "\112\022\114\031\100\035\113\001\001\000\014\020\153" +
    "\021\112\022\114\031\100\035\113\001\001\000\002\001" +
    "\001\000\012\021\157\022\114\031\100\035\113\001\001" +
    "\000\012\021\156\022\114\031\100\035\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\014\171\016\077\017\104\020\075\021\112\022" +
    "\114\023\076\031\100\035\113\001\001\000\002\001\001" +
    "\000\004\007\173\001\001\000\002\001\001\000\024\014" +
    "\175\016\077\017\104\020\075\021\112\022\114\023\076" +
    "\031\100\035\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\202" +
    "\016\077\017\104\020\075\021\112\022\114\023\076\031" +
    "\100\035\113\001\001\000\002\001\001\000\022\016\204" +
    "\017\104\020\075\021\112\022\114\023\076\031\100\035" +
    "\113\001\001\000\002\001\001\000\006\013\166\015\206" +
    "\001\001\000\002\001\001\000\004\007\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\014\122\016\077\017\104\020\075\021" +
    "\112\022\114\023\076\031\100\034\222\035\113\001\001" +
    "\000\002\001\001\000\004\044\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\045\226\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\233\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\014\122\016\077\017\104\020" +
    "\075\021\112\022\114\023\076\031\100\034\250\035\113" +
    "\001\001\000\024\014\242\016\077\017\104\020\075\021" +
    "\112\022\114\023\076\031\100\035\113\001\001\000\002" +
    "\001\001\000\004\042\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\050\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\047\260\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\263\017\104\020\075\021\112" +
    "\022\114\023\076\031\100\035\113\001\001\000\002\001" +
    "\001\000\004\007\265\001\001\000\002\001\001\000\006" +
    "\007\267\012\270\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\304\001\001\000\004\024" +
    "\305\001\001\000\002\001\001\000\004\007\307\001\001" +
    "\000\004\024\310\001\001\000\002\001\001\000\004\007" +
    "\312\001\001\000\004\024\313\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\316\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\324\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\014\330" +
    "\016\077\017\104\020\075\021\112\022\114\023\076\031" +
    "\100\035\113\001\001\000\002\001\001\000\004\041\333" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\016\341\017\104\020\075\021\112\022\114\023" +
    "\076\031\100\035\113\001\001\000\002\001\001\000\004" +
    "\007\343\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\350\001\001\000\004\007\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\007\357\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static kcScanner s;
    public static Generate generateCode;
    public static int p = 0;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
   		super(s=new kcScanner(input));
   		generateCode = new Generate();
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              ATD_ASTTreeDeclaration RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ATD_ASTTreeDeclaration(mFD,parser.generateCode); RESULT.setLine(mFDleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ATD_ASTTreeDeclaration start_val = (ATD_ASTTreeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= function_definition main_function_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		functionDefinition fD = (functionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mF = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunctionAndOthers(fD,mF,parser.generateCode); RESULT.setLine(mFleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function 
            {
              mainFunctionDeclaration RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunction mF = (mainFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunction(mF,parser.generateCode); RESULT.setLine(mFleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_function ::= VOID MAIN OPAR CPAR compound_statement 
            {
              mainFunction RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MF_MainFunction(new FTS_Type(Void.TYPE),cS,parser.generateCode);RESULT.setLine(cSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= function_type_specifier ID OPAR CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,cS,parser.generateCode);RESULT.setLine(tSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= function_type_specifier ID OPAR type_parameter_list CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,pL,cS,parser.generateCode);RESULT.setLine(tSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // jump_iteration_statement ::= CONTINUE END 
            {
              jumpIterationStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Continue();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // jump_iteration_statement ::= BREAK END 
            {
              jumpIterationStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Break();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // jump_function_statement ::= RETURN END 
            {
              jumpFunctionStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFS_EmptyReturn(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_function_statement ::= RETURN conditional_expression END 
            {
              jumpFunctionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JFS_Return(cE); RESULT.setLine(cEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // iteration_statement ::= WHILE OPAR conditional_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_While(cE,cS, parser.generateCode); RESULT.setLine(cEleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // iteration_statement ::= FOR OPAR variable_type_specifier ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(tS,id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iteration_statement ::= FOR OPAR ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_If(cE,cS,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cSE = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfElse(cE,cS,cSE,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE selection_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfSS(cE,cS,sS,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // selection_statement ::= SWITCH OPAR ID CPAR OCBRA labeled_statement CCBRA 
            {
              selectionStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SS_Switch(id,lS,parser.generateCode);RESULT.setLine(idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= statement 
            {
              statementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_Statement(stm,parser.generateCode); RESULT.setLine(stmleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_list ::= statement_list statement 
            {
              statementList RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_StatementList(sL,stm,parser.generateCode); RESULT.setLine(stmleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compound_statement ::= OCBRA CCBRA 
            {
              compoundStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CS_Empty(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_StatementList(sL,parser.generateCode); RESULT.setLine(sLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // labeled_statement ::= CASE INT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(integerContent,cS,lS,2); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // labeled_statement ::= CASE CHARCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(charContent,cS,lS,1); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // labeled_statement ::= CASE STRINGCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(stringContent,cS,lS,4); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // labeled_statement ::= DEFAULT COLON compound_statement 
            {
              labeledStatement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Default(cS); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // labeled_statement ::= 
            {
              labeledStatement RESULT =null;
		 RESULT = new LS_Lambda(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_CompoundStatement(cS); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_SelectionStatement(sS,parser.generateCode);RESULT.setLine(sSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		iterationStatement iS = (iterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IterationStatement(iS); RESULT.setLine(iSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_Declaration(d); RESULT.setLine(dleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= io_expressions 
            {
              Statement RESULT =null;
		int iEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ioExpressions iE = (ioExpressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IOExpression(iE,parser.generateCode); RESULT.setLine(iEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= function_calls_declaration 
            {
              Statement RESULT =null;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsDeclaration fcd = (functionCallsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_FCD(fcd); RESULT.setLine(fcdleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= jump_iteration_statement 
            {
              Statement RESULT =null;
		int jisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpIterationStatement jis = (jumpIterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JIS(jis); RESULT.setLine(jisleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= jump_function_statement 
            {
              Statement RESULT =null;
		int jfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpFunctionStatement jfs = (jumpFunctionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JFS(jfs); RESULT.setLine(jfsleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // identifier_list ::= ID 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_Id(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // identifier_list ::= identifier_list COMMA ID 
            {
              identifierList RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_IdentifierList(iL,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parameter_list ::= expression 
            {
              parameterList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_Expression(exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_list ::= parameter_list COMMA expression 
            {
              parameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_ExpressionList(pL,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_parameter_list ::= variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_Id(vTS,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_parameter_list ::= type_parameter_list COMMA variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_List(pL,vTS,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // function_type_specifier ::= CHAR 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Character.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // function_type_specifier ::= INTEGER 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Integer.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function_type_specifier ::= DOUBLE 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Double.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // function_type_specifier ::= STRING 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(String.class.getSimpleName()); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // function_type_specifier ::= BOOLEAN 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Boolean.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // function_type_specifier ::= VOID 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Void.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_type_specifier ::= CHAR 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Character.TYPE,Character.SIZE/8);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type_specifier ::= INTEGER 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Integer.TYPE,Integer.SIZE/8);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type_specifier ::= DOUBLE 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Double.TYPE,Double.SIZE/8); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // variable_type_specifier ::= STRING 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(String.class.getSimpleName(),255);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_type_specifier ::= BOOLEAN 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Boolean.TYPE,1);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= variable_type_specifier identifier_list END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= variable_type_specifier ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // declaration ::= ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$0 ::= 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= variable_type_specifier identifier_list error NT$0 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$1 ::= 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= variable_type_specifier ID ASSIGN expression error NT$1 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$2 ::= 
            {
              Declaration RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // declaration ::= ID ASSIGN expression error NT$2 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment_expression ::= variable_type_specifier ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(tS,stringValue,exp); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignment_expression ::= ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(stringValue,exp); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional_expression ::= equality_expression 
            {
              conditionalExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_equalityExpression(eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"&&",eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"||",eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // equality_expression ::= relational_expression 
            {
              equalityExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_relationalExpression(rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // equality_expression ::= equality_expression EQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"==",rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"!=",rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relational_expression ::= additive_expression 
            {
              relationalExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_additiveExpression(aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relational_expression ::= relational_expression LESS additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<=",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">=",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // additive_expression ::= multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_multiplicativeExpression(mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"+",mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"-",mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multiplicative_expression ::= basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_basicExpression(bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"*",bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"/",bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // io_expressions ::= PRINT OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$3 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // io_expressions ::= SCAN OPAR ID CPAR error NT$3 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NT$4 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR error NT$4 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NT$5 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR error NT$5 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // NT$6 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // io_expressions ::= PRINT OPAR ID CPAR error NT$6 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_calls_declaration ::= ID OPAR CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_calls_declaration ::= ID OPAR parameter_list CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$7 ::= 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_calls_declaration ::= ID OPAR CPAR error NT$7 END 
            {
              functionCallsDeclaration RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (functionCallsDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$8 ::= 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // function_calls_declaration ::= ID OPAR parameter_list CPAR error NT$8 END 
            {
              functionCallsDeclaration RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (functionCallsDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // function_calls_expression ::= ID OPAR CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // function_calls_expression ::= ID OPAR parameter_list CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$9 ::= 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a )","End of statement Syntax Error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // function_calls_expression ::= ID OPAR error NT$9 CPAR 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$10 ::= 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a )","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // function_calls_expression ::= ID OPAR parameter_list error NT$10 CPAR 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expression ::= conditional_expression 
            {
              Expression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(cE,parser.generateCode); RESULT.setLine(cEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // basic_expression ::= primary_expression 
            {
              basicExpression RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression pE = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_primaryExpression(pE,parser.generateCode); RESULT.setLine(pEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // basic_expression ::= function_calls_expression 
            {
              basicExpression RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_FCE(fCE,parser.generateCode); RESULT.setLine(fCEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // primary_expression ::= ID 
            {
              primaryExpression RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Id(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // primary_expression ::= INT 
            {
              primaryExpression RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(integerContent,2); RESULT.setLine(integerContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // primary_expression ::= STRINGCONTENT 
            {
              primaryExpression RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(stringContent,4); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // primary_expression ::= DOUBLEVALUE 
            {
              primaryExpression RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(doubleContent,3); RESULT.setLine(doubleContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // primary_expression ::= CHARCONTENT 
            {
              primaryExpression RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(charContent,1); RESULT.setLine(charContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // primary_expression ::= TRUE 
            {
              primaryExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content("true",5); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // primary_expression ::= FALSE 
            {
              primaryExpression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content("false",5); RESULT.setLine(fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // primary_expression ::= OPAR expression CPAR 
            {
              primaryExpression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PE_Expression(exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
