
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package app.syntaxAnalysis;

import java_cup.runtime.*;
import app.lexicAnalysis.*;
import app.intermediateCode.*;
import AST.primaryExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.expression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.functionCallsDeclaration.*;
import AST.ioExpressions.*;
import AST.assignmentExpression.*;
import AST.declaration.*;
import AST.globalDeclaration.*;
import AST.variableTypeSpecifier.*;
import AST.functionTypeSpecifier.*;
import AST.typeParameterList.*;
import AST.parameterList.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.labeledStatement.*;
import AST.compoundStatement.*;
import AST.statementList.*;
import AST.selectionStatement.*;
import AST.iterationStatement.*;
import AST.jumpFunctionStatement.*;
import AST.jumpIterationStatement.*;
import AST.functionDefinition.*;
import AST.mainFunction.*;
import AST.mainFunctionDeclaration.*;
import AST.astTreeDeclaration.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\177\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\005\007" +
    "\000\002\005\010\000\002\036\004\000\002\036\004\000" +
    "\002\040\002\000\002\036\006\000\002\041\002\000\002" +
    "\036\006\000\002\037\004\000\002\037\005\000\002\042" +
    "\002\000\002\037\006\000\002\043\002\000\002\037\007" +
    "\000\002\010\007\000\002\010\016\000\002\010\015\000" +
    "\002\012\007\000\002\012\011\000\002\012\011\000\002" +
    "\012\011\000\002\025\003\000\002\025\004\000\002\007" +
    "\004\000\002\007\005\000\002\044\002\000\002\007\006" +
    "\000\002\045\002\000\002\007\007\000\002\024\007\000" +
    "\002\024\007\000\002\024\007\000\002\024\005\000\002" +
    "\024\002\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\033\003\000" +
    "\002\033\005\000\002\034\003\000\002\034\005\000\002" +
    "\011\004\000\002\011\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\027\005\000\002\027\007\000\002\027\006\000\002\046" +
    "\002\000\002\027\007\000\002\047\002\000\002\027\011" +
    "\000\002\050\002\000\002\027\010\000\002\015\006\000" +
    "\002\015\005\000\002\016\003\000\002\016\005\000\002" +
    "\016\005\000\002\023\003\000\002\023\005\000\002\023" +
    "\005\000\002\017\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\020\003\000" +
    "\002\020\005\000\002\020\005\000\002\021\003\000\002" +
    "\021\005\000\002\021\005\000\002\030\007\000\002\030" +
    "\011\000\002\030\007\000\002\030\007\000\002\051\002" +
    "\000\002\030\011\000\002\052\002\000\002\030\011\000" +
    "\002\053\002\000\002\030\013\000\002\054\002\000\002" +
    "\030\011\000\002\032\006\000\002\032\007\000\002\055" +
    "\002\000\002\032\010\000\002\056\002\000\002\032\011" +
    "\000\002\031\005\000\002\031\006\000\002\057\002\000" +
    "\002\031\007\000\002\060\002\000\002\031\010\000\002" +
    "\014\003\000\002\022\003\000\002\022\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\016\004\005\005\010\006\014\007\016\010" +
    "\013\011\011\001\002\000\004\002\001\001\002\000\004" +
    "\053\uffcb\001\002\000\016\004\005\005\010\006\014\007" +
    "\016\010\013\011\011\001\002\000\004\002\ufffe\001\002" +
    "\000\004\053\uffc8\001\002\000\006\023\377\053\uffc7\001" +
    "\002\000\004\002\376\001\002\000\004\053\uffc9\001\002" +
    "\000\004\053\uffca\001\002\000\004\053\017\001\002\000" +
    "\004\053\uffcc\001\002\000\004\036\020\001\002\000\016" +
    "\004\021\005\027\006\022\007\026\010\023\037\030\001" +
    "\002\000\004\053\uffc5\001\002\000\004\053\uffc4\001\002" +
    "\000\004\053\uffc3\001\002\000\006\027\371\037\372\001" +
    "\002\000\004\053\370\001\002\000\004\053\uffc6\001\002" +
    "\000\004\053\uffc2\001\002\000\004\040\032\001\002\000" +
    "\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc" +
    "\001\002\000\046\003\053\004\021\005\027\006\022\007" +
    "\026\010\023\012\057\013\040\014\046\016\044\021\052" +
    "\022\035\024\042\025\054\026\060\040\032\041\045\053" +
    "\050\001\002\000\046\003\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\012\uffd3\013\uffd3\014\uffd3\016\uffd3\021" +
    "\uffd3\022\uffd3\024\uffd3\025\uffd3\026\uffd3\040\uffd3\041\uffd3" +
    "\053\uffd3\001\002\000\046\003\uffd7\004\uffd7\005\uffd7\006" +
    "\uffd7\007\uffd7\010\uffd7\012\uffd7\013\uffd7\014\uffd7\016\uffd7" +
    "\021\uffd7\022\uffd7\024\uffd7\025\uffd7\026\uffd7\040\uffd7\041" +
    "\uffd7\053\uffd7\001\002\000\006\003\364\030\365\001\002" +
    "\000\046\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\016\uffd8\021\uffd8\022\uffd8" +
    "\024\uffd8\025\uffd8\026\uffd8\040\uffd8\041\uffd8\053\uffd8\001" +
    "\002\000\046\003\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\012\uffe7\013\uffe7\014\uffe7\016\uffe7\021\uffe7\022" +
    "\uffe7\024\uffe7\025\uffe7\026\uffe7\040\uffe7\041\uffe7\053\uffe7" +
    "\001\002\000\004\036\360\001\002\000\046\003\uffd5\004" +
    "\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5\012\uffd5\013\uffd5" +
    "\014\uffd5\016\uffd5\021\uffd5\022\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\040\uffd5\041\uffd5\053\uffd5\001\002\000\026\003\351" +
    "\030\347\036\107\053\112\054\076\055\105\056\104\057" +
    "\113\060\103\061\110\001\002\000\004\053\331\001\002" +
    "\000\004\036\303\001\002\000\060\002\uffe5\003\uffe5\004" +
    "\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5" +
    "\013\uffe5\014\uffe5\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021" +
    "\uffe5\022\uffe5\024\uffe5\025\uffe5\026\uffe5\040\uffe5\041\uffe5" +
    "\053\uffe5\001\002\000\004\036\274\001\002\000\046\003" +
    "\uffda\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda" +
    "\013\uffda\014\uffda\016\uffda\021\uffda\022\uffda\024\uffda\025" +
    "\uffda\026\uffda\040\uffda\041\uffda\053\uffda\001\002\000\006" +
    "\036\252\052\253\001\002\000\046\003\247\004\021\005" +
    "\027\006\022\007\026\010\023\012\057\013\040\014\046" +
    "\016\044\021\052\022\035\024\042\025\054\026\060\040" +
    "\032\041\246\053\050\001\002\000\006\003\241\030\242" +
    "\001\002\000\004\041\uffe3\001\002\000\004\036\213\001" +
    "\002\000\046\003\uffd6\004\uffd6\005\uffd6\006\uffd6\007\uffd6" +
    "\010\uffd6\012\uffd6\013\uffd6\014\uffd6\016\uffd6\021\uffd6\022" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\040\uffd6\041\uffd6\053\uffd6" +
    "\001\002\000\046\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007" +
    "\uffd9\010\uffd9\012\uffd9\013\uffd9\014\uffd9\016\uffd9\021\uffd9" +
    "\022\uffd9\024\uffd9\025\uffd9\026\uffd9\040\uffd9\041\uffd9\053" +
    "\uffd9\001\002\000\004\036\071\001\002\000\004\036\062" +
    "\001\002\000\046\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007" +
    "\uffd4\010\uffd4\012\uffd4\013\uffd4\014\uffd4\016\uffd4\021\uffd4" +
    "\022\uffd4\024\uffd4\025\uffd4\026\uffd4\040\uffd4\041\uffd4\053" +
    "\uffd4\001\002\000\004\053\063\001\002\000\004\037\064" +
    "\001\002\000\006\003\065\030\066\001\002\000\004\030" +
    "\uffa1\001\002\000\046\003\uffa2\004\uffa2\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\012\uffa2\013\uffa2\014\uffa2\016\uffa2\021" +
    "\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\040\uffa2\041\uffa2" +
    "\053\uffa2\001\002\000\004\030\070\001\002\000\046\003" +
    "\uffa0\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0\012\uffa0" +
    "\013\uffa0\014\uffa0\016\uffa0\021\uffa0\022\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\040\uffa0\041\uffa0\053\uffa0\001\002\000\016" +
    "\004\021\005\027\006\022\007\026\010\023\053\072\001" +
    "\002\000\004\052\203\001\002\000\004\053\074\001\002" +
    "\000\004\052\075\001\002\000\022\036\107\053\112\054" +
    "\076\055\105\056\104\057\113\060\103\061\110\001\002" +
    "\000\042\003\uff89\027\uff89\030\uff89\032\uff89\033\uff89\034" +
    "\uff89\035\uff89\037\uff89\042\uff89\043\uff89\044\uff89\045\uff89" +
    "\046\uff89\047\uff89\050\uff89\051\uff89\001\002\000\036\003" +
    "\uffb0\027\uffb0\030\uffb0\032\157\033\156\037\uffb0\042\uffb0" +
    "\043\uffb0\044\uffb0\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051" +
    "\uffb0\001\002\000\022\003\uffb6\027\uffb6\030\uffb6\037\uffb6" +
    "\046\uffb6\047\uffb6\050\146\051\147\001\002\000\016\003" +
    "\uff8d\027\uff8d\030\uff8d\037\uff8d\046\144\047\142\001\002" +
    "\000\042\003\uff8b\027\uff8b\030\uff8b\032\uff8b\033\uff8b\034" +
    "\uff8b\035\uff8b\037\uff8b\042\uff8b\043\uff8b\044\uff8b\045\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\001\002\000\042\003" +
    "\uff85\027\uff85\030\uff85\032\uff85\033\uff85\034\uff85\035\uff85" +
    "\037\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047" +
    "\uff85\050\uff85\051\uff85\001\002\000\042\003\uff86\027\uff86" +
    "\030\uff86\032\uff86\033\uff86\034\uff86\035\uff86\037\uff86\042" +
    "\uff86\043\uff86\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86" +
    "\051\uff86\001\002\000\042\003\uff87\027\uff87\030\uff87\032" +
    "\uff87\033\uff87\034\uff87\035\uff87\037\uff87\042\uff87\043\uff87" +
    "\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\001" +
    "\002\000\032\003\uffb3\027\uffb3\030\uffb3\037\uffb3\042\151" +
    "\043\152\044\153\045\154\046\uffb3\047\uffb3\050\uffb3\051" +
    "\uffb3\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\042\003" +
    "\uff84\027\uff84\030\uff84\032\uff84\033\uff84\034\uff84\035\uff84" +
    "\037\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\001\002\000\004\030\140\001\002" +
    "\000\044\003\uff8a\027\uff8a\030\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\035\uff8a\036\123\037\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\001\002\000" +
    "\042\003\uff88\027\uff88\030\uff88\032\uff88\033\uff88\034\uff88" +
    "\035\uff88\037\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046" +
    "\uff88\047\uff88\050\uff88\051\uff88\001\002\000\042\003\uffab" +
    "\027\uffab\030\uffab\032\uffab\033\uffab\034\117\035\120\037" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab" +
    "\050\uffab\051\uffab\001\002\000\042\003\uff8c\027\uff8c\030" +
    "\uff8c\032\uff8c\033\uff8c\034\uff8c\035\uff8c\037\uff8c\042\uff8c" +
    "\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051" +
    "\uff8c\001\002\000\042\003\uffa8\027\uffa8\030\uffa8\032\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\037\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\045\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002" +
    "\000\022\036\107\053\112\054\076\055\105\056\104\057" +
    "\113\060\103\061\110\001\002\000\022\036\107\053\112" +
    "\054\076\055\105\056\104\057\113\060\103\061\110\001" +
    "\002\000\042\003\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\037\uffa6\042\uffa6\043\uffa6\044\uffa6\045" +
    "\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\001\002\000\042" +
    "\003\uffa7\027\uffa7\030\uffa7\032\uffa7\033\uffa7\034\uffa7\035" +
    "\uffa7\037\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\001\002\000\026\003\126\036" +
    "\107\037\125\053\112\054\076\055\105\056\104\057\113" +
    "\060\103\061\110\001\002\000\010\003\uffd0\027\uffd0\037" +
    "\uffd0\001\002\000\042\003\uff93\027\uff93\030\uff93\032\uff93" +
    "\033\uff93\034\uff93\035\uff93\037\uff93\042\uff93\043\uff93\044" +
    "\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93\001\002" +
    "\000\004\037\uff91\001\002\000\010\003\131\027\130\037" +
    "\132\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\004\037" +
    "\uff8f\001\002\000\042\003\uff92\027\uff92\030\uff92\032\uff92" +
    "\033\uff92\034\uff92\035\uff92\037\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\001\002" +
    "\000\004\037\134\001\002\000\042\003\uff8e\027\uff8e\030" +
    "\uff8e\032\uff8e\033\uff8e\034\uff8e\035\uff8e\037\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051" +
    "\uff8e\001\002\000\010\003\uffcf\027\uffcf\037\uffcf\001\002" +
    "\000\004\037\137\001\002\000\042\003\uff90\027\uff90\030" +
    "\uff90\032\uff90\033\uff90\034\uff90\035\uff90\037\uff90\042\uff90" +
    "\043\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051" +
    "\uff90\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\010\030" +
    "\143\046\144\047\142\001\002\000\022\036\107\053\112" +
    "\054\076\055\105\056\104\057\113\060\103\061\110\001" +
    "\002\000\016\004\021\005\027\006\022\007\026\010\023" +
    "\053\166\001\002\000\022\036\107\053\112\054\076\055" +
    "\105\056\104\057\113\060\103\061\110\001\002\000\022" +
    "\003\uffb4\027\uffb4\030\uffb4\037\uffb4\046\uffb4\047\uffb4\050" +
    "\146\051\147\001\002\000\022\036\107\053\112\054\076" +
    "\055\105\056\104\057\113\060\103\061\110\001\002\000" +
    "\022\036\107\053\112\054\076\055\105\056\104\057\113" +
    "\060\103\061\110\001\002\000\032\003\uffb2\027\uffb2\030" +
    "\uffb2\037\uffb2\042\151\043\152\044\153\045\154\046\uffb2" +
    "\047\uffb2\050\uffb2\051\uffb2\001\002\000\022\036\107\053" +
    "\112\054\076\055\105\056\104\057\113\060\103\061\110" +
    "\001\002\000\022\036\107\053\112\054\076\055\105\056" +
    "\104\057\113\060\103\061\110\001\002\000\022\036\107" +
    "\053\112\054\076\055\105\056\104\057\113\060\103\061" +
    "\110\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\036\003" +
    "\uffaf\027\uffaf\030\uffaf\032\157\033\156\037\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\022\036" +
    "\107\053\112\054\076\055\105\056\104\057\113\060\103" +
    "\061\110\001\002\000\042\003\uffaa\027\uffaa\030\uffaa\032" +
    "\uffaa\033\uffaa\034\117\035\120\037\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001" +
    "\002\000\042\003\uffa9\027\uffa9\030\uffa9\032\uffa9\033\uffa9" +
    "\034\117\035\120\037\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\001\002\000\036" +
    "\003\uffae\027\uffae\030\uffae\032\157\033\156\037\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\001\002\000\036\003\uffad\027\uffad\030\uffad\032" +
    "\157\033\156\037\uffad\042\uffad\043\uffad\044\uffad\045\uffad" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\001\002\000\036\003" +
    "\uffac\027\uffac\030\uffac\032\157\033\156\037\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\001\002\000\032\003\uffb1\027\uffb1\030\uffb1\037\uffb1" +
    "\042\151\043\152\044\153\045\154\046\uffb1\047\uffb1\050" +
    "\uffb1\051\uffb1\001\002\000\004\052\176\001\002\000\004" +
    "\037\174\001\002\000\004\053\171\001\002\000\004\052" +
    "\172\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\004\037" +
    "\uffb8\001\002\000\004\040\032\001\002\000\046\003\uffed" +
    "\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\021\uffed\022\uffed\024\uffed\025\uffed" +
    "\026\uffed\040\uffed\041\uffed\053\uffed\001\002\000\022\036" +
    "\107\053\112\054\076\055\105\056\104\057\113\060\103" +
    "\061\110\001\002\000\004\037\uffb7\001\002\000\022\003" +
    "\uffb5\027\uffb5\030\uffb5\037\uffb5\046\uffb5\047\uffb5\050\146" +
    "\051\147\001\002\000\004\037\202\001\002\000\042\003" +
    "\uff83\027\uff83\030\uff83\032\uff83\033\uff83\034\uff83\035\uff83" +
    "\037\uff83\042\uff83\043\uff83\044\uff83\045\uff83\046\uff83\047" +
    "\uff83\050\uff83\051\uff83\001\002\000\022\036\107\053\112" +
    "\054\076\055\105\056\104\057\113\060\103\061\110\001" +
    "\002\000\004\030\205\001\002\000\022\036\107\053\112" +
    "\054\076\055\105\056\104\057\113\060\103\061\110\001" +
    "\002\000\010\030\207\046\144\047\142\001\002\000\016" +
    "\004\021\005\027\006\022\007\026\010\023\053\166\001" +
    "\002\000\004\037\211\001\002\000\004\040\032\001\002" +
    "\000\046\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\012\uffec\013\uffec\014\uffec\016\uffec\021\uffec\022\uffec" +
    "\024\uffec\025\uffec\026\uffec\040\uffec\041\uffec\053\uffec\001" +
    "\002\000\006\053\214\057\215\001\002\000\004\037\232" +
    "\001\002\000\006\027\216\037\217\001\002\000\022\036" +
    "\107\053\112\054\076\055\105\056\104\057\113\060\103" +
    "\061\110\001\002\000\006\003\220\030\221\001\002\000" +
    "\004\030\uff9f\001\002\000\046\003\uffa5\004\uffa5\005\uffa5" +
    "\006\uffa5\007\uffa5\010\uffa5\012\uffa5\013\uffa5\014\uffa5\016" +
    "\uffa5\021\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\040\uffa5" +
    "\041\uffa5\053\uffa5\001\002\000\004\030\223\001\002\000" +
    "\046\003\uff9e\004\uff9e\005\uff9e\006\uff9e\007\uff9e\010\uff9e" +
    "\012\uff9e\013\uff9e\014\uff9e\016\uff9e\021\uff9e\022\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\040\uff9e\041\uff9e\053\uff9e\001\002" +
    "\000\006\027\130\037\225\001\002\000\006\003\226\030" +
    "\227\001\002\000\004\030\uff9d\001\002\000\046\003\uffa4" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\012\uffa4\013" +
    "\uffa4\014\uffa4\016\uffa4\021\uffa4\022\uffa4\024\uffa4\025\uffa4" +
    "\026\uffa4\040\uffa4\041\uffa4\053\uffa4\001\002\000\004\030" +
    "\231\001\002\000\046\003\uff9c\004\uff9c\005\uff9c\006\uff9c" +
    "\007\uff9c\010\uff9c\012\uff9c\013\uff9c\014\uff9c\016\uff9c\021" +
    "\uff9c\022\uff9c\024\uff9c\025\uff9c\026\uff9c\040\uff9c\041\uff9c" +
    "\053\uff9c\001\002\000\006\003\233\030\234\001\002\000" +
    "\004\030\uff9b\001\002\000\046\003\uffa3\004\uffa3\005\uffa3" +
    "\006\uffa3\007\uffa3\010\uffa3\012\uffa3\013\uffa3\014\uffa3\016" +
    "\uffa3\021\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\040\uffa3" +
    "\041\uffa3\053\uffa3\001\002\000\004\030\236\001\002\000" +
    "\046\003\uff9a\004\uff9a\005\uff9a\006\uff9a\007\uff9a\010\uff9a" +
    "\012\uff9a\013\uff9a\014\uff9a\016\uff9a\021\uff9a\022\uff9a\024" +
    "\uff9a\025\uff9a\026\uff9a\040\uff9a\041\uff9a\053\uff9a\001\002" +
    "\000\004\041\240\001\002\000\060\002\uffe2\003\uffe2\004" +
    "\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2" +
    "\013\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\025\uffe2\026\uffe2\040\uffe2\041\uffe2" +
    "\053\uffe2\001\002\000\004\030\ufff6\001\002\000\046\003" +
    "\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\012\ufff9" +
    "\013\ufff9\014\ufff9\016\ufff9\021\ufff9\022\ufff9\024\ufff9\025" +
    "\ufff9\026\ufff9\040\ufff9\041\ufff9\053\ufff9\001\002\000\004" +
    "\030\244\001\002\000\046\003\ufff5\004\ufff5\005\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5" +
    "\021\ufff5\022\ufff5\024\ufff5\025\ufff5\026\ufff5\040\ufff5\041" +
    "\ufff5\053\ufff5\001\002\000\046\003\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\012\uffe6\013\uffe6\014\uffe6\016" +
    "\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\040\uffe6" +
    "\041\uffe6\053\uffe6\001\002\000\060\002\uffe4\003\uffe4\004" +
    "\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\040\uffe4\041\uffe4" +
    "\053\uffe4\001\002\000\004\041\uffe1\001\002\000\004\041" +
    "\251\001\002\000\060\002\uffe0\003\uffe0\004\uffe0\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\013\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\040\uffe0\041\uffe0\053\uffe0\001" +
    "\002\000\024\036\107\037\261\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\022\036" +
    "\107\053\112\054\076\055\105\056\104\057\113\060\103" +
    "\061\110\001\002\000\006\003\255\030\256\001\002\000" +
    "\004\030\uffba\001\002\000\046\003\uffbf\004\uffbf\005\uffbf" +
    "\006\uffbf\007\uffbf\010\uffbf\012\uffbf\013\uffbf\014\uffbf\016" +
    "\uffbf\021\uffbf\022\uffbf\024\uffbf\025\uffbf\026\uffbf\040\uffbf" +
    "\041\uffbf\053\uffbf\001\002\000\004\030\260\001\002\000" +
    "\046\003\uffb9\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\016\uffb9\021\uffb9\022\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\040\uffb9\041\uffb9\053\uffb9\001\002" +
    "\000\006\003\270\030\271\001\002\000\006\027\130\037" +
    "\263\001\002\000\006\003\264\030\265\001\002\000\004" +
    "\030\uff95\001\002\000\046\003\uff98\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\012\uff98\013\uff98\014\uff98\016\uff98" +
    "\021\uff98\022\uff98\024\uff98\025\uff98\026\uff98\040\uff98\041" +
    "\uff98\053\uff98\001\002\000\004\030\267\001\002\000\046" +
    "\003\uff94\004\uff94\005\uff94\006\uff94\007\uff94\010\uff94\012" +
    "\uff94\013\uff94\014\uff94\016\uff94\021\uff94\022\uff94\024\uff94" +
    "\025\uff94\026\uff94\040\uff94\041\uff94\053\uff94\001\002\000" +
    "\004\030\uff97\001\002\000\046\003\uff99\004\uff99\005\uff99" +
    "\006\uff99\007\uff99\010\uff99\012\uff99\013\uff99\014\uff99\016" +
    "\uff99\021\uff99\022\uff99\024\uff99\025\uff99\026\uff99\040\uff99" +
    "\041\uff99\053\uff99\001\002\000\004\030\273\001\002\000" +
    "\046\003\uff96\004\uff96\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\012\uff96\013\uff96\014\uff96\016\uff96\021\uff96\022\uff96\024" +
    "\uff96\025\uff96\026\uff96\040\uff96\041\uff96\053\uff96\001\002" +
    "\000\022\036\107\053\112\054\076\055\105\056\104\057" +
    "\113\060\103\061\110\001\002\000\010\037\276\046\144" +
    "\047\142\001\002\000\004\040\032\001\002\000\050\003" +
    "\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb" +
    "\013\uffeb\014\uffeb\015\300\016\uffeb\021\uffeb\022\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\040\uffeb\041\uffeb\053\uffeb\001\002" +
    "\000\010\014\046\016\044\040\032\001\002\000\046\003" +
    "\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea" +
    "\013\uffea\014\uffea\016\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\026\uffea\040\uffea\041\uffea\053\uffea\001\002\000\046" +
    "\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9\012" +
    "\uffe9\013\uffe9\014\uffe9\016\uffe9\021\uffe9\022\uffe9\024\uffe9" +
    "\025\uffe9\026\uffe9\040\uffe9\041\uffe9\053\uffe9\001\002\000" +
    "\004\053\304\001\002\000\004\037\305\001\002\000\004" +
    "\040\306\001\002\000\010\017\311\020\307\041\uffdb\001" +
    "\002\000\004\031\327\001\002\000\004\041\326\001\002" +
    "\000\010\054\314\056\313\057\312\001\002\000\004\031" +
    "\323\001\002\000\004\031\320\001\002\000\004\031\315" +
    "\001\002\000\004\040\032\001\002\000\010\017\311\020" +
    "\307\041\uffdb\001\002\000\004\041\uffdf\001\002\000\004" +
    "\040\032\001\002\000\010\017\311\020\307\041\uffdb\001" +
    "\002\000\004\041\uffde\001\002\000\004\040\032\001\002" +
    "\000\010\017\311\020\307\041\uffdb\001\002\000\004\041" +
    "\uffdd\001\002\000\046\003\uffe8\004\uffe8\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\012\uffe8\013\uffe8\014\uffe8\016\uffe8\021" +
    "\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\040\uffe8\041\uffe8" +
    "\053\uffe8\001\002\000\004\040\032\001\002\000\004\041" +
    "\uffdc\001\002\000\012\003\uffd2\027\uffd2\030\uffd2\052\341" +
    "\001\002\000\010\003\334\027\333\030\335\001\002\000" +
    "\004\053\340\001\002\000\004\030\uffbe\001\002\000\046" +
    "\003\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\012" +
    "\uffc1\013\uffc1\014\uffc1\016\uffc1\021\uffc1\022\uffc1\024\uffc1" +
    "\025\uffc1\026\uffc1\040\uffc1\041\uffc1\053\uffc1\001\002\000" +
    "\004\030\337\001\002\000\046\003\uffbd\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\012\uffbd\013\uffbd\014\uffbd\016" +
    "\uffbd\021\uffbd\022\uffbd\024\uffbd\025\uffbd\026\uffbd\040\uffbd" +
    "\041\uffbd\053\uffbd\001\002\000\010\003\uffd1\027\uffd1\030" +
    "\uffd1\001\002\000\022\036\107\053\112\054\076\055\105" +
    "\056\104\057\113\060\103\061\110\001\002\000\006\003" +
    "\343\030\344\001\002\000\004\030\uffbc\001\002\000\046" +
    "\003\uffc0\004\uffc0\005\uffc0\006\uffc0\007\uffc0\010\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\016\uffc0\021\uffc0\022\uffc0\024\uffc0" +
    "\025\uffc0\026\uffc0\040\uffc0\041\uffc0\053\uffc0\001\002\000" +
    "\004\030\346\001\002\000\046\003\uffbb\004\uffbb\005\uffbb" +
    "\006\uffbb\007\uffbb\010\uffbb\012\uffbb\013\uffbb\014\uffbb\016" +
    "\uffbb\021\uffbb\022\uffbb\024\uffbb\025\uffbb\026\uffbb\040\uffbb" +
    "\041\uffbb\053\uffbb\001\002\000\046\003\ufff4\004\ufff4\005" +
    "\ufff4\006\ufff4\007\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4" +
    "\016\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4\026\ufff4\040" +
    "\ufff4\041\ufff4\053\ufff4\001\002\000\012\003\354\030\355" +
    "\046\144\047\142\001\002\000\004\030\ufff2\001\002\000" +
    "\004\030\353\001\002\000\046\003\ufff1\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\010\ufff1\012\ufff1\013\ufff1\014\ufff1\016" +
    "\ufff1\021\ufff1\022\ufff1\024\ufff1\025\ufff1\026\ufff1\040\ufff1" +
    "\041\ufff1\053\ufff1\001\002\000\004\030\ufff0\001\002\000" +
    "\046\003\ufff3\004\ufff3\005\ufff3\006\ufff3\007\ufff3\010\ufff3" +
    "\012\ufff3\013\ufff3\014\ufff3\016\ufff3\021\ufff3\022\ufff3\024" +
    "\ufff3\025\ufff3\026\ufff3\040\ufff3\041\ufff3\053\ufff3\001\002" +
    "\000\004\030\357\001\002\000\046\003\uffef\004\uffef\005" +
    "\uffef\006\uffef\007\uffef\010\uffef\012\uffef\013\uffef\014\uffef" +
    "\016\uffef\021\uffef\022\uffef\024\uffef\025\uffef\026\uffef\040" +
    "\uffef\041\uffef\053\uffef\001\002\000\022\036\107\053\112" +
    "\054\076\055\105\056\104\057\113\060\103\061\110\001" +
    "\002\000\010\037\362\046\144\047\142\001\002\000\004" +
    "\040\032\001\002\000\046\003\uffee\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\010\uffee\012\uffee\013\uffee\014\uffee\016\uffee" +
    "\021\uffee\022\uffee\024\uffee\025\uffee\026\uffee\040\uffee\041" +
    "\uffee\053\uffee\001\002\000\004\030\ufff8\001\002\000\046" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\016\ufffa\021\ufffa\022\ufffa\024\ufffa" +
    "\025\ufffa\026\ufffa\040\ufffa\041\ufffa\053\ufffa\001\002\000" +
    "\004\030\367\001\002\000\046\003\ufff7\004\ufff7\005\ufff7" +
    "\006\ufff7\007\ufff7\010\ufff7\012\ufff7\013\ufff7\014\ufff7\016" +
    "\ufff7\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\040\ufff7" +
    "\041\ufff7\053\ufff7\001\002\000\006\027\uffce\037\uffce\001" +
    "\002\000\014\004\021\005\027\006\022\007\026\010\023" +
    "\001\002\000\004\040\032\001\002\000\016\004\ufffb\005" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002\000\004" +
    "\053\375\001\002\000\006\027\uffcd\037\uffcd\001\002\000" +
    "\004\002\000\001\002\000\004\036\u0100\001\002\000\004" +
    "\037\u0101\001\002\000\004\040\032\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0101\000\014\002\011\003\003\004\006\005\005\006" +
    "\014\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\003\u0102\004\006\005\005\006\014\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\023\013\024" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\030\001\001\000\002\001" +
    "\001\000\030\007\046\010\035\012\055\013\042\025\050" +
    "\026\036\027\033\030\054\032\040\036\060\037\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\016\347\017\105\020\076\021\113" +
    "\022\115\023\077\031\101\035\114\001\001\000\004\033" +
    "\331\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\007" +
    "\046\010\035\012\055\013\042\026\244\027\033\030\054" +
    "\032\040\036\060\037\032\001\001\000\002\001\001\000" +
    "\004\044\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\051\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\110\016\100\017\105\020\076\021\113\022\115" +
    "\023\077\031\101\035\114\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\014\200\016\100\017\105" +
    "\020\076\021\113\022\115\023\077\031\101\035\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\121\031\101\035\114\001\001" +
    "\000\010\022\120\031\101\035\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\014\123\016\100\017\105" +
    "\020\076\021\113\022\115\023\077\031\101\034\126\035" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\057\135\001\001\000\002\001\001\000\024\014\134\016" +
    "\100\017\105\020\076\021\113\022\115\023\077\031\101" +
    "\035\114\001\001\000\004\060\132\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\016\140\017" +
    "\105\020\076\021\113\022\115\023\077\031\101\035\114" +
    "\001\001\000\002\001\001\000\020\017\105\020\076\021" +
    "\113\022\115\023\177\031\101\035\114\001\001\000\006" +
    "\013\167\015\166\001\001\000\020\017\105\020\076\021" +
    "\113\022\115\023\144\031\101\035\114\001\001\000\002" +
    "\001\001\000\016\017\164\020\076\021\113\022\115\031" +
    "\101\035\114\001\001\000\016\017\147\020\076\021\113" +
    "\022\115\031\101\035\114\001\001\000\002\001\001\000" +
    "\014\020\163\021\113\022\115\031\101\035\114\001\001" +
    "\000\014\020\162\021\113\022\115\031\101\035\114\001" +
    "\001\000\014\020\161\021\113\022\115\031\101\035\114" +
    "\001\001\000\014\020\154\021\113\022\115\031\101\035" +
    "\114\001\001\000\002\001\001\000\012\021\160\022\115" +
    "\031\101\035\114\001\001\000\012\021\157\022\115\031" +
    "\101\035\114\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\014\172\016\100\017" +
    "\105\020\076\021\113\022\115\023\077\031\101\035\114" +
    "\001\001\000\002\001\001\000\004\007\174\001\001\000" +
    "\002\001\001\000\024\014\176\016\100\017\105\020\076" +
    "\021\113\022\115\023\077\031\101\035\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\014\203\016\100\017\105\020\076\021" +
    "\113\022\115\023\077\031\101\035\114\001\001\000\002" +
    "\001\001\000\022\016\205\017\105\020\076\021\113\022" +
    "\115\023\077\031\101\035\114\001\001\000\002\001\001" +
    "\000\006\013\167\015\207\001\001\000\002\001\001\000" +
    "\004\007\211\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\014\123\016" +
    "\100\017\105\020\076\021\113\022\115\023\077\031\101" +
    "\034\223\035\114\001\001\000\002\001\001\000\004\052" +
    "\221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\041\242\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\247\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\014\123\016\100" +
    "\017\105\020\076\021\113\022\115\023\077\031\101\034" +
    "\261\035\114\001\001\000\024\014\253\016\100\017\105" +
    "\020\076\021\113\022\115\023\077\031\101\035\114\001" +
    "\001\000\002\001\001\000\004\050\256\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\056\265" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\016\274\017\105\020" +
    "\076\021\113\022\115\023\077\031\101\035\114\001\001" +
    "\000\002\001\001\000\004\007\276\001\001\000\002\001" +
    "\001\000\006\007\300\012\301\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\315\001\001" +
    "\000\004\024\316\001\001\000\002\001\001\000\004\007" +
    "\320\001\001\000\004\024\321\001\001\000\002\001\001" +
    "\000\004\007\323\001\001\000\004\024\324\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\327\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\335\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\014\341\016\100\017\105\020\076\021\113\022\115" +
    "\023\077\031\101\035\114\001\001\000\002\001\001\000" +
    "\004\047\344\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\042\351\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\043\355\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\016\360\017\105\020\076" +
    "\021\113\022\115\023\077\031\101\035\114\001\001\000" +
    "\002\001\001\000\004\007\362\001\001\000\002\001\001" +
    "\000\004\040\365\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\373" +
    "\001\001\000\004\007\372\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\u0101\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static kcScanner s;
    public static Generate generateCode;
    public static int p = 0;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
   		super(s=new kcScanner(input));
   		generateCode = new Generate();
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              ATD_ASTTreeDeclaration RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ATD_ASTTreeDeclaration(mFD,parser.generateCode); RESULT.setLine(mFDleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ATD_ASTTreeDeclaration start_val = (ATD_ASTTreeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= function_definition main_function_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		functionDefinition fD = (functionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mF = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunctionAndOthers(fD,mF,parser.generateCode); RESULT.setLine(mFleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function 
            {
              mainFunctionDeclaration RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunction mF = (mainFunction)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunction(mF,parser.generateCode); RESULT.setLine(mFleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // main_function ::= VOID MAIN OPAR CPAR compound_statement 
            {
              mainFunction RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MF_MainFunction(new FTS_Type(Void.TYPE),cS,parser.generateCode);RESULT.setLine(cSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function_definition ::= function_type_specifier ID OPAR CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,cS,parser.generateCode);RESULT.setLine(tSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function_definition ::= function_type_specifier ID OPAR type_parameter_list CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		functionTypeSpecifier tS = (functionTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,pL,cS,parser.generateCode);RESULT.setLine(tSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // jump_iteration_statement ::= CONTINUE END 
            {
              jumpIterationStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Continue();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // jump_iteration_statement ::= BREAK END 
            {
              jumpIterationStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Break();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$0 ::= 
            {
              jumpIterationStatement RESULT =null;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_iteration_statement ::= CONTINUE error NT$0 END 
            {
              jumpIterationStatement RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (jumpIterationStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Continue();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$1 ::= 
            {
              jumpIterationStatement RESULT =null;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // jump_iteration_statement ::= BREAK error NT$1 END 
            {
              jumpIterationStatement RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (jumpIterationStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JIS_Break();RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_iteration_statement",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // jump_function_statement ::= RETURN END 
            {
              jumpFunctionStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFS_EmptyReturn(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // jump_function_statement ::= RETURN conditional_expression END 
            {
              jumpFunctionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JFS_Return(cE); RESULT.setLine(cEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$2 ::= 
            {
              jumpFunctionStatement RESULT =null;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // jump_function_statement ::= RETURN error NT$2 END 
            {
              jumpFunctionStatement RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (jumpFunctionStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new JFS_EmptyReturn(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NT$3 ::= 
            {
              jumpFunctionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // jump_function_statement ::= RETURN conditional_expression error NT$3 END 
            {
              jumpFunctionStatement RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (jumpFunctionStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new JFS_Return(cE); RESULT.setLine(cEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_function_statement",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // iteration_statement ::= WHILE OPAR conditional_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_While(cE,cS, parser.generateCode); RESULT.setLine(cEleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // iteration_statement ::= FOR OPAR variable_type_specifier ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(tS,id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // iteration_statement ::= FOR OPAR ID ASSIGN expression END conditional_expression END assignment_expression CPAR compound_statement 
            {
              iterationStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_If(cE,cS,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE compound_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cSE = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfElse(cE,cS,cSE,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // selection_statement ::= IF OPAR conditional_expression CPAR compound_statement ELSE selection_statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfSS(cE,cS,sS,parser.generateCode); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // selection_statement ::= SWITCH OPAR ID CPAR OCBRA labeled_statement CCBRA 
            {
              selectionStatement RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SS_Switch(id,lS,parser.generateCode);RESULT.setLine(idleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // statement_list ::= statement 
            {
              statementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_Statement(stm,parser.generateCode); RESULT.setLine(stmleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // statement_list ::= statement_list statement 
            {
              statementList RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_StatementList(sL,stm,parser.generateCode); RESULT.setLine(stmleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compound_statement ::= OCBRA CCBRA 
            {
              compoundStatement RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CS_Empty(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_StatementList(sL,parser.generateCode); RESULT.setLine(sLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$4 ::= 
            {
              compoundStatement RESULT =null;
 parser.report_error("You forgot a }","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$4",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // compound_statement ::= OCBRA error NT$4 CCBRA 
            {
              compoundStatement RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (compoundStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CS_Empty(); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$5 ::= 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a }","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$5",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // compound_statement ::= OCBRA statement_list error NT$5 CCBRA 
            {
              compoundStatement RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (compoundStatement) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new CS_StatementList(sL,parser.generateCode); RESULT.setLine(sLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // labeled_statement ::= CASE INT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(integerContent,cS,lS,2); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // labeled_statement ::= CASE CHARCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(charContent,cS,lS,1); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // labeled_statement ::= CASE STRINGCONTENT COLON compound_statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(stringContent,cS,lS,4); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // labeled_statement ::= DEFAULT COLON compound_statement 
            {
              labeledStatement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Default(cS); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // labeled_statement ::= 
            {
              labeledStatement RESULT =null;
		 RESULT = new LS_Lambda(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // statement ::= compound_statement 
            {
              Statement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_CompoundStatement(cS); RESULT.setLine(cSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // statement ::= selection_statement 
            {
              Statement RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_SelectionStatement(sS,parser.generateCode);RESULT.setLine(sSleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // statement ::= iteration_statement 
            {
              Statement RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		iterationStatement iS = (iterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IterationStatement(iS); RESULT.setLine(iSleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // statement ::= declaration 
            {
              Statement RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_Declaration(d); RESULT.setLine(dleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // statement ::= io_expressions 
            {
              Statement RESULT =null;
		int iEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ioExpressions iE = (ioExpressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IOExpression(iE,parser.generateCode); RESULT.setLine(iEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // statement ::= function_calls_declaration 
            {
              Statement RESULT =null;
		int fcdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsDeclaration fcd = (functionCallsDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_FCD(fcd); RESULT.setLine(fcdleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // statement ::= jump_iteration_statement 
            {
              Statement RESULT =null;
		int jisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jisright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpIterationStatement jis = (jumpIterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JIS(jis); RESULT.setLine(jisleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // statement ::= jump_function_statement 
            {
              Statement RESULT =null;
		int jfsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jfsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpFunctionStatement jfs = (jumpFunctionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JFS(jfs); RESULT.setLine(jfsleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // identifier_list ::= ID 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_Id(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // identifier_list ::= identifier_list COMMA ID 
            {
              identifierList RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_IdentifierList(iL,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parameter_list ::= expression 
            {
              parameterList RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_Expression(exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parameter_list ::= parameter_list COMMA expression 
            {
              parameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_ExpressionList(pL,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // type_parameter_list ::= variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_Id(vTS,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_parameter_list ::= type_parameter_list COMMA variable_type_specifier ID 
            {
              typeParameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		typeParameterList pL = (typeParameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TPL_List(pL,vTS,id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_parameter_list",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // function_type_specifier ::= CHAR 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Character.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // function_type_specifier ::= INTEGER 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Integer.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // function_type_specifier ::= DOUBLE 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Double.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // function_type_specifier ::= STRING 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(String.class.getSimpleName()); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // function_type_specifier ::= BOOLEAN 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Boolean.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // function_type_specifier ::= VOID 
            {
              functionTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FTS_Type(Void.TYPE); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_type_specifier",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable_type_specifier ::= CHAR 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Character.TYPE,Character.SIZE/8);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variable_type_specifier ::= INTEGER 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Integer.TYPE,Integer.SIZE/8);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_type_specifier ::= DOUBLE 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Double.TYPE,Double.SIZE/8); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_type_specifier ::= STRING 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(String.class.getSimpleName(),255);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // variable_type_specifier ::= BOOLEAN 
            {
              variableTypeSpecifier RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VTS_Type(Boolean.TYPE,1);RESULT.setLine(tleft); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declaration ::= variable_type_specifier identifier_list END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // declaration ::= variable_type_specifier ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // declaration ::= ID ASSIGN expression END 
            {
              Declaration RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NT$6 ::= 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$6",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // declaration ::= variable_type_specifier identifier_list error NT$6 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NT$7 ::= 
            {
              Declaration RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$7",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaration ::= variable_type_specifier ID ASSIGN expression error NT$7 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		variableTypeSpecifier vTS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // NT$8 ::= 
            {
              Declaration RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$8",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // declaration ::= ID ASSIGN expression error NT$8 END 
            {
              Declaration RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Declaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignment_expression ::= variable_type_specifier ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		variableTypeSpecifier tS = (variableTypeSpecifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(tS,stringValue,exp); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // assignment_expression ::= ID ASSIGN expression 
            {
              assignmentExpression RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AEX_Assignation(stringValue,exp); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional_expression ::= equality_expression 
            {
              conditionalExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_equalityExpression(eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"&&",eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"||",eE,parser.generateCode); RESULT.setLine(eEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // equality_expression ::= relational_expression 
            {
              equalityExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_relationalExpression(rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // equality_expression ::= equality_expression EQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"==",rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"!=",rE,parser.generateCode); RESULT.setLine(rEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // relational_expression ::= additive_expression 
            {
              relationalExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_additiveExpression(aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // relational_expression ::= relational_expression LESS additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<=",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">=",aE,parser.generateCode); RESULT.setLine(aEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // additive_expression ::= multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_multiplicativeExpression(mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"+",mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"-",mE,parser.generateCode); RESULT.setLine(mEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multiplicative_expression ::= basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_basicExpression(bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"*",bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"/",bE,parser.generateCode); RESULT.setLine(bEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // io_expressions ::= PRINT OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // NT$9 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$9",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // io_expressions ::= SCAN OPAR ID CPAR error NT$9 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$10 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$10",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR error NT$10 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$11 ::= 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$11",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA parameter_list CPAR error NT$11 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // NT$12 ::= 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$12",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // io_expressions ::= PRINT OPAR ID CPAR error NT$12 END 
            {
              ioExpressions RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (ioExpressions) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // function_calls_declaration ::= ID OPAR CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // function_calls_declaration ::= ID OPAR parameter_list CPAR END 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // NT$13 ::= 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$13",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // function_calls_declaration ::= ID OPAR CPAR error NT$13 END 
            {
              functionCallsDeclaration RESULT =null;
              // propagate RESULT from NT$13
                RESULT = (functionCallsDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // NT$14 ::= 
            {
              functionCallsDeclaration RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$14",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // function_calls_declaration ::= ID OPAR parameter_list CPAR error NT$14 END 
            {
              functionCallsDeclaration RESULT =null;
              // propagate RESULT from NT$14
                RESULT = (functionCallsDeclaration) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_declaration",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // function_calls_expression ::= ID OPAR CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // function_calls_expression ::= ID OPAR parameter_list CPAR 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // NT$15 ::= 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
 parser.report_error("You forgot a )","End of statement Syntax Error");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$15",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // function_calls_expression ::= ID OPAR error NT$15 CPAR 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$15
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		 RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // NT$16 ::= 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
 parser.report_error("You forgot a )","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$16",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // function_calls_expression ::= ID OPAR parameter_list error NT$16 CPAR 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$16
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // expression ::= conditional_expression 
            {
              Expression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Expression(cE,parser.generateCode); RESULT.setLine(cEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // basic_expression ::= primary_expression 
            {
              basicExpression RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression pE = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_primaryExpression(pE,parser.generateCode); RESULT.setLine(pEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // basic_expression ::= function_calls_expression 
            {
              basicExpression RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_FCE(fCE,parser.generateCode); RESULT.setLine(fCEleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // primary_expression ::= ID 
            {
              primaryExpression RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Id(identifierValue); RESULT.setLine(identifierValueleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // primary_expression ::= INT 
            {
              primaryExpression RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(integerContent,2); RESULT.setLine(integerContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // primary_expression ::= STRINGCONTENT 
            {
              primaryExpression RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(stringContent,4); RESULT.setLine(stringContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // primary_expression ::= DOUBLEVALUE 
            {
              primaryExpression RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(doubleContent,3); RESULT.setLine(doubleContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // primary_expression ::= CHARCONTENT 
            {
              primaryExpression RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(charContent,1); RESULT.setLine(charContentleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // primary_expression ::= TRUE 
            {
              primaryExpression RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean t = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content("true",5); RESULT.setLine(tleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // primary_expression ::= FALSE 
            {
              primaryExpression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean f = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content("false",5); RESULT.setLine(fleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // primary_expression ::= OPAR expression CPAR 
            {
              primaryExpression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PE_Expression(exp,parser.generateCode); RESULT.setLine(expleft);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
