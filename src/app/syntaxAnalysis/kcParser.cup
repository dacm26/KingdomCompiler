package app.syntaxAnalysis;

import java_cup.runtime.*; 
import app.lexicAnalysis.*;

/*AST Imports*/

import app.intermediateCode.*;
import AST.primaryExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.expression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.functionCallsDeclaration.*;
import AST.ioExpressions.*;
import AST.assignmentExpression.*;
import AST.declaration.*;
import AST.globalDeclaration.*;
import AST.variableTypeSpecifier.*;
import AST.functionTypeSpecifier.*;
import AST.typeParameterList.*;
import AST.parameterList.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.labeledStatement.*;
import AST.compoundStatement.*;
import AST.statementList.*;
import AST.selectionStatement.*;
import AST.iterationStatement.*;
import AST.jumpFunctionStatement.*;
import AST.jumpIterationStatement.*;
import AST.functionDefinition.*;
import AST.mainFunction.*;
import AST.mainFunctionDeclaration.*;
import AST.astTreeDeclaration.*;

parser code {:
    public static kcScanner s;
    public static Generate generateCode;
    public static int p = 0;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
   		super(s=new kcScanner(input));
   		generateCode = new Generate();
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }

:};


/* Variables */
terminal INTEGER, BOOLEAN, DOUBLE, CHAR, STRING, VOID;

/* Iterations Structures */
terminal FOR, WHILE;

/* Decision Structures */
terminal IF, ELSE, SWITCH, CASE, DEFAULT, BREAK, CONTINUE;

/* Functions */
terminal MAIN, RETURN;

/* I/O */
terminal PRINT, SCAN;

/* Others */
terminal COMMA, END, COLON;

/* Arithmetic operators */
terminal ADD, MIN, MUL, DIV;

/* Grouping symbols */
terminal OPAR, CPAR, OCBRA, CCBRA;

/* Arithmetic operators */
terminal GREATEREQ, LESSEQ, GREATER, LESS;

/* Logic operators */
terminal OR, AND, NEQU, EQU;

/* Assignment operator */
terminal ASSIGN;

/* Values */
terminal String ID;
terminal Integer INT;
terminal Double DOUBLEVALUE;
terminal Character CHARCONTENT;
terminal String STRINGCONTENT;
terminal Boolean TRUE;
terminal Boolean FALSE;

/* Non terminals */
non terminal ATD_ASTTreeDeclaration ast_tree_declaration;
non terminal mainFunctionDeclaration main_function_declaration;
//non terminal globalDeclaration global_declaration;
non terminal mainFunction main_function;
//non terminal externalDeclaration external_declaration;
non terminal functionDefinition function_definition;
non terminal functionTypeSpecifier function_type_specifier;
non terminal compoundStatement compound_statement;
non terminal iterationStatement iteration_statement;
non terminal typeParameterList type_parameter_list;
non terminal selectionStatement selection_statement;
non terminal variableTypeSpecifier variable_type_specifier;
non terminal Expression expression;
non terminal assignmentExpression assignment_expression;
non terminal conditionalExpression conditional_expression;
non terminal relationalExpression relational_expression;
non terminal additiveExpression additive_expression;
non terminal multiplicativeExpression multiplicative_expression;
non terminal basicExpression basic_expression;
non terminal equalityExpression equality_expression;
non terminal labeledStatement labeled_statement;
non terminal statementList statement_list;
non terminal Statement statement;
non terminal Declaration declaration;
non terminal ioExpressions io_expressions;
non terminal functionCallsExpression function_calls_expression;
non terminal functionCallsDeclaration function_calls_declaration;
non terminal identifierList identifier_list;
non terminal parameterList parameter_list;
non terminal primaryExpression primary_expression;
non terminal jumpIterationStatement jump_iteration_statement;
non terminal jumpFunctionStatement jump_function_statement ;


/* Precedences */
precedence right ASSIGN;
precedence left ADD, MIN;
precedence left MUL, DIV;
precedence left GREATER, LESS;
precedence left GREATEREQ, LESSEQ;
precedence nonassoc ELSE;

/*AST Declaration*/
ast_tree_declaration ::= main_function_declaration:mFD        										{: RESULT = new ATD_ASTTreeDeclaration(mFD,parser.generateCode); RESULT.setLine(mFDleft);:}                                                                      
	;

/*Main Function Declaration*/
/*Por los momentos, se ignora las variables globales*/
main_function_declaration ::= /*global_declaration:d main_function_declaration:mFD       			{: RESULT = new MFD_GlobalDeclaration(d,mFD); :}
    |*/ function_definition:fD main_function_declaration:mF  										{: RESULT = new MFD_MainFunctionAndOthers(fD,mF,parser.generateCode); RESULT.setLine(mFleft);:}                            						
    |  	main_function:mF																			{: RESULT = new MFD_MainFunction(mF,parser.generateCode); RESULT.setLine(mFleft);:}												
    ;

/*Main Function*/
main_function ::= VOID MAIN OPAR CPAR compound_statement:cS											{: RESULT = new MF_MainFunction(new FTS_Type(Void.TYPE),cS,parser.generateCode);RESULT.setLine(cSleft); :}				
	;

/*Function Declaration*/
function_definition ::= function_type_specifier:tS ID:id OPAR CPAR 
	compound_statement:cS 															    			{: RESULT = new FD_FunctionDefinition(tS,id,cS,parser.generateCode);RESULT.setLine(tSleft); :}  
	| function_type_specifier:tS ID:id OPAR type_parameter_list:pL CPAR
	compound_statement:cS 						 													{: RESULT = new FD_FunctionDefinition(tS,id,pL,cS,parser.generateCode);RESULT.setLine(tSleft); :}  
	;

/*Jump Statements*/
jump_iteration_statement ::= CONTINUE END :t                                    					    {: RESULT = new JIS_Continue();RESULT.setLine(tleft); :}
	| BREAK END :t                                                      								{: RESULT = new JIS_Break();RESULT.setLine(tleft); :}
	;

jump_function_statement ::= RETURN END:t                                                      		{: RESULT = new JFS_EmptyReturn(); RESULT.setLine(tleft);:}
	| RETURN conditional_expression:cE END                                           				{: RESULT = new JFS_Return(cE); RESULT.setLine(cEleft);:}
	;

/*Iteration Statements*/
iteration_statement ::=   WHILE OPAR conditional_expression:cE CPAR compound_statement:cS			{: RESULT = new IT_While(cE,cS, parser.generateCode); RESULT.setLine(cEleft); :}
	| FOR OPAR variable_type_specifier:tS ID:id ASSIGN expression:exp END                        
      conditional_expression:cE1 END assignment_expression:aE CPAR 
      compound_statement:cS 																		{: RESULT = new IT_For(tS,id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);:}
    | FOR OPAR ID:id ASSIGN expression:exp END conditional_expression:cE1 END 
    assignment_expression:aE CPAR compound_statement:cS 											{: RESULT = new IT_For(id,exp,cE1,aE,cS);  RESULT.setLine(cE1left);:} 				
    ;

/*Selection Statements*/
selection_statement ::=   IF OPAR conditional_expression:cE CPAR compound_statement:cS		        {: RESULT = new SS_If(cE,cS,parser.generateCode); RESULT.setLine(cSleft);:}     
    | IF OPAR conditional_expression:cE CPAR compound_statement:cS 
    ELSE compound_statement:cSE			               												{: RESULT = new SS_IfElse(cE,cS,cSE,parser.generateCode); RESULT.setLine(cSleft);:}
    | IF OPAR conditional_expression:cE CPAR compound_statement:cS ELSE selection_statement:sS 		{: RESULT = new SS_IfSS(cE,cS,sS,parser.generateCode); RESULT.setLine(cSleft);:}
    | SWITCH OPAR ID:id CPAR OCBRA labeled_statement:lS CCBRA                   					{: RESULT = new SS_Switch(id,lS,parser.generateCode);RESULT.setLine(idleft); :}
	;

/*Statement List*/
statement_list ::=   statement:stm                                           						{: RESULT = new SL_Statement(stm,parser.generateCode); RESULT.setLine(stmleft);:}
	| statement_list:sL statement:stm                                       						{: RESULT = new SL_StatementList(sL,stm,parser.generateCode); RESULT.setLine(stmleft);:}
	;

/*Compound Statements*/
compound_statement ::=   OCBRA CCBRA:t                                 								{: RESULT = new CS_Empty(); RESULT.setLine(tleft);:}
	| OCBRA statement_list:sL CCBRA                                     							{: RESULT = new CS_StatementList(sL,parser.generateCode); RESULT.setLine(sLleft);:}
	| OCBRA statement_list:sL error 																{: parser.report_error("You forgot a }","End of statement Syntax Error"); :}
	CCBRA																							{: RESULT = new CS_StatementList(sL,parser.generateCode); RESULT.setLine(sLleft);:}
	;

/*Label Statement*/
labeled_statement ::=   CASE INT:integerContent COLON compound_statement:cS labeled_statement:lS	{: RESULT = new LS_Case(integerContent,cS,lS,2); RESULT.setLine(cSleft);:}
	| CASE CHARCONTENT:charContent COLON compound_statement:cS labeled_statement:lS	   				{: RESULT = new LS_Case(charContent,cS,lS,1); RESULT.setLine(cSleft);:}
	| CASE STRINGCONTENT:stringContent COLON  compound_statement:cS labeled_statement:lS 			{: RESULT = new LS_Case(stringContent,cS,lS,4); RESULT.setLine(cSleft);:}
	| DEFAULT COLON compound_statement:cS                 											{: RESULT = new LS_Default(cS); RESULT.setLine(cSleft);:}
	|																								{: RESULT = new LS_Lambda(); :}
	;

/*Statement Generalization*/
statement ::=   compound_statement:cS                                            					{: RESULT = new S_CompoundStatement(cS); RESULT.setLine(cSleft);:}		//Done
	| selection_statement:sS 																		{: RESULT = new S_SelectionStatement(sS,parser.generateCode);RESULT.setLine(sSleft); :}    //Done                                 										
	| iteration_statement:iS                                           								{: RESULT = new S_IterationStatement(iS); RESULT.setLine(iSleft);:}	//Done
	| declaration:d                                                                                 {: RESULT = new S_Declaration(d); RESULT.setLine(dleft);:}			//Done
	| io_expressions:iE                                                                             {: RESULT = new S_IOExpression(iE,parser.generateCode); RESULT.setLine(iEleft);:}			//Done
	| function_calls_declaration:fcd                                                                {: RESULT = new S_FCD(fcd); RESULT.setLine(fcdleft);:}					//Done				
	| jump_iteration_statement:jis																	{: RESULT = new S_JIS(jis); RESULT.setLine(jisleft);:}					//Not Today
	| jump_function_statement:jfs																	{: RESULT = new S_JFS(jfs); RESULT.setLine(jfsleft);:}					//Not Today
	;

/*Identifier List*/
identifier_list ::=   ID:id                                                                         {: RESULT = new IL_Id(id); RESULT.setLine(idleft);:}
	| identifier_list:iL COMMA ID:id 																{: RESULT = new IL_IdentifierList(iL,id); RESULT.setLine(idleft);:}
	;
/*Parameter List*/
parameter_list ::=   expression:exp 																{: RESULT = new PL_Expression(exp,parser.generateCode); RESULT.setLine(expleft);:}
	| parameter_list:pL COMMA expression:exp 														{: RESULT = new PL_ExpressionList(pL,exp,parser.generateCode); RESULT.setLine(expleft);:}
	;

/*Parameter List with Variable Types*/
type_parameter_list ::=   variable_type_specifier:vTS ID:id                          				{: RESULT = new TPL_Id(vTS,id); RESULT.setLine(idleft);:}
	| type_parameter_list:pL COMMA variable_type_specifier:vTS ID:id                    			{: RESULT = new TPL_List(pL,vTS,id); RESULT.setLine(idleft);:}
	;

/*Function Type specifiers*/
function_type_specifier ::= CHAR  :t                                                                  {: RESULT = new FTS_Type(Character.TYPE); RESULT.setLine(tleft);:}
	| INTEGER 	:t																					{: RESULT = new FTS_Type(Integer.TYPE); RESULT.setLine(tleft);:}
	| DOUBLE 	:t																					{: RESULT = new FTS_Type(Double.TYPE); RESULT.setLine(tleft);:}
	| STRING  	:t																					{: RESULT = new FTS_Type(String.class.getSimpleName()); RESULT.setLine(tleft);:}
	| BOOLEAN 	:t																					{: RESULT = new FTS_Type(Boolean.TYPE); RESULT.setLine(tleft);:}
	| VOID 		:t																					{: RESULT = new FTS_Type(Void.TYPE); RESULT.setLine(tleft);:}
	;

/*Variable Type specifiers*/
variable_type_specifier ::= CHAR:t                                                                    {: RESULT = new VTS_Type(Character.TYPE,Character.SIZE/8);RESULT.setLine(tleft); :}                                               					
	| INTEGER :t                                                                                      {: RESULT = new VTS_Type(Integer.TYPE,Integer.SIZE/8);RESULT.setLine(tleft); :}                                								
	| DOUBLE :t                                                       								{: RESULT = new VTS_Type(Double.TYPE,Double.SIZE/8); RESULT.setLine(tleft);:}
	| STRING  :t                                                      								{: RESULT = new VTS_Type(String.class.getSimpleName(),255);RESULT.setLine(tleft); :}
    | BOOLEAN :t                                                      							    {: RESULT = new VTS_Type(Boolean.TYPE,1);RESULT.setLine(tleft); :}
	;

/*Global Variable Declarations*/
/*global_declaration ::= variable_type_specifier:vTS identifier_list:iL END      					{: RESULT = new GD_identifierList(vTS,iL);:}                             
	| variable_type_specifier:vTS  ID:stringValue ASSIGN expression:exp END 						{: RESULT = new GD_Assign(vTS,stringValue,exp); :}
	;
*/
/*Variable Declarations*/
declaration ::= variable_type_specifier:vTS identifier_list:iL END                                  {: RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);:} 
	| variable_type_specifier:vTS  ID:stringValue ASSIGN expression:exp END                         {: RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);:}
	| ID:stringValue ASSIGN expression:exp END                                                      {: RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);:}
	| variable_type_specifier:vTS identifier_list:iL error 											{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	END 																							{: RESULT = new D_identifierList(vTS,iL); RESULT.setLine(iLleft);:}
	| variable_type_specifier:vTS ID:stringValue ASSIGN expression:exp error 						{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	END 																							{: RESULT = new D_Assign(vTS,stringValue,exp,parser.generateCode); RESULT.setLine(expleft);:}
	| ID:stringValue ASSIGN expression:exp error 													{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	END 																							{: RESULT = new D_Assign(stringValue,exp,parser.generateCode); RESULT.setLine(expleft);:}
	;

/*Assignment Expression*/
assignment_expression ::= variable_type_specifier:tS ID:stringValue ASSIGN expression:exp 	    	{: RESULT = new AEX_Assignation(tS,stringValue,exp); RESULT.setLine(expleft);:}
	| ID:stringValue ASSIGN expression:exp 	                                           				{: RESULT = new AEX_Assignation(stringValue,exp); RESULT.setLine(expleft);:}
	;

/*Conditional Expression*/
conditional_expression ::= 	equality_expression:eE													{: RESULT = new CE_equalityExpression(eE,parser.generateCode); RESULT.setLine(eEleft);:}
	| conditional_expression:cE AND equality_expression:eE											{: RESULT = new CE_Operation(cE,"&&",eE,parser.generateCode); RESULT.setLine(eEleft);:}
	| conditional_expression:cE OR equality_expression:eE											{: RESULT = new CE_Operation(cE,"||",eE,parser.generateCode); RESULT.setLine(eEleft);:}
	;

equality_expression ::= relational_expression:rE 													{: RESULT = new EE_relationalExpression(rE,parser.generateCode); RESULT.setLine(rEleft);:}
	| equality_expression:eE EQU relational_expression:rE          									{: RESULT = new EE_Operation(eE,"==",rE,parser.generateCode); RESULT.setLine(rEleft);:}
	| equality_expression:eE NEQU relational_expression:rE 											{: RESULT = new EE_Operation(eE,"!=",rE,parser.generateCode); RESULT.setLine(rEleft);:}
	;

/*Relational Expressions*/
relational_expression ::=   additive_expression:aE                         							{: RESULT = new RE_additiveExpression(aE,parser.generateCode); RESULT.setLine(aEleft);:}
	| relational_expression:rE LESS additive_expression:aE                							{: RESULT = new RE_Operation(rE,"<",aE,parser.generateCode); RESULT.setLine(aEleft);:} 
	| relational_expression:rE GREATER additive_expression:aE             							{: RESULT = new RE_Operation(rE,">",aE,parser.generateCode); RESULT.setLine(aEleft);:} 
	| relational_expression:rE LESSEQ additive_expression:aE              							{: RESULT = new RE_Operation(rE,"<=",aE,parser.generateCode); RESULT.setLine(aEleft);:}
	| relational_expression:rE GREATEREQ additive_expression:aE           							{: RESULT = new RE_Operation(rE,">=",aE,parser.generateCode); RESULT.setLine(aEleft);:} 
	;

/*Additive Expression*/
additive_expression ::=   multiplicative_expression:mE                     							{: RESULT = new AE_multiplicativeExpression(mE,parser.generateCode); RESULT.setLine(mEleft);:} 
	| additive_expression:aE ADD multiplicative_expression:mE            							{: RESULT = new AE_Operation(aE,"+",mE,parser.generateCode); RESULT.setLine(mEleft);:} 
	| additive_expression:aE MIN multiplicative_expression:mE             							{: RESULT = new AE_Operation(aE,"-",mE,parser.generateCode); RESULT.setLine(mEleft);:} 
	;

/*Multiplicative Expression*/
multiplicative_expression ::=   basic_expression:bE                    								{: RESULT = new ME_basicExpression(bE,parser.generateCode); RESULT.setLine(bEleft);:}
	| multiplicative_expression:mE MUL basic_expression:bE                							{: RESULT = new ME_Operation(mE,"*",bE,parser.generateCode); RESULT.setLine(bEleft);:} 
	| multiplicative_expression:mE DIV basic_expression:bE                							{: RESULT = new ME_Operation(mE,"/",bE,parser.generateCode); RESULT.setLine(bEleft);:}               
	;

/*IO Expressions*/
io_expressions ::= PRINT OPAR STRINGCONTENT:stringContent CPAR END                                  {: RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);:}
    |   PRINT OPAR STRINGCONTENT:stringContent COMMA parameter_list:pL CPAR END                     {: RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);:}       		
    |   PRINT OPAR ID:identifierValue CPAR END                                                      {: RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);:}
    |   SCAN  OPAR ID:identifierValue CPAR END                                                      {: RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);:}
    | 	SCAN  OPAR ID:identifierValue CPAR error 													{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						{: RESULT = new IOE_Scan(identifierValue); RESULT.setLine(identifierValueleft);:}
    |	PRINT OPAR STRINGCONTENT:stringContent CPAR error 											{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						{: RESULT = new IOE_Print(stringContent,false); RESULT.setLine(stringContentleft);:}
    |	PRINT OPAR STRINGCONTENT:stringContent COMMA parameter_list:pL CPAR error 					{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						{: RESULT = new IOE_Print(stringContent,pL); RESULT.setLine(stringContentleft);:}	
    | 	PRINT OPAR ID:identifierValue CPAR error 													{: RESULT = new IOE_Print(identifierValue,true); RESULT.setLine(identifierValueleft);:}
    	END															
    ;

/*Function calls*/
function_calls_declaration ::= ID:id OPAR CPAR END 													{: RESULT = new FCD_FunctionCallsDeclaration(id, parser.generateCode); RESULT.setLine(idleft);:}
	| ID:id OPAR parameter_list:pL CPAR END 														{: RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);:}
	| ID:id OPAR CPAR error 																		{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	END 																						    {: RESULT = new FCD_FunctionCallsDeclaration(id,parser.generateCode); RESULT.setLine(idleft);:}
	| ID:id OPAR parameter_list:pL CPAR error 														{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	END 																							{: RESULT = new FCD_FunctionCallsDeclaration(id,pL, parser.generateCode); RESULT.setLine(idleft);:}
	;

/*Function calls*/
function_calls_expression ::= ID:id OPAR CPAR	 													{: RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);:}
	| ID:id OPAR parameter_list:pL CPAR 															{: RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);:}
	| ID:id OPAR error 																				{: parser.report_error("You forgot a )","End of statement Syntax Error");:}
	  CPAR																							{: RESULT = new FCE_FunctionCallsExpression(id); RESULT.setLine(idleft);:}
	| ID:id OPAR parameter_list:pL error 																{: parser.report_error("You forgot a )","End of statement Syntax Error"); :}
	  CPAR																							{: RESULT = new FCE_FunctionCallsExpression(id,pL,parser.generateCode); RESULT.setLine(idleft);:}
	;

/*Expression*/
expression ::= conditional_expression:cE															{: RESULT = new Expression(cE,parser.generateCode); RESULT.setLine(cEleft);:}
	;

/*Basic Expressions*/
basic_expression ::= primary_expression:pE                           								{: RESULT = new BE_primaryExpression(pE,parser.generateCode); RESULT.setLine(pEleft);:}
	| function_calls_expression:fCE 																{: RESULT = new BE_FCE(fCE,parser.generateCode); RESULT.setLine(fCEleft);:}
    ;


/*Primary Expression*/
primary_expression ::=  ID:identifierValue                              							{: RESULT = new PE_Id(identifierValue); RESULT.setLine(identifierValueleft);:}
	|   INT:integerContent                                            								{: RESULT = new PE_Content(integerContent,2); RESULT.setLine(integerContentleft);:}
	|   STRINGCONTENT:stringContent                                   								{: RESULT = new PE_Content(stringContent,4); RESULT.setLine(stringContentleft);:}
	|   DOUBLEVALUE:doubleContent                                     								{: RESULT = new PE_Content(doubleContent,3); RESULT.setLine(doubleContentleft);:}
	|   CHARCONTENT:charContent                                       								{: RESULT = new PE_Content(charContent,1); RESULT.setLine(charContentleft);:}
	|   TRUE:t                                            											{: RESULT = new PE_Content("true",5); RESULT.setLine(tleft);:}
	|   FALSE:f                                       												{: RESULT = new PE_Content("false",5); RESULT.setLine(fleft);:}
	|   OPAR expression:exp CPAR																	{: RESULT = new PE_Expression(exp,parser.generateCode); RESULT.setLine(expleft);:}
	;
