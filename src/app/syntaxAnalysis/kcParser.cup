package app.syntaxAnalysis;

import java_cup.runtime.*; 
import app.lexicAnalysis.*;

/*AST Imports*/

import AST.astTreeDeclaration.*;
import AST.mainFunctionDeclaration.*;
import AST.externalDeclaration.*;
import AST.mainFunction.*;
import AST.functionDefinition.*;
import AST.jumpStatement.*;
import AST.iterationStatement.*;
import AST.selectionStatement.*;
import AST.statementList.*;
import AST.declarationList.*;
import AST.compoundStatement.*;
import AST.labeledStatement.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.parameterList.*;
import AST.mainDeclarator.*;
import AST.typeSpecifier.*;
import AST.variableTypeSpecifier.*;
import AST.declaration.*;
import AST.assignmentExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.ioExpressions.*;
import AST.primaryExpression.*;

parser code {:
    public static kcScanner s;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
        super(s=new kcScanner(input));
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left) + ", column: "+(temp.right));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }

:};


/* Variables */
terminal INTEGER, BOOLEAN, DOUBLE, CHAR, STRING, VOID;

/* Iterations Structures */
terminal FOR, WHILE;

/* Decision Structures */
terminal IF, ELSE, SWITCH, CASE, DEFAULT, BREAK, CONTINUE;

/* Functions */
terminal MAIN, RETURN;

/* I/O */
terminal PRINT, SCAN;

/* Others */
terminal COMMA, END, COLON;

/* Arithmetic operators */
terminal ADD, MIN, MUL, DIV;

/* Grouping symbols */
terminal OPAR, CPAR, OCBRA, CCBRA;

/* Arithmetic operators */
terminal GREATEREQ, LESSEQ, GREATER, LESS;

/* Logic operators */
terminal OR, AND, NEQU, EQU;

/* Assignment operator */
terminal ASSIGN;

/* Values */
terminal String ID;
terminal Integer INT;
terminal Double DOUBLEVALUE;
terminal Character CHARCONTENT;
terminal String STRINGCONTENT;
terminal Boolean TRUE;
terminal Boolean FALSE;

/* Non terminals */
non terminal ast_tree_declaration;
non terminal main_function_declaration;
non terminal global_declaration;
non terminal main_function;
non terminal external_declaration;
non terminal function_definition;
non terminal function_type_specifier;
non terminal compound_statement;
non terminal iteration_statement;
non terminal type_parameter_list;
non terminal selection_statement;
non terminal variable_type_specifier;
non terminal expression;
non terminal assignment_expression;
non terminal conditional_expression;
non terminal relational_expression;
non terminal additive_expression;
non terminal multiplicative_expression;
non terminal basic_expression;
non terminal equality_expression;
non terminal labeled_statement;
non terminal statement_list;
non terminal statement;
non terminal declaration;
non terminal io_expressions;
non terminal function_calls_expression;
non terminal identifier_list;
non terminal parameter_list;
non terminal primary_expression;
non terminal jump_iteration_statement;
non terminal jump_function_statement;


/* Precedences */
precedence left ADD, MIN;
precedence left MUL, DIV;
precedence nonassoc ELSE;

/*AST Declaration*/
ast_tree_declaration ::= main_function_declaration:mFD        										{: /*Imprimir tree*/ :}                                                                      
	;

/*Main Function Declaration*/
main_function_declaration ::= global_declaration:d main_function_declaration:mFD       				{: /*RESULT = new ();*/ :}
    |  main_function:mF external_declaration:eD                             						{: /*RESULT = new ();*/ :}
    ;

/*External Function Declarations*/
external_declaration ::= function_definition:fD external_declaration:eD       						{: /*RESULT = new ();*/ :}
    |                                                                 								{: /*RESULT = new ();*/ :}
	;

/*Main Function*/
main_function ::= function_type_specifier:tS MAIN OPAR CPAR compound_statement:cS					{: /*RESULT = new ();*/ :}				
	;

/*Function Declaration*/
function_definition ::= function_type_specifier:tS ID:id OPAR CPAR 
	compound_statement:cS 															    			{: /*RESULT = new ();*/ :}  
	| function_type_specifier:tS ID:id OPAR type_parameter_list:pL CPAR
	compound_statement:cS 						 													{: /*RESULT = new ();*/ :}  
	;

/*Jump Statements*/
jump_iteration_statement ::= CONTINUE END                                     					    {: /*RESULT = new ();*/ :}
	| BREAK END                                                       								{: /*RESULT = new ();*/ :}
	;

jump_function_statement ::= RETURN END                                                      		{: /*RESULT = new ();*/ :}
	| RETURN conditional_expression:cE END                                           				{: /*RESULT = new ();*/ :}
	;

/*Iteration Statements*/
iteration_statement ::=   WHILE OPAR conditional_expression:cE CPAR compound_statement 				{: /*RESULT = new ();*/ :}
	| FOR OPAR variable_type_specifier:tS ID:id ASSIGN expression:exp END                        
      conditional_expression:cE1 END assignment_expression:aE CPAR 
      compound_statement:cS 																		{: /*RESULT = new ();*/ :}
    | FOR OPAR ID:id ASSIGN expression:exp END conditional_expression:cE1 END 
    assignment_expression:aE CPAR compound_statement:cS 											{: /*RESULT = new ();*/ :} 				
    ;

/*Selection Statements*/
selection_statement ::=   IF OPAR conditional_expression:cE CPAR compound_statement			        {: /*RESULT = new ();*/ :}     
    | IF OPAR conditional_expression:cE CPAR compound_statement 
    ELSE compound_statement 			               												{: /*RESULT = new ();*/ :}
    | SWITCH OPAR ID:id CPAR OCBRA labeled_statement:lS CCBRA                   					{: /*RESULT = new ();*/ :}
	;

/*Statement List*/
statement_list ::=   statement:stm                                           						{: /*RESULT = new ();*/ :}
	| statement_list:sL statement:stm                                       						{: /*RESULT = new ();*/ :}
	;

/*Compound Statements*/
compound_statement ::=   OCBRA CCBRA                                 								{: /*RESULT = new ();*/ :}
	| OCBRA statement_list:sL CCBRA                                     							{: /*RESULT = new ();*/ :}
	;

/*Label Statement*/
labeled_statement ::=   CASE INT:integerContent COLON compound_statement:cS labeled_statement:lS	{: /*RESULT = new ();*/ :}
	| CASE CHARCONTENT:charContent COLON compound_statement labeled_statement:lS	   				{: /*RESULT = new ();*/ :}
	| CASE STRINGCONTENT:stringContent COLON  compound_statement:cS labeled_statement:lS 			{: /*RESULT = new ();*/ :}
	| DEFAULT COLON compound_statement:cS                 											{: /*RESULT = new ();*/ :}
	|
	;

/*Statement Generalization*/
statement ::=   compound_statement:cS                                            					{: /*RESULT = new ();*/ :}
	| selection_statement:sS 																		{: /*RESULT = new ();*/ :}                                     										
	| iteration_statement:iS                                           								{: /*RESULT = new ();*/ :}
	| declaration:d                                                                                 {: /*RESULT = new ();*/ :}
	| io_expressions:iE                                                                             {: /*RESULT = new ();*/ :}
	| function_calls_expression                                                                     {: /*RESULT = new ();*/ :}
	| jump_iteration_statement																		{: /*RESULT = new ();*/ :}
	| jump_function_statement																		{: /*RESULT = new ();*/ :}
	;

/*Identifier List*/
identifier_list ::=   ID:id                                                                         {: /*RESULT = new ();*/ :}
	| identifier_list:iL COMMA ID:id 																{: /*RESULT = new ();*/ :}
	;

/*Parameter List*/
parameter_list ::=   expression:exp 																{: /*RESULT = new ();*/ :}
	| parameter_list:pL COMMA expression:exp 														{: /*RESULT = new ();*/ :}
	;

/*Parameter List with Variable Types*/
type_parameter_list ::=   variable_type_specifier:vTS ID:id                          				{: /*RESULT = new ();*/ :}
	| type_parameter_list:pL COMMA variable_type_specifier:vTS ID:id                    			{: /*RESULT = new ();*/ :}
	;

/*Function Type specifiers*/
function_type_specifier ::= CHAR                                                                    {: /*RESULT = new ();*/ :}
	| INTEGER 																						{: /*RESULT = new ();*/ :}
	| DOUBLE 																						{: /*RESULT = new ();*/ :}
	| STRING  																						{: /*RESULT = new ();*/ :}
	| BOOLEAN 																						{: /*RESULT = new ();*/ :}
	| VOID 																							{: /*RESULT = new ();*/ :}
	;

/*Variable Type specifiers*/
variable_type_specifier ::= CHAR                                                                    {: /*RESULT = new ();*/ :}                                               					
	| INTEGER                                                                                       {: /*RESULT = new ();*/ :}                                								
	| DOUBLE                                                        								{: /*RESULT = new ();*/ :}
	| STRING                                                        								{: /*RESULT = new ();*/ :}
    | BOOLEAN                                                       							    {: /*RESULT = new ();*/ :}
	;

/*Global Variable Declarations*/
global_declaration ::= variable_type_specifier:vTS identifier_list:iL END      						{: /*RESULT = new ();*/ :}                             
	| variable_type_specifier:vTS  ID:stringValue ASSIGN expression:exp END 						{: /*RESULT = new ();*/ :}
	;

/*Variable Declarations*/
declaration ::= variable_type_specifier:vTS identifier_list:iL END                                  {: /*RESULT = new ();*/ :} 
	| variable_type_specifier:vTS  ID:stringValue ASSIGN expression:exp END                         {: /*RESULT = new ();*/ :}
	| ID:stringValue ASSIGN expression:exp END                                                      {: /*RESULT = new ();*/ :}
	;

/*Assignment Expression*/
assignment_expression ::= variable_type_specifier:tS ID:stringValue ASSIGN expression:exp 	    	{: /*RESULT = new ();*/ :}
	| ID:stringValue ASSIGN expression:exp 	                                           				{: /*RESULT = new ();*/ :}
	;

/*Conditional Expression*/
conditional_expression ::= 	equality_expression:eE													{: /*RESULT = new ();*/ :}
	| conditional_expression:cE AND equality_expression:eE											{: /*RESULT = new ();*/ :}
	| conditional_expression:cE OR equality_expression:eE											{: /*RESULT = new ();*/ :}
	;

equality_expression ::= relational_expression:rE 													{: /*RESULT = new ();*/ :}
	| equality_expression:eE EQU relational_expression:rE          									{: /*RESULT = new ();*/ :}
	| equality_expression:eE NEQU relational_expression:rE 											{: /*RESULT = new ();*/ :}
	;

/*Relational Expressions*/
relational_expression ::=   additive_expression:aE                         							{: /*RESULT = new ();*/ :}
	| relational_expression:rE LESS additive_expression:aE                							{: /*RESULT = new ();*/ :} 
	| relational_expression:rE GREATER additive_expression:aE             							{: /*RESULT = new ();*/ :} 
	| relational_expression:rE LESSEQ additive_expression:aE              							{: /*RESULT = new ();*/ :}
	| relational_expression:rE GREATEREQ additive_expression:aE           							{: /*RESULT = new ();*/ :} 
	;

/*Additive Expression*/
additive_expression ::=   multiplicative_expression:mE                     							{: /*RESULT = new ();*/ :} 
	| additive_expression:aE ADD multiplicative_expression:mE            							{: /*RESULT = new ();*/ :} 
	| additive_expression:aE MIN multiplicative_expression:mE             							{: /*RESULT = new ();*/ :} 
	;

/*Multiplicative Expression*/
multiplicative_expression ::=   basic_expression:bE                    								{: /*RESULT = new ();*/ :}
	| multiplicative_expression:mE MUL basic_expression:bE                							{: /*RESULT = new ();*/ :} 
	| multiplicative_expression:mE DIV basic_expression:bE                							{: /*RESULT = new ();*/ :}               
	;

/*IO Expressions*/
io_expressions ::= PRINT OPAR STRINGCONTENT:stringContent CPAR END                                  {: /*RESULT = new ();*/ :}
    |   PRINT OPAR STRINGCONTENT:stringContent COMMA parameter_list:pL CPAR END                     {: /*RESULT = new ();*/ :}       		
    |   PRINT OPAR ID:identifierValue CPAR END                                                      {: /*RESULT = new ();*/ :}
    |   SCAN  OPAR ID:identifierValue CPAR END                                                      {: /*RESULT = new ();*/ :}
    | 	SCAN  OPAR ID:identifierValue CPAR error 													{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						{: /*RESULT = new ();*/ :}
    |	PRINT OPAR STRINGCONTENT:stringContent CPAR error 											{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						{: /*RESULT = new ();*/ :}
    |	PRINT OPAR STRINGCONTENT:stringContent COMMA parameter_list:pL CPAR error 					{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
    	END 																						
    ;

/*Function calls*/
function_calls_expression ::= ID:id OPAR CPAR END 													{: /*RESULT = new ();*/ :}
	| ID:id OPAR parameter_list:pL CPAR END 														{: /*RESULT = new ();*/ :}
	| ID:id OPAR CPAR error 																		{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	  END 																							{: /*RESULT = new ();*/ :}
	| ID:id OPAR parameter_list:pL CPAR error 														{: parser.report_error("You forgot a ;","End of statement Syntax Error"); :}
	  END	  																						{: /*RESULT = new ();*/ :}
	;

/*Expression*/
expression ::= conditional_expression
	;

/*Basic Expressions*/
basic_expression ::=   primary_expression:pE                           								{: /*RESULT = new ();*/ :}
    ;

/*Primary Expression*/
primary_expression ::=  ID:identifierValue                              							{: /*RESULT = new ();*/ :}
	|   INT:integerContent                                            								{: /*RESULT = new ();*/ :}
	|   STRINGCONTENT:stringContent                                   								{: /*RESULT = new ();*/ :}
	|   DOUBLEVALUE:doubleContent                                     								{: /*RESULT = new ();*/ :}
	|   CHARCONTENT:charContent                                       								{: /*RESULT = new ();*/ :}
	|   TRUE                                            											{: /*RESULT = new ();*/ :}
	|   FALSE                                       												{: /*RESULT = new ();*/ :}
	|   OPAR expression CPAR																		{: /*RESULT = new ();*/ :}
	;
