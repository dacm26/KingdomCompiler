package Flex;
import java_cup.runtime.*; 

parser code {:
  public parser (java.io.Reader input) {
    super(new kcScanner(input));
  }
:};


/* Variables */
terminal INTEGER, BOOLEAN, DOUBLE, CHAR, STRING, VOID;

/* Boolean types */
terminal TRUE, FALSE;

/* Iterations Structures */
terminal FOR, WHILE;

/* Decision Structures */
terminal IF, ELSIF, ELSE, SWITCH, CASE, DEFAULT, BREAK, CONTINUE;

/* Functions */
terminal MAIN, FUNCTION, RETURN;

/* I/O */
terminal PRINT, SCAN;

/* Others */
terminal COMMA, END, COLON;

/* Arithmetic operators */
terminal ADD, MIN, MUL, DIV;

/* Grouping symbols */
terminal OPAR, CPAR, OCBRA, CCBRA;

/* Arithmetic operators */
terminal GREATEREQ, LESSEQ, GREATER, LESS;

/* Logic operators */
terminal NOT, OR, AND, NEQU, EQU;

/* Assignment operator */
terminal ASSIGN;

/* Values */
terminal String ID;
terminal Integer INT;
terminal Double DOUBLEVALUE;
terminal Character CHARCONTENT;
terminal String STRINGCONTENT;

/* Non terminals */
non terminal OPM_E, OPM_T, OPM_F;

/* Precedences */
precedence left ADD, MIN;
precedence left MUL, DIV;



/* Operaciones matematicas  */

OPM_E ::=   OPM_E ADD OPM_T         {: System.out.println("Sumando..."); :}
      |     OPM_E MIN OPM_T         {: System.out.println("Restando..."); :}
      |     OPM_T                   {: System.out.println("E->T..."); :}
;

OPM_T ::=   OPM_T MUL OPM_F         {: System.out.println("Multiplicando..."); :}
      |     OPM_T DIV OPM_F         {: System.out.println("Dividiendo..."); :}
      |     OPM_F                   {: System.out.println("T->F..."); :}

;

OPM_F ::=   INT                     {: System.out.println("F->num..."); :}
      |     ID                      {: System.out.println("F->id..."); :}
      |     OPAR OPM_E CPAR         {: System.out.println("F->(E)..."); :}

;