package Flex;
import java_cup.runtime.*; 

parser code {:
  public parser (java.io.Reader input) {
    super(new kcScanner(input));
  }
:};


/* Variables */
terminal INTEGER, BOOLEAN, DOUBLE, CHAR, STRING, VOID;

/* Boolean types */
terminal TRUE, FALSE;

/* Iterations Structures */
terminal FOR, WHILE;

/* Decision Structures */
terminal IF, ELSIF, ELSE, SWITCH, CASE, DEFAULT, BREAK, CONTINUE;

/* Functions */
terminal MAIN, FUNCTION, RETURN;

/* I/O */
terminal PRINT, SCAN;

/* Others */
terminal COMMA, END, COLON;

/* Arithmetic operators */
terminal ADD, MIN, MUL, DIV;

/* Grouping symbols */
terminal OPAR, CPAR, OCBRA, CCBRA;

/* Arithmetic operators */
terminal GREATEREQ, LESSEQ, GREATER, LESS;

/* Logic operators */
terminal NOT, OR, AND, NEQU, EQU;

/* Assignment operator */
terminal ASSIGN;

/* Values */
terminal String ID;
terminal Integer INT;
terminal Double DOUBLEVALUE;
terminal Character CHARCONTENT;
terminal String STRINGCONTENT;


/* Non terminals */
non terminal type_specifier, type_value, logical_operator,arithmetic_operator ,equals_operator;
non terminal OPM_S, OPM_E, OPM_T, OPM_F;
non terminal pre_assign_statement, assign_statement;
non terminal declaration_statement, variable_statement;

/*KC CFG*/

variable_statement ::= assign_statement             {: System.out.println("assign_statement a variable_statement"); :}
     | declaration_statement                        {: System.out.println("declaration_statement a variable_statement"); :}
;

/*Assignation statements*/
assign_statement ::= pre_assign_statement OPM_S END  {: System.out.println("Asignando like a boss"); :}
;

pre_assign_statement ::= declaration_statement ASSIGN    {: System.out.println("Pre-Asignando like a boss"); :}
;

/*Declaration statement*/
declaration_statement ::= declaration_statement END {: System.out.println("Declarando like a boss"); :}
      |     declaration_statement COMMA ID          {: System.out.println("Declarando varios like a boss"); :}
      |     type_specifier ID                       {: System.out.println("Pre-Declarando like a boss"); :}
;

/* All values with operations */

OPM_S ::= OPM_E                     {: System.out.println("OPM_S = OPM_E"); :}
;

OPM_E ::=   OPM_E ADD OPM_T         {: System.out.println("OPM_E: Sumando"); :}
      |     OPM_E MIN OPM_T         {: System.out.println("OPM_E: Restando"); :}
      |     OPM_T                   {: System.out.println("OPM_E: OPM_T"); :}
;

OPM_T ::=   OPM_T MUL OPM_F         {: System.out.println("OPM_T: Multiplicando"); :}
      |     OPM_T DIV OPM_F         {: System.out.println("OPM_T: Dividiendo"); :}
      |     OPM_F                   {: System.out.println("OPM_T: OPM_F"); :}

;

OPM_F ::=   type_value              {: System.out.println("OPM_F: type_value"); :}
      |     OPAR OPM_E CPAR         {: System.out.println("OPM_F: (E)"); :}
;

/*Equals Operator*/
equals_operator ::= EQU     {: System.out.println("equals_operator: equal"); :}
;

/*Arithmetic Operators*/
arithmetic_operator ::= GREATEREQ   {: System.out.println("arithmetic_operator: great or equal"); :}
        | LESSEQ            {: System.out.println("arithmetic_operator: less or equal"); :}
        | GREATER           {: System.out.println("arithmetic_operator: greater"); :}
        | LESS              {: System.out.println("arithmetic_operator: less"); :}
;

/* Logical Operators */
logical_operator ::= NOT    {: System.out.println("logical_operator: not"); :}
        | OR                {: System.out.println("logical_operator: or"); :}
        | AND               {: System.out.println("logical_operator: and"); :}
        | NEQU              {: System.out.println("logical_operator: notEqual"); :}
;



/*Type specifiers*/
type_specifier ::= CHAR     {: System.out.println("type_specifier: char"); :}
	| INTEGER           {: System.out.println("type_specifier: integer"); :}
	| DOUBLE            {: System.out.println("type_specifier: double"); :}
	| STRING            {: System.out.println("type_specifier: string"); :}
        | BOOLEAN           {: System.out.println("type_specifier: bool"); :}
        | VOID              {: System.out.println("type_specifier: void"); :}
; 

/*Type Values*/
type_value ::= ID           {: System.out.println("type_value: id"); :}
	| INT               {: System.out.println("type_value: int value"); :}
	| DOUBLEVALUE       {: System.out.println("type_value: double value"); :}
	| STRINGCONTENT     {: System.out.println("type_value: string content"); :}
        | CHARCONTENT       {: System.out.println("type_value: char content"); :}
        | TRUE              {: System.out.println("type_value: true"); :}
        | FALSE             {: System.out.println("type_value: false"); :}
;