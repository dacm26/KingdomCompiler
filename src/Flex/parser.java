
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package Flex;

import java_cup.runtime.*;
import java.util.ArrayList;
import AST.astTreeDeclaration.*;
import AST.mainFunctionDeclaration.*;
import AST.externalDeclaration.*;
import AST.mainFunction.*;
import AST.functionDefinition.*;
import AST.jumpStatement.*;
import AST.iterationStatement.*;
import AST.selectionStatement.*;
import AST.statementList.*;
import AST.declarationList.*;
import AST.compoundStatement.*;
import AST.labeledStatement.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.parameterList.*;
import AST.mainDeclarator.*;
import AST.typeSpecifier.*;
import AST.variableTypeSpecifier.*;
import AST.declaration.*;
import AST.assignmentExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.ioExpressions.*;
import AST.primaryExpression.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\005\005\000\002\006\007\000" +
    "\002\006\010\000\002\007\004\000\002\007\004\000\002" +
    "\007\004\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\010\007\000\002\010\016\000\002\011\007" +
    "\000\002\011\011\000\002\011\011\000\002\012\003\000" +
    "\002\012\004\000\002\013\003\000\002\013\004\000\002" +
    "\014\004\000\002\014\005\000\002\014\005\000\002\014" +
    "\006\000\002\015\007\000\002\015\005\000\002\015\002" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\017\003\000\002\017\005\000\002" +
    "\020\004\000\002\020\006\000\002\020\004\000\002\021" +
    "\006\000\002\021\005\000\002\021\005\000\002\021\004" +
    "\000\002\022\003\000\002\022\003\000\002\022\003\000" +
    "\002\022\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\024\005\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\025\007\000" +
    "\002\025\006\000\002\026\003\000\002\026\005\000\002" +
    "\026\005\000\002\027\003\000\002\027\005\000\002\027" +
    "\005\000\002\030\003\000\002\030\005\000\002\030\005" +
    "\000\002\030\005\000\002\030\005\000\002\031\003\000" +
    "\002\031\005\000\002\031\005\000\002\032\003\000\002" +
    "\032\005\000\002\032\005\000\002\035\007\000\002\035" +
    "\011\000\002\035\007\000\002\034\006\000\002\034\007" +
    "\000\002\033\003\000\002\033\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\026\003\020\004\022\005\014\006\025\007" +
    "\010\010\015\011\024\025\017\026\023\053\012\001\002" +
    "\000\026\003\020\004\022\005\014\006\025\007\010\010" +
    "\015\011\024\025\017\026\023\053\012\001\002\000\010" +
    "\003\032\023\034\053\247\001\002\000\050\003\uffc6\004" +
    "\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\016\uffc6\021\uffc6\022\uffc6\024\uffc6\025" +
    "\uffc6\026\uffc6\040\uffc6\041\uffc6\053\uffc6\001\002\000\050" +
    "\003\uffc8\004\uffc8\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\016\uffc8\021\uffc8\022\uffc8" +
    "\024\uffc8\025\uffc8\026\uffc8\040\uffc8\041\uffc8\053\uffc8\001" +
    "\002\000\010\003\uffd4\023\uffd4\053\uffd4\001\002\000\020" +
    "\002\ufffc\004\022\005\014\006\025\007\010\010\015\011" +
    "\024\001\002\000\006\036\127\052\164\001\002\000\004" +
    "\002\001\001\002\000\010\003\uffd0\023\uffd0\053\uffd0\001" +
    "\002\000\010\003\uffd1\023\uffd1\053\uffd1\001\002\000\004" +
    "\002\265\001\002\000\004\036\255\001\002\000\006\003" +
    "\032\023\034\001\002\000\050\003\uffc7\004\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014" +
    "\uffc7\016\uffc7\021\uffc7\022\uffc7\024\uffc7\025\uffc7\026\uffc7" +
    "\040\uffc7\041\uffc7\053\uffc7\001\002\000\010\003\uffd3\023" +
    "\uffd3\053\uffd3\001\002\000\004\036\026\001\002\000\010" +
    "\003\uffcf\023\uffcf\053\uffcf\001\002\000\010\003\uffd2\023" +
    "\uffd2\053\uffd2\001\002\000\004\053\027\001\002\000\004" +
    "\037\030\001\002\000\004\030\031\001\002\000\050\003" +
    "\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011\uffb0" +
    "\012\uffb0\013\uffb0\014\uffb0\016\uffb0\021\uffb0\022\uffb0\024" +
    "\uffb0\025\uffb0\026\uffb0\040\uffb0\041\uffb0\053\uffb0\001\002" +
    "\000\004\036\253\001\002\000\004\040\056\001\002\000" +
    "\006\003\035\036\036\001\002\000\004\040\uffd5\001\002" +
    "\000\016\004\037\005\044\006\040\007\045\010\041\037" +
    "\046\001\002\000\006\003\uffcd\053\uffcd\001\002\000\006" +
    "\003\uffcc\053\uffcc\001\002\000\006\003\uffcb\053\uffcb\001" +
    "\002\000\006\003\054\053\053\001\002\000\006\027\047" +
    "\037\050\001\002\000\006\003\uffca\053\uffca\001\002\000" +
    "\006\003\uffce\053\uffce\001\002\000\004\040\uffd7\001\002" +
    "\000\014\004\037\005\044\006\040\007\045\010\041\001" +
    "\002\000\004\040\uffd8\001\002\000\004\053\052\001\002" +
    "\000\006\027\uffda\037\uffda\001\002\000\006\027\uffdb\037" +
    "\uffdb\001\002\000\006\027\uffd9\037\uffd9\001\002\000\020" +
    "\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\001\002\000\046\004\022\005\014\006\025\007\010" +
    "\010\015\011\024\012\077\013\065\014\071\016\067\021" +
    "\075\022\061\024\066\025\017\026\023\040\056\041\070" +
    "\053\012\001\002\000\046\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\016\uffea" +
    "\021\uffea\022\uffea\024\uffea\025\uffea\026\uffea\040\uffea\041" +
    "\uffea\053\uffea\001\002\000\032\012\uffdf\013\uffdf\014\uffdf" +
    "\015\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\024" +
    "\uffdf\040\uffdf\041\uffdf\001\002\000\004\030\252\001\002" +
    "\000\004\053\247\001\002\000\024\012\uffec\013\uffec\014" +
    "\uffec\016\uffec\021\uffec\022\uffec\024\uffec\040\uffec\041\uffec" +
    "\001\002\000\032\012\uffde\013\uffde\014\uffde\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\024\uffde\040\uffde" +
    "\041\uffde\001\002\000\004\036\243\001\002\000\024\003" +
    "\240\030\241\053\116\054\104\055\113\056\112\057\117" +
    "\060\111\061\115\001\002\000\004\036\221\001\002\000" +
    "\050\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\040\uffe8\041\uffe8" +
    "\001\002\000\004\036\213\001\002\000\032\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1" +
    "\022\uffe1\024\uffe1\040\uffe1\041\uffe1\001\002\000\024\012" +
    "\077\013\065\014\071\016\067\021\075\022\061\024\066" +
    "\040\056\041\212\001\002\000\046\004\022\005\014\006" +
    "\025\007\010\010\015\011\024\012\077\013\065\014\071" +
    "\016\067\021\075\022\061\024\066\025\017\026\023\040" +
    "\056\041\206\053\012\001\002\000\006\003\203\030\204" +
    "\001\002\000\032\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016" +
    "\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\040\uffe0" +
    "\041\uffe0\001\002\000\004\036\100\001\002\000\016\004" +
    "\022\005\014\006\025\007\010\010\015\011\024\001\002" +
    "\000\004\053\102\001\002\000\004\052\103\001\002\000" +
    "\020\053\116\054\104\055\113\056\112\057\117\060\111" +
    "\061\115\001\002\000\040\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\037\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001\002\000" +
    "\034\030\uffbd\031\uffbd\032\146\033\145\037\uffbd\042\uffbd" +
    "\043\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051" +
    "\uffbd\001\002\000\020\030\uffc3\031\uffc3\037\uffc3\046\uffc3" +
    "\047\uffc3\050\176\051\177\001\002\000\010\030\156\046" +
    "\155\047\154\001\002\000\040\030\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\uffac\037\uffac\042\uffac\043\uffac\044" +
    "\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051\uffac\001\002" +
    "\000\040\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\037\uffa6\042\uffa6\043\uffa6\044\uffa6\045\uffa6\046\uffa6" +
    "\047\uffa6\050\uffa6\051\uffa6\001\002\000\040\030\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\045\uffa7\046\uffa7\047\uffa7\050\uffa7\051" +
    "\uffa7\001\002\000\040\030\uffa8\031\uffa8\032\uffa8\033\uffa8" +
    "\034\uffa8\035\uffa8\037\uffa8\042\uffa8\043\uffa8\044\uffa8\045" +
    "\uffa8\046\uffa8\047\uffa8\050\uffa8\051\uffa8\001\002\000\030" +
    "\030\uffc0\031\uffc0\037\uffc0\042\140\043\141\044\142\045" +
    "\143\046\uffc0\047\uffc0\050\uffc0\051\uffc0\001\002\000\040" +
    "\030\uffa5\031\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\037" +
    "\uffa5\042\uffa5\043\uffa5\044\uffa5\045\uffa5\046\uffa5\047\uffa5" +
    "\050\uffa5\051\uffa5\001\002\000\042\030\uffab\031\uffab\032" +
    "\uffab\033\uffab\034\uffab\035\uffab\036\127\037\uffab\042\uffab" +
    "\043\uffab\044\uffab\045\uffab\046\uffab\047\uffab\050\uffab\051" +
    "\uffab\001\002\000\040\030\uffa9\031\uffa9\032\uffa9\033\uffa9" +
    "\034\uffa9\035\uffa9\037\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9\001\002\000\040" +
    "\030\uffad\031\uffad\032\uffad\033\uffad\034\uffad\035\uffad\037" +
    "\uffad\042\uffad\043\uffad\044\uffad\045\uffad\046\uffad\047\uffad" +
    "\050\uffad\051\uffad\001\002\000\040\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\123\035\124\037\uffb8\042\uffb8\043\uffb8" +
    "\044\uffb8\045\uffb8\046\uffb8\047\uffb8\050\uffb8\051\uffb8\001" +
    "\002\000\040\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5" +
    "\035\uffb5\037\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\020\053\116" +
    "\054\104\055\113\056\112\057\117\060\111\061\115\001" +
    "\002\000\020\053\116\054\104\055\113\056\112\057\117" +
    "\060\111\061\115\001\002\000\040\030\uffb3\031\uffb3\032" +
    "\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\042\uffb3\043\uffb3" +
    "\044\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\001" +
    "\002\000\040\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\037\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000\006\037\132" +
    "\053\130\001\002\000\006\027\uffdd\037\uffdd\001\002\000" +
    "\006\027\134\037\135\001\002\000\004\030\133\001\002" +
    "\000\106\003\uffaf\004\uffaf\005\uffaf\006\uffaf\007\uffaf\010" +
    "\uffaf\011\uffaf\012\uffaf\013\uffaf\014\uffaf\016\uffaf\021\uffaf" +
    "\022\uffaf\024\uffaf\025\uffaf\026\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\041\uffaf" +
    "\042\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\053\uffaf\001\002\000\004\053\137\001\002" +
    "\000\004\030\136\001\002\000\106\003\uffae\004\uffae\005" +
    "\uffae\006\uffae\007\uffae\010\uffae\011\uffae\012\uffae\013\uffae" +
    "\014\uffae\016\uffae\021\uffae\022\uffae\024\uffae\025\uffae\026" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045" +
    "\uffae\046\uffae\047\uffae\050\uffae\051\uffae\053\uffae\001\002" +
    "\000\010\027\uffdc\030\uffdc\037\uffdc\001\002\000\020\053" +
    "\116\054\104\055\113\056\112\057\117\060\111\061\115" +
    "\001\002\000\020\053\116\054\104\055\113\056\112\057" +
    "\117\060\111\061\115\001\002\000\020\053\116\054\104" +
    "\055\113\056\112\057\117\060\111\061\115\001\002\000" +
    "\020\053\116\054\104\055\113\056\112\057\117\060\111" +
    "\061\115\001\002\000\034\030\uffbc\031\uffbc\032\146\033" +
    "\145\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc" +
    "\047\uffbc\050\uffbc\051\uffbc\001\002\000\020\053\116\054" +
    "\104\055\113\056\112\057\117\060\111\061\115\001\002" +
    "\000\020\053\116\054\104\055\113\056\112\057\117\060" +
    "\111\061\115\001\002\000\040\030\uffb7\031\uffb7\032\uffb7" +
    "\033\uffb7\034\123\035\124\037\uffb7\042\uffb7\043\uffb7\044" +
    "\uffb7\045\uffb7\046\uffb7\047\uffb7\050\uffb7\051\uffb7\001\002" +
    "\000\040\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\123\035" +
    "\124\037\uffb6\042\uffb6\043\uffb6\044\uffb6\045\uffb6\046\uffb6" +
    "\047\uffb6\050\uffb6\051\uffb6\001\002\000\034\030\uffbb\031" +
    "\uffbb\032\146\033\145\037\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\001\002\000" +
    "\034\030\uffba\031\uffba\032\146\033\145\037\uffba\042\uffba" +
    "\043\uffba\044\uffba\045\uffba\046\uffba\047\uffba\050\uffba\051" +
    "\uffba\001\002\000\034\030\uffb9\031\uffb9\032\146\033\145" +
    "\037\uffb9\042\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047" +
    "\uffb9\050\uffb9\051\uffb9\001\002\000\020\053\116\054\104" +
    "\055\113\056\112\057\117\060\111\061\115\001\002\000" +
    "\020\053\116\054\104\055\113\056\112\057\117\060\111" +
    "\061\115\001\002\000\020\053\116\054\104\055\113\056" +
    "\112\057\117\060\111\061\115\001\002\000\010\030\160" +
    "\046\155\047\154\001\002\000\020\004\022\005\014\006" +
    "\025\007\010\010\015\011\024\053\163\001\002\000\004" +
    "\053\171\001\002\000\004\037\167\001\002\000\004\052" +
    "\164\001\002\000\020\053\116\054\104\055\113\056\112" +
    "\057\117\060\111\061\115\001\002\000\010\030\166\046" +
    "\155\047\154\001\002\000\052\003\uffc4\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4\014" +
    "\uffc4\016\uffc4\021\uffc4\022\uffc4\024\uffc4\025\uffc4\026\uffc4" +
    "\037\uffc4\040\uffc4\041\uffc4\053\uffc4\001\002\000\022\012" +
    "\077\013\065\014\071\016\067\021\075\022\061\024\066" +
    "\040\056\001\002\000\032\012\ufff0\013\ufff0\014\ufff0\015" +
    "\ufff0\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0" +
    "\040\ufff0\041\ufff0\001\002\000\004\052\172\001\002\000" +
    "\020\053\116\054\104\055\113\056\112\057\117\060\111" +
    "\061\115\001\002\000\010\030\174\046\155\047\154\001" +
    "\002\000\052\003\uffc5\004\uffc5\005\uffc5\006\uffc5\007\uffc5" +
    "\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\016\uffc5\021" +
    "\uffc5\022\uffc5\024\uffc5\025\uffc5\026\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\053\uffc5\001\002\000\020\030\uffc1\031\uffc1\037" +
    "\uffc1\046\uffc1\047\uffc1\050\176\051\177\001\002\000\020" +
    "\053\116\054\104\055\113\056\112\057\117\060\111\061" +
    "\115\001\002\000\020\053\116\054\104\055\113\056\112" +
    "\057\117\060\111\061\115\001\002\000\030\030\uffbf\031" +
    "\uffbf\037\uffbf\042\140\043\141\044\142\045\143\046\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\001\002\000\030\030\uffbe\031" +
    "\uffbe\037\uffbe\042\140\043\141\044\142\045\143\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\001\002\000\020\030\uffc2\031" +
    "\uffc2\037\uffc2\046\uffc2\047\uffc2\050\176\051\177\001\002" +
    "\000\032\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\017" +
    "\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\040\ufff2\041\ufff2" +
    "\001\002\000\032\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\046\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\016\uffe9" +
    "\021\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\040\uffe9\041" +
    "\uffe9\053\uffe9\001\002\000\050\002\uffe6\004\uffe6\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6" +
    "\024\uffe6\040\uffe6\041\uffe6\001\002\000\024\012\077\013" +
    "\065\014\071\016\067\021\075\022\061\024\066\040\056" +
    "\041\211\001\002\000\024\012\uffeb\013\uffeb\014\uffeb\016" +
    "\uffeb\021\uffeb\022\uffeb\024\uffeb\040\uffeb\041\uffeb\001\002" +
    "\000\050\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\021\uffe5\022\uffe5\024\uffe5\040\uffe5\041" +
    "\uffe5\001\002\000\050\002\uffe7\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7" +
    "\040\uffe7\041\uffe7\001\002\000\020\053\116\054\104\055" +
    "\113\056\112\057\117\060\111\061\115\001\002\000\010" +
    "\037\215\046\155\047\154\001\002\000\022\012\077\013" +
    "\065\014\071\016\067\021\075\022\061\024\066\040\056" +
    "\001\002\000\032\012\uffef\013\uffef\014\uffef\015\217\016" +
    "\uffef\017\uffef\020\uffef\021\uffef\022\uffef\024\uffef\040\uffef" +
    "\041\uffef\001\002\000\022\012\077\013\065\014\071\016" +
    "\067\021\075\022\061\024\066\040\056\001\002\000\032" +
    "\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\017\uffee\020" +
    "\uffee\021\uffee\022\uffee\024\uffee\040\uffee\041\uffee\001\002" +
    "\000\020\053\116\054\104\055\113\056\112\057\117\060" +
    "\111\061\115\001\002\000\010\037\223\046\155\047\154" +
    "\001\002\000\004\040\224\001\002\000\010\017\227\020" +
    "\225\041\uffe2\001\002\000\004\031\235\001\002\000\004" +
    "\041\234\001\002\000\020\053\116\054\104\055\113\056" +
    "\112\057\117\060\111\061\115\001\002\000\010\031\231" +
    "\046\155\047\154\001\002\000\022\012\077\013\065\014" +
    "\071\016\067\021\075\022\061\024\066\040\056\001\002" +
    "\000\010\017\227\020\225\041\uffe2\001\002\000\004\041" +
    "\uffe4\001\002\000\032\012\uffed\013\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\021\uffed\022\uffed\024\uffed\040" +
    "\uffed\041\uffed\001\002\000\022\012\077\013\065\014\071" +
    "\016\067\021\075\022\061\024\066\040\056\001\002\000" +
    "\004\041\uffe3\001\002\000\010\030\242\046\155\047\154" +
    "\001\002\000\032\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016" +
    "\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\024\ufff3\040\ufff3" +
    "\041\ufff3\001\002\000\032\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\032\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4" +
    "\024\ufff4\040\ufff4\041\ufff4\001\002\000\020\053\116\054" +
    "\104\055\113\056\112\057\117\060\111\061\115\001\002" +
    "\000\010\037\245\046\155\047\154\001\002\000\022\012" +
    "\077\013\065\014\071\016\067\021\075\022\061\024\066" +
    "\040\056\001\002\000\032\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\024\ufff1" +
    "\040\ufff1\041\ufff1\001\002\000\010\027\uffdd\030\uffdd\052" +
    "\172\001\002\000\006\027\134\030\251\001\002\000\050" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\016\uffc9\021\uffc9\022\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\040\uffc9\041\uffc9\053\uffc9\001" +
    "\002\000\032\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\040\ufff7\041" +
    "\ufff7\001\002\000\004\037\254\001\002\000\004\040\uffd6" +
    "\001\002\000\004\057\256\001\002\000\006\027\257\037" +
    "\260\001\002\000\004\053\130\001\002\000\004\030\261" +
    "\001\002\000\050\003\uffb2\004\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2" +
    "\021\uffb2\022\uffb2\024\uffb2\025\uffb2\026\uffb2\040\uffb2\041" +
    "\uffb2\053\uffb2\001\002\000\006\027\134\037\263\001\002" +
    "\000\004\030\264\001\002\000\050\003\uffb1\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\011\uffb1\012\uffb1\013\uffb1" +
    "\014\uffb1\016\uffb1\021\uffb1\022\uffb1\024\uffb1\025\uffb1\026" +
    "\uffb1\040\uffb1\041\uffb1\053\uffb1\001\002\000\004\002\000" +
    "\001\002\000\020\002\ufffc\004\022\005\014\006\025\007" +
    "\010\010\015\011\024\001\002\000\004\053\271\001\002" +
    "\000\004\002\ufffe\001\002\000\004\036\272\001\002\000" +
    "\016\004\037\005\044\006\040\007\045\010\041\037\274" +
    "\001\002\000\006\027\047\037\276\001\002\000\004\040" +
    "\056\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\010\ufff9\011\ufff9\001\002\000\004\040\056\001" +
    "\002\000\020\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\011\ufff8\001\002\000\004\002\ufffd\001\002\000" +
    "\004\040\056\001\002\000\020\002\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\011\ufffb\001\002\000\004\002" +
    "\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\301\000\022\002\015\003\012\005\010\022\004\024" +
    "\003\025\006\034\005\035\020\001\001\000\020\003\302" +
    "\005\010\022\004\024\003\025\006\034\005\035\020\001" +
    "\001\000\006\017\247\021\300\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\267\006" +
    "\265\022\266\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\054\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\042\023\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\007\063\010\057\011\075\012\072" +
    "\013\073\014\071\016\062\022\061\024\056\025\006\034" +
    "\005\035\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\236" +
    "\027\105\030\113\031\104\032\120\033\121\034\107\036" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\063\010\057\011" +
    "\075\014\071\016\207\001\001\000\030\007\063\010\057" +
    "\011\075\012\206\014\071\016\062\022\061\024\204\025" +
    "\006\034\005\035\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\100\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\026\106\027\105" +
    "\030\113\031\104\032\120\033\121\034\107\036\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\033\125" +
    "\034\107\036\117\001\001\000\010\033\124\034\107\036" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\031" +
    "\152\032\120\033\121\034\107\036\117\001\001\000\014" +
    "\031\151\032\120\033\121\034\107\036\117\001\001\000" +
    "\014\031\150\032\120\033\121\034\107\036\117\001\001" +
    "\000\014\031\143\032\120\033\121\034\107\036\117\001" +
    "\001\000\002\001\001\000\012\032\147\033\121\034\107" +
    "\036\117\001\001\000\012\032\146\033\121\034\107\036" +
    "\117\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\027" +
    "\201\030\113\031\104\032\120\033\121\034\107\036\117" +
    "\001\001\000\020\027\174\030\113\031\104\032\120\033" +
    "\121\034\107\036\117\001\001\000\022\026\156\027\105" +
    "\030\113\031\104\032\120\033\121\034\107\036\117\001" +
    "\001\000\002\001\001\000\006\022\160\025\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\026\164\027\105\030\113\031\104\032\120\033\121" +
    "\034\107\036\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\063\010\057\011\075\014\071\016\167" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\026" +
    "\172\027\105\030\113\031\104\032\120\033\121\034\107" +
    "\036\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\030\200\031\104\032\120\033\121" +
    "\034\107\036\117\001\001\000\016\030\177\031\104\032" +
    "\120\033\121\034\107\036\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\007\063\010\057\011\075\014\071\016\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\026\213\027\105\030\113\031\104\032\120\033\121\034" +
    "\107\036\117\001\001\000\002\001\001\000\014\007\063" +
    "\010\057\011\075\014\071\016\215\001\001\000\002\001" +
    "\001\000\014\007\063\010\057\011\075\014\071\016\217" +
    "\001\001\000\002\001\001\000\022\026\221\027\105\030" +
    "\113\031\104\032\120\033\121\034\107\036\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\225\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\026\227" +
    "\027\105\030\113\031\104\032\120\033\121\034\107\036" +
    "\117\001\001\000\002\001\001\000\014\007\063\010\057" +
    "\011\075\014\071\016\231\001\001\000\004\015\232\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\063" +
    "\010\057\011\075\014\071\016\235\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\243\027\105\030\113\031" +
    "\104\032\120\033\121\034\107\036\117\001\001\000\002" +
    "\001\001\000\014\007\063\010\057\011\075\014\071\016" +
    "\245\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\261\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\277\006\265\022\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\020\272\023\041\001\001\000\002\001\001\000" +
    "\004\014\274\001\001\000\002\001\001\000\004\014\276" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\301\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public  int errors = 0;
    public static kcScanner s;
    public boolean print=true;
    public parser(java.io.Reader input) {
        super(s=new kcScanner(input));
    }

    public void report_error(String message, Object info) {

        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
            errors++;
            System.err.println("" + errors + "==> " + " " + message
                    + " line: "+ (s.left+1) + ", column: "+(s.right+1) + "\n");
        } else {
            /*StringBuffer m = new StringBuffer("Error ");
            if (info instanceof java_cup.runtime.Symbol) {
                m.append("(" + info.toString() + ")");
            }
            m.append(" : " + message + "\n");
            compilerOutput.append(m.toString());*/
        }
    }
    public void report_fatal_error(String message, Object info) {
        try{
            report_error(message, info);
        }catch(Exception e){
           
        }
        
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              astTreeDeclaration RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(print){ mFD.printNode(); }
																									   else parser.report_error("There was an error and the AST couldn't be printed", "No AST for you"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astTreeDeclaration start_val = (astTreeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= declaration main_function_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_Declaration(d,mFD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function external_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mainFunction mF = (mainFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		externalDeclaration eD = (externalDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunction(mF,eD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= function_definition external_declaration 
            {
              externalDeclaration RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		functionDefinition fD = (functionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		externalDeclaration eD = (externalDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ED_ExternalDeclaration(fD,eD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_declaration ::= 
            {
              externalDeclaration RESULT =null;
		 RESULT = new ED_Lamda(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_function ::= type_specifier main_declarator compound_statement 
            {
              mainFunction RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mainDeclarator mD = (mainDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MF_MainFunction(tS,mD,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // main_function ::= error main_declarator compound_statement 
            {
              mainFunction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 print=false; parser.report_error("Missing return type in Main", e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= type_specifier ID OPAR CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // function_definition ::= type_specifier ID OPAR parameter_list CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,pL,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_statement ::= CONTINUE END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // jump_statement ::= BREAK END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // jump_statement ::= RETURN END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // jump_statement ::= RETURN conditional_expression END 
            {
              jumpStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JS_Return(cE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // jump_statement ::= RETURN error 
            {
              jumpStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print=false; parser.report_error("Was expecting ';' character instead received: " + e,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // jump_statement ::= BREAK error 
            {
              jumpStatement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print=false; parser.report_error("Was expecting ';' character instead received: " + e,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // iteration_statement ::= WHILE OPAR conditional_expression CPAR statement 
            {
              iterationStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_While(cE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // iteration_statement ::= FOR OPAR type_specifier ID ASSIGN conditional_expression END conditional_expression END assignment_expression CPAR statement 
            {
              iterationStatement RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(tS,id,cE,cE1,aE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // selection_statement ::= IF OPAR conditional_expression CPAR statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_If(cE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // selection_statement ::= IF OPAR conditional_expression CPAR statement ELSE statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm1 = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfElse(cE,stm,stm1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // selection_statement ::= SWITCH OPAR conditional_expression CPAR OCBRA labeled_statement CCBRA 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SS_Switch(cE,lS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // statement_list ::= statement 
            {
              statementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_Statement(stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // statement_list ::= statement_list statement 
            {
              statementList RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_StatementList(sL,stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaration_list ::= declaration 
            {
              declarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DL_Declaration(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaration_list ::= declaration_list declaration 
            {
              declarationList RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DL_DeclarationList(dL,d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compound_statement ::= OCBRA CCBRA 
            {
              compoundStatement RESULT =null;
		 RESULT = new CS_Empty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_StatementList(sL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // compound_statement ::= OCBRA declaration_list CCBRA 
            {
              compoundStatement RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_DeclarationList(dL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // compound_statement ::= OCBRA declaration_list statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_Compound(dL,sL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // labeled_statement ::= CASE conditional_expression COLON statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(cE,stm,lS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // labeled_statement ::= DEFAULT COLON statement 
            {
              labeledStatement RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Default(stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // labeled_statement ::= 
            {
              labeledStatement RESULT =null;
		 RESULT = new LS_Lamda();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= compound_statement 
            {
              statement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_CompoundStatement(cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // statement ::= selection_statement 
            {
              statement RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_SelectionStatement(sS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // statement ::= iteration_statement 
            {
              statement RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		iterationStatement iS = (iterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IterationStatement(iS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // statement ::= jump_statement 
            {
              statement RESULT =null;
		int jSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpStatement jS = (jumpStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JumpStatement(jS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // identifier_list ::= ID 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_Id(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // identifier_list ::= identifier_list COMMA ID 
            {
              identifierList RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_identifierList(iL,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parameter_list ::= variable_type_specifier ID 
            {
              parameterList RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VTS_Type vTS = (VTS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_Id(vTS,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parameter_list ::= parameter_list COMMA variable_type_specifier ID 
            {
              parameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VTS_Type vTS = (VTS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_ParameterList(pL,vTS,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parameter_list ::= variable_type_specifier error 
            {
              parameterList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print=false; parser.report_error("Was expecting id after type defintion in parameter_list instead received " + e,e);errors = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // main_declarator ::= MAIN OPAR parameter_list CPAR 
            {
              mainDeclarator RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MD_Declaration(pL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // main_declarator ::= MAIN OPAR CPAR 
            {
              mainDeclarator RESULT =null;
		 RESULT = new MD_Declaration();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // main_declarator ::= error OPAR CPAR 
            {
              mainDeclarator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 print=false; parser.report_error("Error in main function declaration was expecting keyword KingdomHearts",e);errors = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // main_declarator ::= MAIN error 
            {
              mainDeclarator RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 print=false; parser.report_error("Error in main function declaration missing char '(' ",e);errors = 0;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // type_specifier ::= CHAR 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // type_specifier ::= INTEGER 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // type_specifier ::= DOUBLE 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // type_specifier ::= STRING 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // type_specifier ::= BOOLEAN 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // type_specifier ::= VOID 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // variable_type_specifier ::= CHAR 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variable_type_specifier ::= INTEGER 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variable_type_specifier ::= DOUBLE 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable_type_specifier ::= STRING 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable_type_specifier ::= BOOLEAN 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Boolean") ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // declaration ::= type_specifier identifier_list END 
            {
              declaration RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_identifierList(tS,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // declaration ::= assignment_expression 
            {
              declaration RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_assignmentExpression(aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // declaration ::= io_expressions 
            {
              declaration RESULT =null;
		int ioEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ioExpressions ioE = (ioExpressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_IOExpressions(ioE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // declaration ::= function_calls_expression 
            {
              declaration RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_FunctionCallsExpression(fCE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignment_expression ::= type_specifier ID ASSIGN conditional_expression END 
            {
              assignmentExpression RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AE_Assignation(tS,stringValue,cE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignment_expression ::= ID ASSIGN conditional_expression END 
            {
              assignmentExpression RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AE_Assignation(stringValue,cE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional_expression ::= equality_expression 
            {
              conditionalExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_equalityExpression(eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"&&",eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"||",eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // equality_expression ::= relational_expression 
            {
              equalityExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_relationalExpression(rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // equality_expression ::= equality_expression EQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"==",rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"!=",rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // relational_expression ::= additive_expression 
            {
              relationalExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_additiveExpression(aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // relational_expression ::= relational_expression LESS additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<=",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">=",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // additive_expression ::= multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_multiplicativeExpression(mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"+",mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"-",mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // multiplicative_expression ::= basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_basicExpression(bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"*",bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"/",bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA identifier_list CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Scan(identifierValue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // function_calls_expression ::= ID OPAR CPAR END 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCE_FunctionCallsExpression(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // function_calls_expression ::= ID OPAR identifier_list CPAR END 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // basic_expression ::= primary_expression 
            {
              basicExpression RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression pE = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_primaryExpression(pE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // basic_expression ::= function_calls_expression 
            {
              basicExpression RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_FunctionCallsExpression(fCE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary_expression ::= ID 
            {
              primaryExpression RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Id(identifierValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary_expression ::= INT 
            {
              primaryExpression RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Integer(integerContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary_expression ::= STRINGCONTENT 
            {
              primaryExpression RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new String(stringContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primary_expression ::= DOUBLEVALUE 
            {
              primaryExpression RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Double(doubleContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primary_expression ::= CHARCONTENT 
            {
              primaryExpression RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Character(charContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // primary_expression ::= TRUE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(new Boolean(true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // primary_expression ::= FALSE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(new Boolean(false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
