
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package Flex;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\012\000\002\002\005\000\002\002\004\000\002\002" +
    "\005\000\002\002\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\042\007\060\004\061\011\001\002\000" +
    "\016\002\ufff9\036\ufff9\037\ufff9\040\ufff9\041\ufff9\043\ufff9" +
    "\001\002\000\016\002\ufffb\036\ufffb\037\ufffb\040\ufffb\041" +
    "\ufffb\043\ufffb\001\002\000\010\002\024\036\020\037\017" +
    "\001\002\000\010\042\007\060\004\061\011\001\002\000" +
    "\016\002\ufffe\036\ufffe\037\ufffe\040\012\041\013\043\ufffe" +
    "\001\002\000\016\002\ufffa\036\ufffa\037\ufffa\040\ufffa\041" +
    "\ufffa\043\ufffa\001\002\000\010\042\007\060\004\061\011" +
    "\001\002\000\010\042\007\060\004\061\011\001\002\000" +
    "\016\002\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\043\ufffc" +
    "\001\002\000\016\002\ufffd\036\ufffd\037\ufffd\040\ufffd\041" +
    "\ufffd\043\ufffd\001\002\000\010\036\020\037\017\043\021" +
    "\001\002\000\010\042\007\060\004\061\011\001\002\000" +
    "\010\042\007\060\004\061\011\001\002\000\016\002\ufff8" +
    "\036\ufff8\037\ufff8\040\ufff8\041\ufff8\043\ufff8\001\002\000" +
    "\016\002\001\036\001\037\001\040\012\041\013\043\001" +
    "\001\002\000\016\002\uffff\036\uffff\037\uffff\040\012\041" +
    "\013\043\uffff\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\010\002\005\003\007\004\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\015\003\007\004\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\014\001\001\000\004\004\013" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\022\004\004\001\001\000\006\003\021" +
    "\004\004\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public parser (java.io.Reader input) {
    super(new kcScanner(input));
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // OPM_E ::= OPM_E ADD OPM_T 
            {
              Object RESULT =null;
		 System.out.println("Sumando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= OPM_E EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // OPM_E ::= OPM_E MIN OPM_T 
            {
              Object RESULT =null;
		 System.out.println("Restando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OPM_E ::= OPM_T 
            {
              Object RESULT =null;
		 System.out.println("E->T..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OPM_T ::= OPM_T MUL OPM_F 
            {
              Object RESULT =null;
		 System.out.println("Multiplicando..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // OPM_T ::= OPM_T DIV OPM_F 
            {
              Object RESULT =null;
		 System.out.println("Dividiendo..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // OPM_T ::= OPM_F 
            {
              Object RESULT =null;
		 System.out.println("T->F..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OPM_F ::= INT 
            {
              Object RESULT =null;
		 System.out.println("F->num..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // OPM_F ::= ID 
            {
              Object RESULT =null;
		 System.out.println("F->id..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPM_F ::= OPAR OPM_E CPAR 
            {
              Object RESULT =null;
		 System.out.println("F->(E)..."); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_F",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
