
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package Flex;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\016\003\000\002\002\004\000\002\016" +
    "\003\000\002\016\003\000\002\014\005\000\002\013\004" +
    "\000\002\015\004\000\002\015\005\000\002\015\004\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\003\000\002\011\005\000\002\011\005\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\006\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\020\003\015\004\005\005\007\006\012\007" +
    "\017\010\011\011\010\001\002\000\004\002\001\001\002" +
    "\000\004\060\uffe5\001\002\000\012\002\uffff\033\052\034" +
    "\053\057\054\001\002\000\004\060\uffe2\001\002\000\004" +
    "\060\uffe1\001\002\000\004\060\uffe3\001\002\000\004\060" +
    "\uffe4\001\002\000\004\002\051\001\002\000\004\060\050" +
    "\001\002\000\004\002\ufffe\001\002\000\022\012\022\013" +
    "\027\042\026\060\030\061\020\062\025\063\024\064\032" +
    "\001\002\000\004\060\uffe6\001\002\000\016\034\uffdf\036" +
    "\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\001\002\000\016" +
    "\034\ufff5\036\ufff5\037\ufff5\040\040\041\041\043\ufff5\001" +
    "\002\000\016\034\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\043\uffdb\001\002\000\004\034\047\001\002\000\016\034" +
    "\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\043\uffdc\001\002" +
    "\000\016\034\uffde\036\uffde\037\uffde\040\uffde\041\uffde\043" +
    "\uffde\001\002\000\022\012\022\013\027\042\026\060\030" +
    "\061\020\062\025\063\024\064\032\001\002\000\016\034" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\043\uffda\001\002" +
    "\000\016\034\uffe0\036\uffe0\037\uffe0\040\uffe0\041\uffe0\043" +
    "\uffe0\001\002\000\016\034\ufff1\036\ufff1\037\ufff1\040\ufff1" +
    "\041\ufff1\043\ufff1\001\002\000\016\034\uffdd\036\uffdd\037" +
    "\uffdd\040\uffdd\041\uffdd\043\uffdd\001\002\000\016\034\ufff2" +
    "\036\ufff2\037\ufff2\040\ufff2\041\ufff2\043\ufff2\001\002\000" +
    "\010\034\ufff8\036\036\037\035\001\002\000\022\012\022" +
    "\013\027\042\026\060\030\061\020\062\025\063\024\064" +
    "\032\001\002\000\022\012\022\013\027\042\026\060\030" +
    "\061\020\062\025\063\024\064\032\001\002\000\016\034" +
    "\ufff7\036\ufff7\037\ufff7\040\040\041\041\043\ufff7\001\002" +
    "\000\022\012\022\013\027\042\026\060\030\061\020\062" +
    "\025\063\024\064\032\001\002\000\022\012\022\013\027" +
    "\042\026\060\030\061\020\062\025\063\024\064\032\001" +
    "\002\000\016\034\ufff3\036\ufff3\037\ufff3\040\ufff3\041\ufff3" +
    "\043\ufff3\001\002\000\016\034\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\043\ufff4\001\002\000\016\034\ufff6\036\ufff6" +
    "\037\ufff6\040\040\041\041\043\ufff6\001\002\000\010\036" +
    "\036\037\035\043\046\001\002\000\016\034\ufff0\036\ufff0" +
    "\037\ufff0\040\ufff0\041\ufff0\043\ufff0\001\002\000\004\002" +
    "\ufffd\001\002\000\012\002\ufff9\033\ufff9\034\ufff9\057\ufff9" +
    "\001\002\000\004\002\000\001\002\000\004\060\055\001" +
    "\002\000\012\002\ufffb\033\ufffb\034\ufffb\057\ufffb\001\002" +
    "\000\022\012\ufffc\013\ufffc\042\ufffc\060\ufffc\061\ufffc\062" +
    "\ufffc\063\ufffc\064\ufffc\001\002\000\012\002\ufffa\033\ufffa" +
    "\034\ufffa\057\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\053\000\014\002\013\013\015\014\003\015\005\016" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\003\030\007\022\010\033\011" +
    "\020\012\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\030\010\044" +
    "\011\020\012\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\030\011\043\012\032\001" +
    "\001\000\010\003\030\011\036\012\032\001\001\000\002" +
    "\001\001\000\006\003\030\012\042\001\001\000\006\003" +
    "\030\012\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



     public static int errors = 0;
    public static kcScanner s;

    public parser(java.io.Reader input) {
        super(s=new kcScanner(input));
    }

    public void report_error(String message, Object info) {
        if (info instanceof java_cup.runtime.Symbol){
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)info);
            errors++;
            System.err.println("  " + errors + "==> " +" " + message
                    + "\n\t\tline: "+ (s.left+1) + ", column: "+(s.right+1) + "\n");
        } else {
            StringBuffer m = new StringBuffer("Error ");
            if (info instanceof java_cup.runtime.Symbol) {
                m.append("(" + info.toString() + ")");
            }
            m.append(" : " + message);
            System.err.println(m);
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // variable_statement ::= assign_statement 
            {
              Object RESULT =null;
		 System.out.println("assign_statement a variable_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= variable_statement EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // variable_statement ::= declaration_statement 
            {
              Object RESULT =null;
		 System.out.println("declaration_statement a variable_statement"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // variable_statement ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 parser.report_error("variable_declaration",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // assign_statement ::= pre_assign_statement OPM_S END 
            {
              Object RESULT =null;
		 System.out.println("Asignando like a boss"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // pre_assign_statement ::= declaration_statement ASSIGN 
            {
              Object RESULT =null;
		 System.out.println("Pre-Asignando like a boss"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pre_assign_statement",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration_statement ::= declaration_statement END 
            {
              Object RESULT =null;
		 System.out.println("Declarando like a boss"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration_statement ::= declaration_statement COMMA ID 
            {
              Object RESULT =null;
		 System.out.println("Declarando varios like a boss"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration_statement ::= type_specifier ID 
            {
              Object RESULT =null;
		 System.out.println("Pre-Declarando like a boss"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // OPM_S ::= OPM_E 
            {
              Object RESULT =null;
		 System.out.println("OPM_S = OPM_E"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_S",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // OPM_E ::= OPM_E ADD OPM_T 
            {
              Object RESULT =null;
		 System.out.println("OPM_E: Sumando"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OPM_E ::= OPM_E MIN OPM_T 
            {
              Object RESULT =null;
		 System.out.println("OPM_E: Restando"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OPM_E ::= OPM_T 
            {
              Object RESULT =null;
		 System.out.println("OPM_E: OPM_T"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_E",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OPM_T ::= OPM_T MUL OPM_F 
            {
              Object RESULT =null;
		 System.out.println("OPM_T: Multiplicando"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OPM_T ::= OPM_T DIV OPM_F 
            {
              Object RESULT =null;
		 System.out.println("OPM_T: Dividiendo"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // OPM_T ::= OPM_F 
            {
              Object RESULT =null;
		 System.out.println("OPM_T: OPM_F"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_T",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OPM_F ::= type_value 
            {
              Object RESULT =null;
		 System.out.println("OPM_F: type_value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_F",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OPM_F ::= OPAR OPM_E CPAR 
            {
              Object RESULT =null;
		 System.out.println("OPM_F: (E)"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("OPM_F",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // equals_operator ::= EQU 
            {
              Object RESULT =null;
		 System.out.println("equals_operator: equal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equals_operator",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // arithmetic_operator ::= GREATEREQ 
            {
              Object RESULT =null;
		 System.out.println("arithmetic_operator: great or equal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // arithmetic_operator ::= LESSEQ 
            {
              Object RESULT =null;
		 System.out.println("arithmetic_operator: less or equal"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // arithmetic_operator ::= GREATER 
            {
              Object RESULT =null;
		 System.out.println("arithmetic_operator: greater"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // arithmetic_operator ::= LESS 
            {
              Object RESULT =null;
		 System.out.println("arithmetic_operator: less"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arithmetic_operator",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // logical_operator ::= NOT 
            {
              Object RESULT =null;
		 System.out.println("logical_operator: not"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // logical_operator ::= OR 
            {
              Object RESULT =null;
		 System.out.println("logical_operator: or"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // logical_operator ::= AND 
            {
              Object RESULT =null;
		 System.out.println("logical_operator: and"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // logical_operator ::= NEQU 
            {
              Object RESULT =null;
		 System.out.println("logical_operator: notEqual"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logical_operator",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_specifier ::= CHAR 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: char"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_specifier ::= INTEGER 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: integer"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // type_specifier ::= DOUBLE 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: double"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type_specifier ::= STRING 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: string"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type_specifier ::= BOOLEAN 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: bool"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type_specifier ::= VOID 
            {
              Object RESULT =null;
		 System.out.println("type_specifier: void"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_value ::= ID 
            {
              Object RESULT =null;
		 System.out.println("type_value: id"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_value ::= INT 
            {
              Object RESULT =null;
		 System.out.println("type_value: int value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_value ::= DOUBLEVALUE 
            {
              Object RESULT =null;
		 System.out.println("type_value: double value"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_value ::= STRINGCONTENT 
            {
              Object RESULT =null;
		 System.out.println("type_value: string content"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_value ::= CHARCONTENT 
            {
              Object RESULT =null;
		 System.out.println("type_value: char content"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_value ::= TRUE 
            {
              Object RESULT =null;
		 System.out.println("type_value: true"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_value ::= FALSE 
            {
              Object RESULT =null;
		 System.out.println("type_value: false"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_value",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
