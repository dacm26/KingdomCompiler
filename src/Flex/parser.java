
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20141202 (SVN rev 60)
//----------------------------------------------------

package Flex;

import java_cup.runtime.*;
import AST.astTreeDeclaration.*;
import AST.mainFunctionDeclaration.*;
import AST.externalDeclaration.*;
import AST.mainFunction.*;
import AST.functionDefinition.*;
import AST.jumpStatement.*;
import AST.iterationStatement.*;
import AST.selectionStatement.*;
import AST.statementList.*;
import AST.declarationList.*;
import AST.compoundStatement.*;
import AST.labeledStatement.*;
import AST.statement.*;
import AST.identifierList.*;
import AST.parameterList.*;
import AST.mainDeclarator.*;
import AST.typeSpecifier.*;
import AST.variableTypeSpecifier.*;
import AST.declaration.*;
import AST.assignmentExpression.*;
import AST.conditionalExpression.*;
import AST.equalityExpression.*;
import AST.relationalExpression.*;
import AST.additiveExpression.*;
import AST.multiplicativeExpression.*;
import AST.basicExpression.*;
import AST.functionCallsExpression.*;
import AST.ioExpressions.*;
import AST.primaryExpression.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20141202 (SVN rev 60) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\133\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\004\000\002\004\004\000\002\004\002" +
    "\000\002\005\005\000\002\006\007\000\002\006\010\000" +
    "\002\007\004\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\010\007\000\002\010\016\000\002\011" +
    "\007\000\002\011\011\000\002\011\011\000\002\012\003" +
    "\000\002\012\004\000\002\013\003\000\002\013\004\000" +
    "\002\014\004\000\002\014\005\000\002\014\005\000\002" +
    "\014\006\000\002\015\007\000\002\015\005\000\002\015" +
    "\002\000\002\016\003\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\017\003\000\002\017\005\000" +
    "\002\020\004\000\002\020\006\000\002\021\006\000\002" +
    "\021\005\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\024\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\025" +
    "\007\000\002\025\006\000\002\026\003\000\002\026\005" +
    "\000\002\026\005\000\002\027\003\000\002\027\005\000" +
    "\002\027\005\000\002\030\003\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\030\005\000\002\031" +
    "\003\000\002\031\005\000\002\031\005\000\002\032\003" +
    "\000\002\032\005\000\002\032\005\000\002\035\007\000" +
    "\002\035\011\000\002\035\007\000\002\034\006\000\002" +
    "\034\007\000\002\037\002\000\002\034\010\000\002\040" +
    "\002\000\002\034\011\000\002\033\003\000\002\033\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\024\004\005\005\011\006\016\007\024\010" +
    "\014\011\013\025\022\026\023\053\021\001\002\000\004" +
    "\002\001\001\002\000\022\023\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\001\002\000\024" +
    "\004\005\005\011\006\016\007\024\010\014\011\013\025" +
    "\022\026\023\053\021\001\002\000\046\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\016\uffcc\021\uffcc\022\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\040\uffcc\041\uffcc\053\uffcc\001\002\000\046\004\uffcd\005" +
    "\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\016\uffcd\021\uffcd\022\uffcd\024\uffcd\025\uffcd\026" +
    "\uffcd\040\uffcd\041\uffcd\053\uffcd\001\002\000\022\023\uffd6" +
    "\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061" +
    "\uffd6\001\002\000\020\002\ufffc\004\005\005\011\006\016" +
    "\007\024\010\014\011\013\001\002\000\022\023\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\001\002\000\022\023\uffd7\053\uffd7\054\uffd7\055\uffd7\056" +
    "\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\004\002\264" +
    "\001\002\000\022\023\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000\046\004\uffce" +
    "\005\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\016\uffce\021\uffce\022\uffce\024\uffce\025\uffce" +
    "\026\uffce\040\uffce\041\uffce\053\uffce\001\002\000\022\023" +
    "\132\053\134\054\036\055\041\056\040\057\045\060\037" +
    "\061\042\001\002\000\006\036\053\052\054\001\002\000" +
    "\004\036\031\001\002\000\004\036\025\001\002\000\022" +
    "\023\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060" +
    "\uffda\061\uffda\001\002\000\004\053\026\001\002\000\004" +
    "\037\027\001\002\000\004\030\030\001\002\000\046\004" +
    "\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\011\uffb6\012\uffb6" +
    "\013\uffb6\014\uffb6\016\uffb6\021\uffb6\022\uffb6\024\uffb6\025" +
    "\uffb6\026\uffb6\040\uffb6\041\uffb6\053\uffb6\001\002\000\004" +
    "\057\032\001\002\000\006\027\033\037\034\001\002\000" +
    "\020\053\043\054\036\055\041\056\040\057\045\060\037" +
    "\061\042\001\002\000\004\030\035\001\002\000\046\004" +
    "\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011\uffb8\012\uffb8" +
    "\013\uffb8\014\uffb8\016\uffb8\021\uffb8\022\uffb8\024\uffb8\025" +
    "\uffb8\026\uffb8\040\uffb8\041\uffb8\053\uffb8\001\002\000\042" +
    "\027\uffac\030\uffac\031\uffac\032\uffac\033\uffac\034\uffac\035" +
    "\uffac\037\uffac\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac" +
    "\047\uffac\050\uffac\051\uffac\001\002\000\042\027\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\035\uffa8\037\uffa8" +
    "\042\uffa8\043\uffa8\044\uffa8\045\uffa8\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\001\002\000\042\027\uffa9\030\uffa9\031\uffa9" +
    "\032\uffa9\033\uffa9\034\uffa9\035\uffa9\037\uffa9\042\uffa9\043" +
    "\uffa9\044\uffa9\045\uffa9\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\001\002\000\042\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\037\uffaa\042\uffaa\043\uffaa\044\uffaa" +
    "\045\uffaa\046\uffaa\047\uffaa\050\uffaa\051\uffaa\001\002\000" +
    "\042\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7" +
    "\035\uffa7\037\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\046" +
    "\uffa7\047\uffa7\050\uffa7\051\uffa7\001\002\000\010\027\uffad" +
    "\030\uffad\037\uffad\001\002\000\006\027\047\037\050\001" +
    "\002\000\042\027\uffab\030\uffab\031\uffab\032\uffab\033\uffab" +
    "\034\uffab\035\uffab\037\uffab\042\uffab\043\uffab\044\uffab\045" +
    "\uffab\046\uffab\047\uffab\050\uffab\051\uffab\001\002\000\010" +
    "\027\uffe0\030\uffe0\037\uffe0\001\002\000\020\053\043\054" +
    "\036\055\041\056\040\057\045\060\037\061\042\001\002" +
    "\000\004\030\051\001\002\000\046\004\uffb7\005\uffb7\006" +
    "\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7\014\uffb7" +
    "\016\uffb7\021\uffb7\022\uffb7\024\uffb7\025\uffb7\026\uffb7\040" +
    "\uffb7\041\uffb7\053\uffb7\001\002\000\010\027\uffdf\030\uffdf" +
    "\037\uffdf\001\002\000\022\037\117\053\043\054\036\055" +
    "\041\056\040\057\045\060\037\061\042\001\002\000\020" +
    "\053\062\054\036\055\041\056\040\057\045\060\037\061" +
    "\042\001\002\000\034\030\uffc3\031\uffc3\032\100\033\077" +
    "\037\uffc3\042\uffc3\043\uffc3\044\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\050\uffc3\051\uffc3\001\002\000\020\030\uffc9\031\uffc9" +
    "\037\uffc9\046\uffc9\047\uffc9\050\112\051\113\001\002\000" +
    "\010\030\110\046\107\047\106\001\002\000\040\030\uffae" +
    "\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae\037\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\001\002\000\030\030\uffc6\031\uffc6\037\uffc6\042" +
    "\072\043\073\044\074\045\075\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\001\002\000\042\030\uffad\031\uffad\032\uffad\033" +
    "\uffad\034\uffad\035\uffad\036\053\037\uffad\042\uffad\043\uffad" +
    "\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad\001" +
    "\002\000\040\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\066" +
    "\035\067\037\uffbe\042\uffbe\043\uffbe\044\uffbe\045\uffbe\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\001\002\000\040\030\uffaf" +
    "\031\uffaf\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\001\002\000\040\030\uffbb\031\uffbb\032\uffbb\033" +
    "\uffbb\034\uffbb\035\uffbb\037\uffbb\042\uffbb\043\uffbb\044\uffbb" +
    "\045\uffbb\046\uffbb\047\uffbb\050\uffbb\051\uffbb\001\002\000" +
    "\020\053\062\054\036\055\041\056\040\057\045\060\037" +
    "\061\042\001\002\000\020\053\062\054\036\055\041\056" +
    "\040\057\045\060\037\061\042\001\002\000\040\030\uffb9" +
    "\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9\042" +
    "\uffb9\043\uffb9\044\uffb9\045\uffb9\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\001\002\000\040\030\uffba\031\uffba\032\uffba\033" +
    "\uffba\034\uffba\035\uffba\037\uffba\042\uffba\043\uffba\044\uffba" +
    "\045\uffba\046\uffba\047\uffba\050\uffba\051\uffba\001\002\000" +
    "\020\053\062\054\036\055\041\056\040\057\045\060\037" +
    "\061\042\001\002\000\020\053\062\054\036\055\041\056" +
    "\040\057\045\060\037\061\042\001\002\000\020\053\062" +
    "\054\036\055\041\056\040\057\045\060\037\061\042\001" +
    "\002\000\020\053\062\054\036\055\041\056\040\057\045" +
    "\060\037\061\042\001\002\000\034\030\uffc2\031\uffc2\032" +
    "\100\033\077\037\uffc2\042\uffc2\043\uffc2\044\uffc2\045\uffc2" +
    "\046\uffc2\047\uffc2\050\uffc2\051\uffc2\001\002\000\020\053" +
    "\062\054\036\055\041\056\040\057\045\060\037\061\042" +
    "\001\002\000\020\053\062\054\036\055\041\056\040\057" +
    "\045\060\037\061\042\001\002\000\040\030\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\066\035\067\037\uffbd\042\uffbd\043" +
    "\uffbd\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd" +
    "\001\002\000\040\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034" +
    "\066\035\067\037\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc" +
    "\046\uffbc\047\uffbc\050\uffbc\051\uffbc\001\002\000\034\030" +
    "\uffc1\031\uffc1\032\100\033\077\037\uffc1\042\uffc1\043\uffc1" +
    "\044\uffc1\045\uffc1\046\uffc1\047\uffc1\050\uffc1\051\uffc1\001" +
    "\002\000\034\030\uffc0\031\uffc0\032\100\033\077\037\uffc0" +
    "\042\uffc0\043\uffc0\044\uffc0\045\uffc0\046\uffc0\047\uffc0\050" +
    "\uffc0\051\uffc0\001\002\000\034\030\uffbf\031\uffbf\032\100" +
    "\033\077\037\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046" +
    "\uffbf\047\uffbf\050\uffbf\051\uffbf\001\002\000\020\053\062" +
    "\054\036\055\041\056\040\057\045\060\037\061\042\001" +
    "\002\000\020\053\062\054\036\055\041\056\040\057\045" +
    "\060\037\061\042\001\002\000\050\004\uffca\005\uffca\006" +
    "\uffca\007\uffca\010\uffca\011\uffca\012\uffca\013\uffca\014\uffca" +
    "\016\uffca\021\uffca\022\uffca\024\uffca\025\uffca\026\uffca\037" +
    "\uffca\040\uffca\041\uffca\053\uffca\001\002\000\020\030\uffc7" +
    "\031\uffc7\037\uffc7\046\uffc7\047\uffc7\050\112\051\113\001" +
    "\002\000\020\053\062\054\036\055\041\056\040\057\045" +
    "\060\037\061\042\001\002\000\020\053\062\054\036\055" +
    "\041\056\040\057\045\060\037\061\042\001\002\000\030" +
    "\030\uffc5\031\uffc5\037\uffc5\042\072\043\073\044\074\045" +
    "\075\046\uffc5\047\uffc5\050\uffc5\051\uffc5\001\002\000\030" +
    "\030\uffc4\031\uffc4\037\uffc4\042\072\043\073\044\074\045" +
    "\075\046\uffc4\047\uffc4\050\uffc4\051\uffc4\001\002\000\020" +
    "\030\uffc8\031\uffc8\037\uffc8\046\uffc8\047\uffc8\050\112\051" +
    "\113\001\002\000\006\003\126\030\127\001\002\000\006" +
    "\027\047\037\121\001\002\000\006\003\122\030\123\001" +
    "\002\000\004\030\uffb1\001\002\000\104\004\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\013\uffb4\014" +
    "\uffb4\016\uffb4\021\uffb4\022\uffb4\024\uffb4\025\uffb4\026\uffb4" +
    "\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037" +
    "\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\001\002\000" +
    "\004\030\125\001\002\000\104\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\010\uffb0\011\uffb0\012\uffb0\013\uffb0\014\uffb0\016" +
    "\uffb0\021\uffb0\022\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0" +
    "\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\037\uffb0\040" +
    "\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0\046\uffb0" +
    "\047\uffb0\050\uffb0\051\uffb0\053\uffb0\001\002\000\004\030" +
    "\uffb3\001\002\000\104\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\011\uffb5\012\uffb5\013\uffb5\014\uffb5\016\uffb5\021" +
    "\uffb5\022\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5\031\uffb5" +
    "\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\040\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\053\uffb5\001\002\000\004\030\131\001" +
    "\002\000\104\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2" +
    "\011\uffb2\012\uffb2\013\uffb2\014\uffb2\016\uffb2\021\uffb2\022" +
    "\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\043\uffb2\044\uffb2\045\uffb2\046\uffb2\047\uffb2\050\uffb2" +
    "\051\uffb2\053\uffb2\001\002\000\004\036\246\001\002\000" +
    "\004\040\143\001\002\000\010\027\uffad\030\uffad\052\137" +
    "\001\002\000\006\027\047\030\136\001\002\000\046\004" +
    "\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf" +
    "\013\uffcf\014\uffcf\016\uffcf\021\uffcf\022\uffcf\024\uffcf\025" +
    "\uffcf\026\uffcf\040\uffcf\041\uffcf\053\uffcf\001\002\000\020" +
    "\053\062\054\036\055\041\056\040\057\045\060\037\061" +
    "\042\001\002\000\010\030\141\046\107\047\106\001\002" +
    "\000\050\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\011" +
    "\uffcb\012\uffcb\013\uffcb\014\uffcb\016\uffcb\021\uffcb\022\uffcb" +
    "\024\uffcb\025\uffcb\026\uffcb\037\uffcb\040\uffcb\041\uffcb\053" +
    "\uffcb\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\010\ufffb\011\ufffb\001\002\000\046\004\005\005" +
    "\011\006\016\007\024\010\014\011\013\012\164\013\152" +
    "\014\156\016\154\021\162\022\145\024\153\025\022\026" +
    "\023\040\143\041\155\053\021\001\002\000\046\004\uffed" +
    "\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed\013" +
    "\uffed\014\uffed\016\uffed\021\uffed\022\uffed\024\uffed\025\uffed" +
    "\026\uffed\040\uffed\041\uffed\053\uffed\001\002\000\004\030" +
    "\245\001\002\000\032\012\uffe2\013\uffe2\014\uffe2\015\uffe2" +
    "\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\024\uffe2\040" +
    "\uffe2\041\uffe2\001\002\000\020\053\134\054\036\055\041" +
    "\056\040\057\045\060\037\061\042\001\002\000\024\012" +
    "\uffef\013\uffef\014\uffef\016\uffef\021\uffef\022\uffef\024\uffef" +
    "\040\uffef\041\uffef\001\002\000\032\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1" +
    "\024\uffe1\040\uffe1\041\uffe1\001\002\000\004\036\241\001" +
    "\002\000\022\030\237\053\062\054\036\055\041\056\040" +
    "\057\045\060\037\061\042\001\002\000\004\036\220\001" +
    "\002\000\050\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\024\uffeb\040\uffeb" +
    "\041\uffeb\001\002\000\004\036\212\001\002\000\032\012" +
    "\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4" +
    "\021\uffe4\022\uffe4\024\uffe4\040\uffe4\041\uffe4\001\002\000" +
    "\024\012\164\013\152\014\156\016\154\021\162\022\145" +
    "\024\153\040\143\041\211\001\002\000\046\004\005\005" +
    "\011\006\016\007\024\010\014\011\013\012\164\013\152" +
    "\014\156\016\154\021\162\022\145\024\153\025\022\026" +
    "\023\040\143\041\205\053\021\001\002\000\004\030\203" +
    "\001\002\000\032\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\024\uffe3\040\uffe3" +
    "\041\uffe3\001\002\000\004\036\165\001\002\000\016\004" +
    "\005\005\011\006\016\007\024\010\014\011\013\001\002" +
    "\000\004\053\167\001\002\000\004\052\170\001\002\000" +
    "\020\053\062\054\036\055\041\056\040\057\045\060\037" +
    "\061\042\001\002\000\010\030\172\046\107\047\106\001" +
    "\002\000\020\053\062\054\036\055\041\056\040\057\045" +
    "\060\037\061\042\001\002\000\010\030\174\046\107\047" +
    "\106\001\002\000\020\004\005\005\011\006\016\007\024" +
    "\010\014\011\013\053\175\001\002\000\004\052\054\001" +
    "\002\000\004\053\202\001\002\000\004\037\200\001\002" +
    "\000\022\012\164\013\152\014\156\016\154\021\162\022" +
    "\145\024\153\040\143\001\002\000\032\012\ufff3\013\ufff3" +
    "\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022" +
    "\ufff3\024\ufff3\040\ufff3\041\ufff3\001\002\000\004\052\137" +
    "\001\002\000\032\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\021\ufff7\022\ufff7\024\ufff7\040\ufff7" +
    "\041\ufff7\001\002\000\046\004\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\011\uffec\012\uffec\013\uffec\014\uffec\016\uffec" +
    "\021\uffec\022\uffec\024\uffec\025\uffec\026\uffec\040\uffec\041" +
    "\uffec\053\uffec\001\002\000\050\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014" +
    "\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022\uffe9" +
    "\024\uffe9\040\uffe9\041\uffe9\001\002\000\024\012\164\013" +
    "\152\014\156\016\154\021\162\022\145\024\153\040\143" +
    "\041\210\001\002\000\024\012\uffee\013\uffee\014\uffee\016" +
    "\uffee\021\uffee\022\uffee\024\uffee\040\uffee\041\uffee\001\002" +
    "\000\050\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\021\uffe8\022\uffe8\024\uffe8\040\uffe8\041" +
    "\uffe8\001\002\000\050\002\uffea\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\012\uffea\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\024\uffea" +
    "\040\uffea\041\uffea\001\002\000\020\053\062\054\036\055" +
    "\041\056\040\057\045\060\037\061\042\001\002\000\010" +
    "\037\214\046\107\047\106\001\002\000\022\012\164\013" +
    "\152\014\156\016\154\021\162\022\145\024\153\040\143" +
    "\001\002\000\032\012\ufff2\013\ufff2\014\ufff2\015\216\016" +
    "\ufff2\017\ufff2\020\ufff2\021\ufff2\022\ufff2\024\ufff2\040\ufff2" +
    "\041\ufff2\001\002\000\022\012\164\013\152\014\156\016" +
    "\154\021\162\022\145\024\153\040\143\001\002\000\032" +
    "\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020" +
    "\ufff1\021\ufff1\022\ufff1\024\ufff1\040\ufff1\041\ufff1\001\002" +
    "\000\020\053\062\054\036\055\041\056\040\057\045\060" +
    "\037\061\042\001\002\000\010\037\222\046\107\047\106" +
    "\001\002\000\004\040\223\001\002\000\010\017\226\020" +
    "\224\041\uffe5\001\002\000\004\031\234\001\002\000\004" +
    "\041\233\001\002\000\020\053\062\054\036\055\041\056" +
    "\040\057\045\060\037\061\042\001\002\000\010\031\230" +
    "\046\107\047\106\001\002\000\022\012\164\013\152\014" +
    "\156\016\154\021\162\022\145\024\153\040\143\001\002" +
    "\000\010\017\226\020\224\041\uffe5\001\002\000\004\041" +
    "\uffe7\001\002\000\032\012\ufff0\013\ufff0\014\ufff0\015\ufff0" +
    "\016\ufff0\017\ufff0\020\ufff0\021\ufff0\022\ufff0\024\ufff0\040" +
    "\ufff0\041\ufff0\001\002\000\022\012\164\013\152\014\156" +
    "\016\154\021\162\022\145\024\153\040\143\001\002\000" +
    "\004\041\uffe6\001\002\000\010\030\240\046\107\047\106" +
    "\001\002\000\032\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016" +
    "\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\024\ufff6\040\ufff6" +
    "\041\ufff6\001\002\000\032\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\024\ufff5" +
    "\040\ufff5\041\ufff5\001\002\000\020\053\062\054\036\055" +
    "\041\056\040\057\045\060\037\061\042\001\002\000\010" +
    "\037\243\046\107\047\106\001\002\000\022\012\164\013" +
    "\152\014\156\016\154\021\162\022\145\024\153\040\143" +
    "\001\002\000\032\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016" +
    "\ufff4\017\ufff4\020\ufff4\021\ufff4\022\ufff4\024\ufff4\040\ufff4" +
    "\041\ufff4\001\002\000\032\012\ufff8\013\ufff8\014\ufff8\015" +
    "\ufff8\016\ufff8\017\ufff8\020\ufff8\021\ufff8\022\ufff8\024\ufff8" +
    "\040\ufff8\041\ufff8\001\002\000\016\004\247\005\254\006" +
    "\250\007\255\010\251\037\256\001\002\000\004\053\uffd3" +
    "\001\002\000\004\053\uffd2\001\002\000\004\053\uffd1\001" +
    "\002\000\004\053\263\001\002\000\006\027\257\037\260" +
    "\001\002\000\004\053\uffd0\001\002\000\004\053\uffd4\001" +
    "\002\000\004\040\uffdb\001\002\000\014\004\247\005\254" +
    "\006\250\007\255\010\251\001\002\000\004\040\uffdc\001" +
    "\002\000\004\053\262\001\002\000\006\027\uffdd\037\uffdd" +
    "\001\002\000\006\027\uffde\037\uffde\001\002\000\004\002" +
    "\000\001\002\000\020\002\ufffc\004\005\005\011\006\016" +
    "\007\024\010\014\011\013\001\002\000\004\053\270\001" +
    "\002\000\004\002\ufffe\001\002\000\004\036\271\001\002" +
    "\000\016\004\247\005\254\006\250\007\255\010\251\037" +
    "\273\001\002\000\006\027\257\037\275\001\002\000\004" +
    "\040\143\001\002\000\020\002\ufffa\004\ufffa\005\ufffa\006" +
    "\ufffa\007\ufffa\010\ufffa\011\ufffa\001\002\000\004\040\143" +
    "\001\002\000\020\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007" +
    "\ufff9\010\ufff9\011\ufff9\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\276\000\022\002\014\003\003\005\011\022\017\024" +
    "\005\025\016\034\006\035\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\003\277\005\011\022\017\024" +
    "\005\025\016\034\006\035\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\266\006" +
    "\264\022\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\134\021\132\036\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\043\036\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\036" +
    "\051\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\117\036\045\001\001\000\022\026" +
    "\056\027\055\030\060\031\054\032\062\033\064\034\057" +
    "\036\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\033\070\034\057\036\063\001\001\000\010" +
    "\033\067\034\057\036\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\031\104\032\062\033\064\034\057" +
    "\036\063\001\001\000\014\031\103\032\062\033\064\034" +
    "\057\036\063\001\001\000\014\031\102\032\062\033\064" +
    "\034\057\036\063\001\001\000\014\031\075\032\062\033" +
    "\064\034\057\036\063\001\001\000\002\001\001\000\012" +
    "\032\101\033\064\034\057\036\063\001\001\000\012\032" +
    "\100\033\064\034\057\036\063\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\027\115\030\060\031\054\032\062" +
    "\033\064\034\057\036\063\001\001\000\020\027\110\030" +
    "\060\031\054\032\062\033\064\034\057\036\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\030\114\031" +
    "\054\032\062\033\064\034\057\036\063\001\001\000\016" +
    "\030\113\031\054\032\062\033\064\034\057\036\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\123\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\037\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\141\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\026\137\027\055\030\060" +
    "\031\054\032\062\033\064\034\057\036\063\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\007\150\010\145\011\162\012\157\013\160\014\156\016" +
    "\147\022\146\024\143\025\016\034\006\035\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\134\036\045\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\026\235\027\055\030" +
    "\060\031\054\032\062\033\064\034\057\036\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\150\010\145\011\162\014\156" +
    "\016\206\001\001\000\030\007\150\010\145\011\162\012" +
    "\205\014\156\016\147\022\146\024\203\025\016\034\006" +
    "\035\007\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\165\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\170\027\055\030\060\031" +
    "\054\032\062\033\064\034\057\036\063\001\001\000\002" +
    "\001\001\000\022\026\172\027\055\030\060\031\054\032" +
    "\062\033\064\034\057\036\063\001\001\000\002\001\001" +
    "\000\006\022\175\025\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\150\010\145" +
    "\011\162\014\156\016\200\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\150\010\145\011\162\014\156\016" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\026\212\027\055\030\060\031\054\032" +
    "\062\033\064\034\057\036\063\001\001\000\002\001\001" +
    "\000\014\007\150\010\145\011\162\014\156\016\214\001" +
    "\001\000\002\001\001\000\014\007\150\010\145\011\162" +
    "\014\156\016\216\001\001\000\002\001\001\000\022\026" +
    "\220\027\055\030\060\031\054\032\062\033\064\034\057" +
    "\036\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\224\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\026\226\027\055\030\060\031\054\032\062\033" +
    "\064\034\057\036\063\001\001\000\002\001\001\000\014" +
    "\007\150\010\145\011\162\014\156\016\230\001\001\000" +
    "\004\015\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\150\010\145\011\162\014\156\016\234\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\026\241\027\055\030\060\031" +
    "\054\032\062\033\064\034\057\036\063\001\001\000\002" +
    "\001\001\000\014\007\150\010\145\011\162\014\156\016" +
    "\243\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\020\252\023\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\004\276\006\264\022\265\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\020\271\023" +
    "\251\001\001\000\002\001\001\000\004\014\273\001\001" +
    "\000\002\001\001\000\004\014\275\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static kcScanner s;
    public static int errors=0;
    public static boolean print=true;
   	public parser(java.io.Reader input) {
        super(s=new kcScanner(input));
    }
    public void report_error(String message, Object info) {
    	if (info instanceof String){
    		errors++; 
    		System.err.println("  "+ errors + "==> " + info + " "+ message + 
    			"\n       Parsing resumed from 2nd token before" + s.current_lexeme()+"\n");
    	}
    	else {
    		StringBuffer m = new StringBuffer("Error ");
    		if (info instanceof java_cup.runtime.Symbol) 
    			m.append( "("+info.toString()+")" );     
    		Symbol temp = (Symbol) info;
    		m.append(" : "+message+ " in "+"line: "+ (temp.left+1) + ", column: "+(temp.right+1));   
    		System.err.println(m);
    	}
    }

    public void report_fatal_error(String message, Object info) {
    	try{
    		report_error(message, info);
    	}catch(Exception e){
    		print=false;
    		System.err.println("Couldn't repair from the error.");
    	}
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ast_tree_declaration ::= main_function_declaration 
            {
              astTreeDeclaration RESULT =null;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*Imprimir tree*/ 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ast_tree_declaration",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ast_tree_declaration EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		astTreeDeclaration start_val = (astTreeDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // main_function_declaration ::= declaration main_function_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mFDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mFDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		mainFunctionDeclaration mFD = (mainFunctionDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_Declaration(d,mFD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // main_function_declaration ::= main_function external_declaration 
            {
              mainFunctionDeclaration RESULT =null;
		int mFleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mFright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mainFunction mF = (mainFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		externalDeclaration eD = (externalDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MFD_MainFunction(mF,eD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function_declaration",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // external_declaration ::= function_definition external_declaration 
            {
              externalDeclaration RESULT =null;
		int fDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		functionDefinition fD = (functionDefinition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		externalDeclaration eD = (externalDeclaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ED_ExternalDeclaration(fD,eD); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // external_declaration ::= 
            {
              externalDeclaration RESULT =null;
		 RESULT = new ED_Lamda(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("external_declaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // main_function ::= type_specifier main_declarator compound_statement 
            {
              mainFunction RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mDright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		mainDeclarator mD = (mainDeclarator)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MF_MainFunction(tS,mD,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_function",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function_definition ::= type_specifier ID OPAR CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // function_definition ::= type_specifier ID OPAR parameter_list CPAR compound_statement 
            {
              functionDefinition RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FD_FunctionDefinition(tS,id,pL,cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_definition",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // jump_statement ::= CONTINUE END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Continue(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // jump_statement ::= BREAK END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Break(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // jump_statement ::= RETURN END 
            {
              jumpStatement RESULT =null;
		 RESULT = new JS_Return(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // jump_statement ::= RETURN conditional_expression END 
            {
              jumpStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new JS_Return(cE); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jump_statement",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // iteration_statement ::= WHILE OPAR conditional_expression CPAR statement 
            {
              iterationStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_While(cE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // iteration_statement ::= FOR OPAR type_specifier ID ASSIGN conditional_expression END conditional_expression END assignment_expression CPAR statement 
            {
              iterationStatement RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cE1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cE1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE1 = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IT_For(tS,id,cE,cE1,aE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iteration_statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // selection_statement ::= IF OPAR conditional_expression CPAR statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_If(cE,stm); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // selection_statement ::= IF OPAR conditional_expression CPAR statement ELSE statement 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm1 = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SS_IfElse(cE,stm,stm1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // selection_statement ::= SWITCH OPAR conditional_expression CPAR OCBRA labeled_statement CCBRA 
            {
              selectionStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SS_Switch(cE,lS); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selection_statement",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement_list ::= statement 
            {
              statementList RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_Statement(stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement_list ::= statement_list statement 
            {
              statementList RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new SL_StatementList(sL,stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaration_list ::= declaration 
            {
              declarationList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DL_Declaration(d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaration_list ::= declaration_list declaration 
            {
              declarationList RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		declaration d = (declaration)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DL_DeclarationList(dL,d);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compound_statement ::= OCBRA CCBRA 
            {
              compoundStatement RESULT =null;
		 RESULT = new CS_Empty();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compound_statement ::= OCBRA statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_StatementList(sL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compound_statement ::= OCBRA declaration_list CCBRA 
            {
              compoundStatement RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_DeclarationList(dL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // compound_statement ::= OCBRA declaration_list statement_list CCBRA 
            {
              compoundStatement RESULT =null;
		int dLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		declarationList dL = (declarationList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statementList sL = (statementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CS_Compound(dL,sL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compound_statement",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // labeled_statement ::= CASE conditional_expression COLON statement labeled_statement 
            {
              labeledStatement RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		labeledStatement lS = (labeledStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Case(cE,stm,lS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // labeled_statement ::= DEFAULT COLON statement 
            {
              labeledStatement RESULT =null;
		int stmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		statement stm = (statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LS_Default(stm);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // labeled_statement ::= 
            {
              labeledStatement RESULT =null;
		 RESULT = new LS_Lamda();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("labeled_statement",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // statement ::= compound_statement 
            {
              statement RESULT =null;
		int cSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		compoundStatement cS = (compoundStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_CompoundStatement(cS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // statement ::= selection_statement 
            {
              statement RESULT =null;
		int sSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		selectionStatement sS = (selectionStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_SelectionStatement(sS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // statement ::= iteration_statement 
            {
              statement RESULT =null;
		int iSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		iterationStatement iS = (iterationStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_IterationStatement(iS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // statement ::= jump_statement 
            {
              statement RESULT =null;
		int jSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int jSright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		jumpStatement jS = (jumpStatement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new S_JumpStatement(jS);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("statement",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // identifier_list ::= primary_expression 
            {
              identifierList RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression id = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_Id(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // identifier_list ::= identifier_list COMMA primary_expression 
            {
              identifierList RESULT =null;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression id = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IL_identifierList(iL,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifier_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parameter_list ::= variable_type_specifier ID 
            {
              parameterList RESULT =null;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VTS_Type vTS = (VTS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_Id(vTS,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parameter_list ::= parameter_list COMMA variable_type_specifier ID 
            {
              parameterList RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vTSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vTSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VTS_Type vTS = (VTS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PL_ParameterList(pL,vTS,id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("parameter_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // main_declarator ::= MAIN OPAR parameter_list CPAR 
            {
              mainDeclarator RESULT =null;
		int pLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		parameterList pL = (parameterList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new MD_Declaration(pL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // main_declarator ::= MAIN OPAR CPAR 
            {
              mainDeclarator RESULT =null;
		 RESULT = new MD_Declaration();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("main_declarator",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_specifier ::= CHAR 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_specifier ::= INTEGER 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_specifier ::= DOUBLE 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // type_specifier ::= STRING 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // type_specifier ::= BOOLEAN 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Boolean");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // type_specifier ::= VOID 
            {
              TS_Type RESULT =null;
		 RESULT = new TS_Type("Void");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_specifier",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // variable_type_specifier ::= CHAR 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Character");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // variable_type_specifier ::= INTEGER 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Integer");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // variable_type_specifier ::= DOUBLE 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Double");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // variable_type_specifier ::= STRING 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("String");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // variable_type_specifier ::= BOOLEAN 
            {
              VTS_Type RESULT =null;
		 RESULT = new VTS_Type("Boolean") ;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("variable_type_specifier",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // declaration ::= type_specifier identifier_list END 
            {
              declaration RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new D_identifierList(tS,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // declaration ::= assignment_expression 
            {
              declaration RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		assignmentExpression aE = (assignmentExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_assignmentExpression(aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // declaration ::= io_expressions 
            {
              declaration RESULT =null;
		int ioEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ioEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ioExpressions ioE = (ioExpressions)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_IOExpressions(ioE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // declaration ::= function_calls_expression 
            {
              declaration RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new D_FunctionCallsExpression(fCE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // assignment_expression ::= type_specifier ID ASSIGN conditional_expression END 
            {
              assignmentExpression RESULT =null;
		int tSleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tSright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TS_Type tS = (TS_Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AE_Assignation(tS,stringValue,cE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // assignment_expression ::= ID ASSIGN conditional_expression END 
            {
              assignmentExpression RESULT =null;
		int stringValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int stringValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String stringValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AE_Assignation(stringValue,cE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment_expression",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conditional_expression ::= equality_expression 
            {
              conditionalExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_equalityExpression(eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditional_expression ::= conditional_expression AND equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"&&",eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditional_expression ::= conditional_expression OR equality_expression 
            {
              conditionalExpression RESULT =null;
		int cEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		conditionalExpression cE = (conditionalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CE_Operation(cE,"||",eE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("conditional_expression",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // equality_expression ::= relational_expression 
            {
              equalityExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_relationalExpression(rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // equality_expression ::= equality_expression EQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"==",rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // equality_expression ::= equality_expression NEQU relational_expression 
            {
              equalityExpression RESULT =null;
		int eEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		equalityExpression eE = (equalityExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EE_Operation(eE,"!=",rE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equality_expression",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // relational_expression ::= additive_expression 
            {
              relationalExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_additiveExpression(aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // relational_expression ::= relational_expression LESS additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // relational_expression ::= relational_expression GREATER additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // relational_expression ::= relational_expression LESSEQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,"<=",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // relational_expression ::= relational_expression GREATEREQ additive_expression 
            {
              relationalExpression RESULT =null;
		int rEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		relationalExpression rE = (relationalExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RE_Operation(rE,">=",aE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relational_expression",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // additive_expression ::= multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_multiplicativeExpression(mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // additive_expression ::= additive_expression ADD multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"+",mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // additive_expression ::= additive_expression MIN multiplicative_expression 
            {
              additiveExpression RESULT =null;
		int aEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		additiveExpression aE = (additiveExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AE_Operation(aE,"-",mE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("additive_expression",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // multiplicative_expression ::= basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_basicExpression(bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // multiplicative_expression ::= multiplicative_expression MUL basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"*",bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // multiplicative_expression ::= multiplicative_expression DIV basic_expression 
            {
              multiplicativeExpression RESULT =null;
		int mEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int mEright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		multiplicativeExpression mE = (multiplicativeExpression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		basicExpression bE = (basicExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ME_Operation(mE,"/",bE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiplicative_expression",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // io_expressions ::= PRINT OPAR STRINGCONTENT CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // io_expressions ::= PRINT OPAR STRINGCONTENT COMMA identifier_list CPAR END 
            {
              ioExpressions RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Print(stringContent,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // io_expressions ::= SCAN OPAR ID CPAR END 
            {
              ioExpressions RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new IOE_Scan(identifierValue);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("io_expressions",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // function_calls_expression ::= ID OPAR CPAR END 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new FCE_FunctionCallsExpression(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // function_calls_expression ::= ID OPAR identifier_list CPAR END 
            {
              functionCallsExpression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int iLleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iLright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		identifierList iL = (identifierList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FCE_FunctionCallsExpression(id,iL);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // NT$0 ::= 
            {
              functionCallsExpression RESULT =null;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // function_calls_expression ::= ID OPAR CPAR error NT$0 END 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$1 ::= 
            {
              functionCallsExpression RESULT =null;
 parser.report_error("You forgot a ;","End of statement Syntax Error"); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // function_calls_expression ::= ID OPAR identifier_list CPAR error NT$1 END 
            {
              functionCallsExpression RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (functionCallsExpression) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function_calls_expression",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // basic_expression ::= primary_expression 
            {
              basicExpression RESULT =null;
		int pEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		primaryExpression pE = (primaryExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_primaryExpression(pE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // basic_expression ::= function_calls_expression 
            {
              basicExpression RESULT =null;
		int fCEleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fCEright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		functionCallsExpression fCE = (functionCallsExpression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BE_FunctionCallsExpression(fCE);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("basic_expression",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // primary_expression ::= ID 
            {
              primaryExpression RESULT =null;
		int identifierValueleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int identifierValueright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String identifierValue = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Id(identifierValue); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // primary_expression ::= INT 
            {
              primaryExpression RESULT =null;
		int integerContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int integerContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer integerContent = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Integer(integerContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // primary_expression ::= STRINGCONTENT 
            {
              primaryExpression RESULT =null;
		int stringContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringContent = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new String(stringContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // primary_expression ::= DOUBLEVALUE 
            {
              primaryExpression RESULT =null;
		int doubleContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int doubleContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double doubleContent = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Double(doubleContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // primary_expression ::= CHARCONTENT 
            {
              primaryExpression RESULT =null;
		int charContentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int charContentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character charContent = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PE_Content(new Character(charContent)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // primary_expression ::= TRUE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(new Boolean(true));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // primary_expression ::= FALSE 
            {
              primaryExpression RESULT =null;
		 RESULT = new PE_Content(new Boolean(false));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primary_expression",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
