/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Flex;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import java_cup.runtime.Symbol;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Ricardo
 */
public class Compiler extends javax.swing.JFrame {

    /**
     * Creates new form Compiler
     */
    public Compiler() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        compilerInput = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        compilerOutput = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(compilerInput);

        compilerOutput.setColumns(20);
        compilerOutput.setRows(5);
        jScrollPane3.setViewportView(compilerOutput);

        jLabel1.setText("Console Output");

        jMenu1.setText("File");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem5.setText("New File");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open File");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Save File");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Exit");
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Actions");

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Compile");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 901, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        compilerInput.setText("");
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File("."));
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File loadFile = fc.getSelectedFile();
            try {
                FileReader fr = new FileReader(loadFile.getAbsolutePath());
                compilerInput.read(fr, null);
                currentFile = loadFile;
                this.setTitle(currentFile.getName());
            } catch (IOException ex) {
                Logger.getLogger(Compiler.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        if (!compilerInput.getText().isEmpty()) {
            int i = JOptionPane.showConfirmDialog(null, "Do you want to save your changes?");
            if (i == JOptionPane.OK_OPTION) {
                if (currentFile == null) {
                    String fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
                    JFileChooser fc = new JFileChooser();
                    fc.setCurrentDirectory(new File("."));
                    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
                    fc.setAcceptAllFileFilterUsed(false);
                    if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                        File currentDirectory = fc.getSelectedFile();
                        File newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                        while (newFile.exists()) {
                            fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
                        }
                        newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                        currentFile = null;
                        FileWriter fw = null;
                        BufferedWriter bw = null;
                        try {
                            newFile.createNewFile();
                            fw = new FileWriter(newFile);
                            bw = new BufferedWriter(fw);
                            bw.write(compilerInput.getText());
                            bw.flush();
                            bw.close();
                            fw.close();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        compilerInput.setText("");
                        compilerOutput.setText("");
                    }
                } else {
                    FileWriter fw = null;
                    BufferedWriter bw = null;
                    try {
                        fw = new FileWriter(currentFile);
                        bw = new BufferedWriter(fw);
                        bw.write(compilerInput.getText());
                        bw.flush();
                        bw.close();
                        fw.close();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    currentFile = null;
                    this.setTitle("New Text");
                    compilerInput.setText("");
                    compilerOutput.setText("");
                }
            } else if (i == JOptionPane.NO_OPTION) {
                compilerInput.setText("");
                compilerOutput.setText("");
            } else {

            }
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        if (currentFile == null) {
            String fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File("."));
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setAcceptAllFileFilterUsed(false);
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File currentDirectory = fc.getSelectedFile();
                File newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                while (newFile.exists()) {
                    fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
                }
                newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                currentFile = null;
                FileWriter fw = null;
                BufferedWriter bw = null;
                try {
                    newFile.createNewFile();
                    fw = new FileWriter(newFile);
                    bw = new BufferedWriter(fw);
                    bw.write(compilerInput.getText());
                    bw.flush();
                    bw.close();
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                this.setTitle(fileName);
            }
        } else {
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                fw = new FileWriter(currentFile);
                bw = new BufferedWriter(fw);
                bw.write(compilerInput.getText());
                bw.flush();
                bw.close();
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        if (currentFile == null) {
            String fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
            JFileChooser fc = new JFileChooser();
            fc.setCurrentDirectory(new File("."));
            fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            fc.setAcceptAllFileFilterUsed(false);
            if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File currentDirectory = fc.getSelectedFile();
                File newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                while (newFile.exists()) {
                    fileName = JOptionPane.showInputDialog(null, "Please enter the name of your file.");
                }
                newFile = new File(currentDirectory.getAbsoluteFile() + "\\" + fileName);
                currentFile = newFile;
                FileWriter fw = null;
                BufferedWriter bw = null;
                try {
                    newFile.createNewFile();
                    fw = new FileWriter(newFile);
                    bw = new BufferedWriter(fw);
                    bw.write(compilerInput.getText());
                    bw.flush();
                    bw.close();
                    fw.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
                this.setTitle(fileName);
            }
        } else {
            FileWriter fw = null;
            BufferedWriter bw = null;
            try {
                fw = new FileWriter(currentFile);
                bw = new BufferedWriter(fw);
                bw.write(compilerInput.getText());
                bw.flush();
                bw.close();
                fw.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        
        // Compiling
        try {
            Symbol symbol;
            parser par = new parser(new InputStreamReader(new FileInputStream(currentFile)), compilerOutput);
            symbol = par.parse();
            while (((symbol).sym != sym.EOF)) {
                System.out.print("Token Name: " + sym.terminalNames[symbol.sym]);
                if (symbol.value != null) {
                    System.out.print(" | Value:" + symbol.value);
                }
                symbol = par.parse();
            }
            System.out.println("Fin del archivo");
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Compiler.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Compiler().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextPane compilerInput;
    private javax.swing.JTextArea compilerOutput;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
    File currentFile;
}
